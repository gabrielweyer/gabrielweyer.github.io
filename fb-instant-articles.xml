<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title></title>
    <link>https://gabrielweyer.net</link>
    <description>
      My name is Gabriel Weyer. I’m a software developer based in Melbourne, Australia. I blog about technology.
    </description>
    
        
            <item>
                <title>Top secret</title>
                <link>https://gabrielweyer.net/2019/06/29/top-secret/</link>
                <content:encoded>
                    <![CDATA[
                    <p>I was recently working on a project that contained secrets in source control. The team was aware of this fact but had never been able to allocate time to get rid of them. The circumstances changed and I was tasked with cleansing the repository. I was still unfamiliar with the code-base so I started to look around for config files. I realised quickly this approach would not work out:</p>

<ul>
  <li>Some secrets were hard-coded directly in the code</li>
  <li>Some secrets had previously been committed to source control but had since then been removed</li>
</ul>

<p>I needed a tool that would not only attempt to identify secrets but would also do so over the complete <code class="language-plaintext highlighter-rouge">Git</code> history.<!--more--></p>

<h2 id="identify-secrets-in-code">Identify secrets in code</h2>

<p>While <a href="https://github.com/awslabs/git-secrets">git-secrets</a> found <code class="language-plaintext highlighter-rouge">AWS</code> access keys, it missed out pretty much anything else (private keys, <code class="language-plaintext highlighter-rouge">API</code> keys for other services…). My next pick was <a href="https://github.com/dxa4481/truffleHog">truffleHog</a>. <del>Based on the name only I had a clear winner</del>, <code class="language-plaintext highlighter-rouge">truffleHog</code> uses both entropy and known patterns to attempt to find secrets. This approach results in a high number of false positive, but it is also the only one that discovered credentials I was unaware of.</p>

<blockquote>
  <p>For entropy checks, truffleHog will evaluate the shannon entropy for both the base64 char set and hexadecimal char set for every blob of text greater than 20 characters comprised of those character sets in each diff. If at any point a high entropy string &gt;20 characters is detected, it will print to the screen.</p>
</blockquote>

<p><strong>Warning</strong>: no automated approach will uncover all the secrets. There is no way to prevent developers from creating short secrets with a low entropy and use them in production. Your best hope in this case is that those secrets were committed together with stronger secrets and that they will appear in the output of <code class="language-plaintext highlighter-rouge">truffleHog</code>.</p>

<p>Running <code class="language-plaintext highlighter-rouge">truffleHog</code> on a repository is an iterative process. The first run will yield an enormous amount of results which will be impossible to thoroughly review manually. The goal of the initial phase should be to discard files which are unlikely to contain secrets. Package managers lock files, <code class="language-plaintext highlighter-rouge">CSS</code> and <code class="language-plaintext highlighter-rouge">SVG</code>s are amongst those files.</p>

<p>A good starting point to reduce the volume of the haystack is to use this exclude file:</p>

<figure class="highlight"><pre><code class="language-plaintext" data-lang="plaintext"># PHP Composer
.*composer.lock$

# npm
.*package-lock.json$

# Yarn
.*yarn.lock$

# Helm
.*requirements.lock$

# CSS
.*\.css$

# SVG
.*\.svg$

# A directory containing your collection of random numbers
data/more-data/

# A single file where you've let a GUID generator roam free
data/super-random.lol</code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">truffleHog</code> is written in <a href="https://en.wikipedia.org/wiki/Monty_Python">Python</a> and distributed using <a href="https://pypi.org/project/pip/">pip</a>. If you’re like me and have no idea what those words mean, the quickest way to get started is to use <code class="language-plaintext highlighter-rouge">Docker</code>. Browse to the directory where the <code class="language-plaintext highlighter-rouge">Git</code> repository is located and run the following container:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="nf">docker</span><span class="w"> </span><span class="nx">run</span><span class="w"> </span><span class="nt">-it</span><span class="w"> </span><span class="nt">--rm</span><span class="w"> </span><span class="se">`
</span><span class="w">    </span><span class="nt">-v</span><span class="w"> </span><span class="s2">"</span><span class="si">$(</span><span class="nv">$pwd</span><span class="si">)</span><span class="s2">:/opt/scan-me"</span><span class="w"> </span><span class="se">`
</span><span class="w">    </span><span class="nt">-v</span><span class="w"> </span><span class="s2">"&lt;output-and-settings-directory&gt;:/opt/truffle-hog"</span><span class="w"> </span><span class="se">`
</span><span class="w">    </span><span class="nx">python:3.7-stretch</span><span class="w"> </span><span class="nx">/bin/bash</span></code></pre></figure>

<p>The directory <code class="language-plaintext highlighter-rouge">&lt;output-and-settings-directory&gt;</code> should contain the exclude file we created previously.</p>

<p>Running the previous command will give you a <code class="language-plaintext highlighter-rouge">bash</code> session within a container with <code class="language-plaintext highlighter-rouge">Python</code> installed. You’ll then need to install <code class="language-plaintext highlighter-rouge">truggleHog</code> and run it:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">pip <span class="nb">install </span>truffleHog

trufflehog <span class="se">\</span>
    <span class="nt">--regex</span> <span class="se">\</span>
    <span class="nt">--exclude_paths</span> /opt/truffle-hog/exclude.txt <span class="se">\</span>
    file:///opt/scan-me/ <span class="o">&gt;</span> /opt/truffle-hog/output.txt</code></pre></figure>

<p>The switch <code class="language-plaintext highlighter-rouge">--regex</code> instructs <code class="language-plaintext highlighter-rouge">truffleHog</code> to look for <a href="https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json">known patterns</a> (ranging from private keys, passing by <code class="language-plaintext highlighter-rouge">AWS</code> access keys to <code class="language-plaintext highlighter-rouge">GCP</code> <code class="language-plaintext highlighter-rouge">API</code> keys). The switch <code class="language-plaintext highlighter-rouge">--exclude_paths</code> points to the exclude file we created previously (in this instance I named it <code class="language-plaintext highlighter-rouge">exclude.txt</code>). <code class="language-plaintext highlighter-rouge">truffleHog</code> expects to be looking at a remote <code class="language-plaintext highlighter-rouge">Git</code> repository but you can direct it to your file system by using <code class="language-plaintext highlighter-rouge">file:///</code>.</p>

<p>Running <code class="language-plaintext highlighter-rouge">truffleHog</code> takes some time (13 minutes on a repository with many thousands of commits) but by beeing cheeky we’ll be able to reduce the number of runs required.</p>

<p><code class="language-plaintext highlighter-rouge">truffleHog</code> outputs its results to the terminal. The potential secrets are coloured in bright yellow using <a href="https://en.wikipedia.org/wiki/ANSI_escape_code">ANSI escape codes</a>:</p>

<p><img src="/assets/top-secret/ansi-escape-codes.png" alt="ANSI escape codes" /></p>

<p>At times <code class="language-plaintext highlighter-rouge">truffleHog</code> gets over-enthusiastic and surrounds a potential secret with <strong>many</strong> <code class="language-plaintext highlighter-rouge">ANSI</code> escape codes:</p>

<p><img src="/assets/top-secret/too-many-escape-codes.png" alt="Too many ANSI escape codes" /></p>

<p>False positives litter the output. In the screenshot above, the <em>secret</em> is actually a portion of the path of an <code class="language-plaintext highlighter-rouge">S3</code> object. I decided to post-process <code class="language-plaintext highlighter-rouge">truffleHog</code>’s output using <code class="language-plaintext highlighter-rouge">C#</code>, but you could use any language to do so. In the <a href="https://www.linqpad.net/">LINQPad</a> script below I:</p>

<ul>
  <li>Replace duplicate <code class="language-plaintext highlighter-rouge">ANSI</code> escape codes by a single one</li>
  <li>Remove <code class="language-plaintext highlighter-rouge">ANSI</code> escape codes surrounding false positives and known secrets</li>
</ul>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">truffleHogOutputFilePath</span> <span class="p">=</span>
        <span class="s">@"&lt;output-and-settings-directory&gt;\output.txt"</span><span class="p">;</span>

    <span class="kt">var</span> <span class="n">lines</span> <span class="p">=</span> <span class="n">File</span><span class="p">.</span><span class="nf">ReadLines</span><span class="p">(</span><span class="n">truffleHogOutputFilePath</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">output</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="p">();</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">line</span> <span class="k">in</span> <span class="n">lines</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">cleansedLine</span> <span class="p">=</span> <span class="n">LineCleanser</span><span class="p">.</span><span class="nf">CleanseLine</span><span class="p">(</span><span class="n">line</span><span class="p">);</span>
        <span class="n">output</span><span class="p">.</span><span class="nf">AppendLine</span><span class="p">(</span><span class="n">cleansedLine</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">File</span><span class="p">.</span><span class="nf">WriteAllText</span><span class="p">(</span>
        <span class="n">truffleHogOutputFilePath</span> <span class="p">+</span> <span class="s">"-cleansed.txt"</span><span class="p">,</span>
        <span class="n">output</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">class</span> <span class="nc">LineCleanser</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">static</span> <span class="n">Regex</span> <span class="n">startSecretMatcher</span> <span class="p">=</span>
        <span class="k">new</span> <span class="nf">Regex</span><span class="p">(</span><span class="s">@"(\[93m)\1+"</span><span class="p">);</span>

    <span class="k">private</span> <span class="k">static</span> <span class="n">Regex</span> <span class="n">endSecretMatcher</span> <span class="p">=</span>
        <span class="k">new</span> <span class="nf">Regex</span><span class="p">(</span><span class="s">@"(\[0m)\1+"</span><span class="p">);</span>

    <span class="k">private</span> <span class="k">static</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">valuesToDiscard</span> <span class="p">=</span>
        <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="c1">// S3 buckets</span>
        <span class="s">"3ec1ae061c27325c7ecb543adf91235e22cbc9ed"</span><span class="p">,</span>
        <span class="c1">// Static asset hash</span>
        <span class="s">"c6c10016babba0a092e034a0745bd581"</span>
   <span class="p">};</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">CleanseLine</span><span class="p">(</span><span class="kt">string</span> <span class="n">line</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">line</span> <span class="p">=</span> <span class="n">startSecretMatcher</span><span class="p">.</span><span class="nf">Replace</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="s">"$1"</span><span class="p">);</span>
        <span class="n">line</span> <span class="p">=</span> <span class="n">endSecretMatcher</span><span class="p">.</span><span class="nf">Replace</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="s">"$1"</span><span class="p">);</span>

        <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">valueToDiscard</span> <span class="k">in</span> <span class="n">valuesToDiscard</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">line</span> <span class="p">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">Replace</span><span class="p">(</span>
                <span class="s">$"[93m</span><span class="p">{</span><span class="n">valueToDiscard</span><span class="p">}</span><span class="s">[0m"</span><span class="p">,</span>
                <span class="n">valueToDiscard</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">line</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This script runs in a few seconds and you’ll be able to iterate quickly.</p>

<ol>
  <li>Open <code class="language-plaintext highlighter-rouge">output.txt</code> in <code class="language-plaintext highlighter-rouge">Visual Studio Code</code></li>
  <li>Search for <code class="language-plaintext highlighter-rouge">[93m</code></li>
  <li>Add the <em>secret</em> to the values to discard list (if it is an actual secret, write it down)</li>
  <li>Run the <code class="language-plaintext highlighter-rouge">LINQPad</code> script</li>
  <li>Return to step <code class="language-plaintext highlighter-rouge">2</code></li>
</ol>

<p>After some cycles you’ll reach a much cleaner output. You might discover files you want to exclude from <code class="language-plaintext highlighter-rouge">truffleHog</code> (which would require you to run <code class="language-plaintext highlighter-rouge">truffleHog</code> again) or you could decide to discard those via scripting.</p>

<p>By now you should have a list of secrets and entire files that are secrets (private keys, license files…).</p>

<h2 id="purging-secrets">Purging secrets</h2>

<p><a href="https://rtyley.github.io/bfg-repo-cleaner/">BFG Repo-Cleaner</a> removes big files and secrets from your <code class="language-plaintext highlighter-rouge">Git</code> history. It requires <code class="language-plaintext highlighter-rouge">Java 8</code>, I already had it installed on my machine, but you could run it in <code class="language-plaintext highlighter-rouge">Docker</code> if you needed to.</p>

<p>The first step is to clone the repository as a <a href="https://git-scm.com/docs/gitglossary.html#def_bare_repository">bare repository</a>:</p>

<blockquote>
  <p>A bare repository […] does not have a locally checked-out copy of any of the files under revision control. That is, all of the Git administrative and control files that would normally be present in the hidden <code class="language-plaintext highlighter-rouge">.git</code> sub-directory are directly present in the […] directory instead, and no other files are present and checked out.</p>
</blockquote>

<p>You can clone a repository as a bare repository using the following command:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git clone <span class="nt">--mirror</span> https://github.com/rtyley/bfg-repo-cleaner.git project-backup.git</code></pre></figure>

<p>By convention the directory containing a bare repository should end with the suffix <code class="language-plaintext highlighter-rouge">.git</code>.</p>

<p>Copy the content of the <code class="language-plaintext highlighter-rouge">project-backup.git</code> directory into a directory called <code class="language-plaintext highlighter-rouge">project-secrets.git</code> (this is so that we don’t have to clone the repository again at every successive try).</p>

<p>You can then run <code class="language-plaintext highlighter-rouge">BFG Repo-Cleaner</code> with the following command:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="nf">java</span><span class="w"> </span><span class="nt">-jar</span><span class="w"> </span><span class="s2">"C:\tools\bfg\bfg.jar"</span><span class="w"> </span><span class="se">`
</span><span class="w">    </span><span class="nt">--delete-folders</span><span class="w"> </span><span class="s2">"{ancient-directory,useless-directory}"</span><span class="w"> </span><span class="se">`
</span><span class="w">    </span><span class="nt">--delete-files</span><span class="w"> </span><span class="s2">"{pfx-password.txt,my-super-private-key.key,private-key-for-iis.pfx,production-database-backup.sql,*.psd,all.min-626ed116.js.map}"</span><span class="w"> </span><span class="se">`
</span><span class="w">    </span><span class="nt">--replace-text</span><span class="w"> </span><span class="s2">"C:\tools\bfg\project-secrets.txt"</span><span class="w"> </span><span class="se">`
</span><span class="w">    </span><span class="nx">project-secrets.git</span></code></pre></figure>

<p>When running <code class="language-plaintext highlighter-rouge">truffleHog</code> I identified that two directories (<code class="language-plaintext highlighter-rouge">ancient-directory</code> and <code class="language-plaintext highlighter-rouge">useless-directory</code>) have not been in use for quite some time. They contain many files I want to purge from the <code class="language-plaintext highlighter-rouge">Git</code> history. The <code class="language-plaintext highlighter-rouge">--delete-folders</code> is used to remove a directory and its content from history. <code class="language-plaintext highlighter-rouge">BFG Repo-Cleaner</code> <strong>does not support full path for directories and files</strong>, so you’ll either only be able to delete objects with a unique name or delete all objects sharing the same name.</p>

<p>With <code class="language-plaintext highlighter-rouge">--delete-files</code> I’m deleting the backup from our production database amongst other files and all the <code class="language-plaintext highlighter-rouge">PSD</code> files. Another approach is to use the <code class="language-plaintext highlighter-rouge">--strip-blobs-bigger-than</code> switch to delete files bigger than a certain size.</p>

<p>The switch <code class="language-plaintext highlighter-rouge">--replace-text</code> points to the secrets we found when running <code class="language-plaintext highlighter-rouge">truffleHog</code>. <code class="language-plaintext highlighter-rouge">BFG Repo-Cleaner</code> will replace them with the string <code class="language-plaintext highlighter-rouge">***REMOVED***</code>. Each secret should be on its own line:</p>

<figure class="highlight"><pre><code class="language-plaintext" data-lang="plaintext">bc7cbdbde3df4166ae8724cc2acc5ee7
my-top-secret-secret</code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">BFG Repo-Cleaner</code> runs super quickly (a handful of seconds on the repository I was working on) but you need to scrutinise the output with care. If you get a warning about dirty files, this means some secrets are still present in the <code class="language-plaintext highlighter-rouge">HEAD</code> and by default <code class="language-plaintext highlighter-rouge">BFG Repo-Cleaner</code> doesn’t modify the contents of the latest commit on your <code class="language-plaintext highlighter-rouge">HEAD</code>. Here is an example of such a warning:</p>

<figure class="highlight"><pre><code class="language-plaintext" data-lang="plaintext">Protected commits
-----------------

These are your protected commits, and so their contents will NOT be altered:

 * commit e31fec6c (protected by 'HEAD') - contains 4 dirty files :
        - some-directory/production-database-backup.sql (98.9 KB)
        - other-directory/pfx-password.txt (99.5 KB)
        - ...

WARNING: The dirty content above may be removed from other commits, but as
the *protected* commits still use it, it will STILL exist in your repository.

Details of protected dirty content have been recorded here :

C:\Code\project-secrets.bfg-report\2019-06-18\16-59-18\protected-dirt\

If you *really* want this content gone, make a manual commit that removes it,
and then run the BFG on a fresh copy of your repo.

Cleaning
--------</code></pre></figure>

<p>You need to remove those secrets through a commit and then run <code class="language-plaintext highlighter-rouge">BFG Repo-Cleaner</code> again. <strong>Do not move on to the next step until this warning is gone</strong>. This is the output you should expect when the <code class="language-plaintext highlighter-rouge">HEAD</code> is clean:</p>

<figure class="highlight"><pre><code class="language-plaintext" data-lang="plaintext">Protected commits
-----------------

These are your protected commits, and so their contents will NOT be altered:

 * commit e31fec6c (protected by 'HEAD')

Cleaning
--------</code></pre></figure>

<p>Finally let’s ensure that <code class="language-plaintext highlighter-rouge">Git</code> itself doesn’t store anything any more about the objects we’ve just removed from history:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">cd </span>project-secrets.git
git reflog expire <span class="nt">--expire</span><span class="o">=</span>now <span class="nt">--all</span>
git gc <span class="nt">--prune</span><span class="o">=</span>now <span class="nt">--aggressive</span></code></pre></figure>

<p>The last step involves pushing back the changes to the <code class="language-plaintext highlighter-rouge">remote</code>. Quite often the <code class="language-plaintext highlighter-rouge">master</code> branch will be protected, you will need to lift this restriction before pushing:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git push</code></pre></figure>

<p>You also need to keep in mind that <strong>you will lose the links</strong> between your <code class="language-plaintext highlighter-rouge">Pull Requests</code>, work items, builds… and commits as the <code class="language-plaintext highlighter-rouge">Ids</code> identifying the commits will change. You should merge as many <code class="language-plaintext highlighter-rouge">Pull Requests</code> as you can before starting this process and warn your teammates that they will need to clone the repository again after you’re done.</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/06/29/top-secret/</guid>
                <description>
                    
                    Removing secrets from Git history.
                    
                </description>
                <pubDate>Sat, 29 Jun 2019 23:10:27 -0500</pubDate>
                <author>Gabriel Weyer</author>
            </item>
        
    
        
            <item>
                <title>Azure VM pricing</title>
                <link>https://gabrielweyer.net/2019/02/06/azure-vm-pricing/</link>
                <content:encoded>
                    <![CDATA[
                    <p>I was recently faced with an interesting problem. A company wanted to cost the migration of thousands of <code class="language-plaintext highlighter-rouge">VMs</code> to <code class="language-plaintext highlighter-rouge">Azure</code> using a <a href="https://docs.microsoft.com/en-us/azure/architecture/cloud-adoption/digital-estate/5-rs-of-rationalization#rehost">lift and shift</a> approach (also known as rehost). Due to the short deadline, we were not able to get our hands on detailed data. All we were provided with was a machine name, <code class="language-plaintext highlighter-rouge">CPU</code> cores count, <code class="language-plaintext highlighter-rouge">RAM</code> and a description field that was sometimes populated. Utilisation, storage and network usage were notably missing. We knew we couldn’t cost the migration accurately due to these unknowns, but we had enough data to cost the <code class="language-plaintext highlighter-rouge">VMs</code> themselves as we had access to <code class="language-plaintext highlighter-rouge">CPU</code> cores count and <code class="language-plaintext highlighter-rouge">RAM</code>. I must also add that the <code class="language-plaintext highlighter-rouge">VMs</code> varied greatly in their hardware specifications.</p>

<p><code class="language-plaintext highlighter-rouge">Microsoft</code> offers a <a href="https://azure.microsoft.com/en-us/pricing/calculator/?service=virtual-machines">pricing calculator</a> but it only supports manual input which disqualified it for our use case. A few <code class="language-plaintext highlighter-rouge">Microsoft</code> employees wrote web applications automating the pricing of <code class="language-plaintext highlighter-rouge">VMs</code> by importing <code class="language-plaintext highlighter-rouge">Excel</code> spreadsheets or <code class="language-plaintext highlighter-rouge">CSV</code> files. The ones I tried only offered <code class="language-plaintext highlighter-rouge">USD</code> as a currency and choked for anything bigger than a few hundred <code class="language-plaintext highlighter-rouge">VMs</code>. The output file was using a <code class="language-plaintext highlighter-rouge">en-us</code> culture so it had to be post-processed before being open in <code class="language-plaintext highlighter-rouge">Excel</code>. I didn’t have the time to review and select a commercial solution (<a href="https://azure.microsoft.com/en-us/services/azure-migrate/">Azure Migrate</a> requires to create a <code class="language-plaintext highlighter-rouge">VM</code> on-premises which was not possible). At the end of the day I came up with a semi-automated process that did the trick, but I felt that not much work would be required to empower teams to price <code class="language-plaintext highlighter-rouge">VMs</code> based on a limited data set.<!--more--></p>

<h2 id="requirements">Requirements</h2>

<p>I wanted to build something that would fit my use case (<code class="language-plaintext highlighter-rouge">AUD</code> and <code class="language-plaintext highlighter-rouge">en-au</code>) but could also be used by people anywhere:</p>

<ul>
  <li>Support thousands of <code class="language-plaintext highlighter-rouge">VMs</code></li>
  <li>Support all currencies</li>
  <li>Support all cultures</li>
  <li>Ability to automate refreshing of the pricing</li>
  <li><del>Timeboxed to a weekend</del></li>
</ul>

<p><strong>Note</strong>: you can find the code on <a href="https://github.com/gabrielweyer/azure-vm-pricing#readme">GitHub</a>.</p>

<h2 id="what-i-came-up-with">What I came up with</h2>

<p>My first goal was to retrieve the pricing from <code class="language-plaintext highlighter-rouge">Azure</code>. I initially considered the <a href="https://docs.microsoft.com/en-us/previous-versions/azure/reference/mt219005(v=azure.100)">Resource RateCard</a> (part of the <code class="language-plaintext highlighter-rouge">Billing API</code>) but the banner below didn’t fill me with confidence:</p>

<p><img src="/assets/azure-vm-pricing/resource-ratecard.png" alt="Resource RateCard" /></p>

<p>The <code class="language-plaintext highlighter-rouge">Billing API</code> requires authentication and parameters to be passed in, which would have increased the complexity of the solution. I knew one place would have mostly up-to-date pricing: the <a href="https://azure.microsoft.com/en-au/pricing/details/virtual-machines/windows/">Virtual Machines Pricing</a> page. This page displays all the available instances for a specific region. It is also possible to select a culture, currency and operating system. There was one problem though: the data is available as <code class="language-plaintext highlighter-rouge">HTML</code> markup instead of an <code class="language-plaintext highlighter-rouge">API</code>.</p>

<h3 id="puppeteer">Puppeteer</h3>

<p><a href="https://pptr.dev/">Puppeteer</a> allows you to control <code class="language-plaintext highlighter-rouge">Chrome</code> or as the project puts it:</p>

<blockquote>
  <p>Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium.</p>
</blockquote>

<p>It feels more natural to write a crawler in <code class="language-plaintext highlighter-rouge">JavaScript</code> (<code class="language-plaintext highlighter-rouge">JavaScript</code> is the language of the web after all). According to my limited <a href="https://github.com/gabrielweyer/ui-tests">experience</a>, <code class="language-plaintext highlighter-rouge">Puppeteer</code> is also significantly faster than <code class="language-plaintext highlighter-rouge">Selenium Web Driver</code>. I didn’t bother creating a <code class="language-plaintext highlighter-rouge">npm</code> package so you’ll have to clone the <a href="https://github.com/gabrielweyer/azure-vm-pricing#parser">repository</a> and follow the instructions. This is the kind of output you can expect from the tool:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"instance"</span><span class="p">:</span><span class="w"> </span><span class="s2">"B1S"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"vCpu"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ram"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
    </span><span class="nl">"payAsYouGo"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.028</span><span class="p">,</span><span class="w">
    </span><span class="nl">"oneYearReserved"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.019</span><span class="p">,</span><span class="w">
    </span><span class="nl">"threeYearReserved"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.014</span><span class="p">,</span><span class="w">
    </span><span class="nl">"threeYearReservedWithAzureHybridBenefit"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.009</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="err">//</span><span class="w"> </span><span class="err">Many</span><span class="w"> </span><span class="err">more</span><span class="w"> </span><span class="err">instances</span><span class="w">
</span><span class="p">]</span></code></pre></figure>

<p>I made the assumption that a single culture and currency will be used through a pricing session and this is why I only encoded the region and operating system in the <a href="https://github.com/gabrielweyer/azure-vm-pricing#parser-output">generated file names</a>. Calling this tool can easily be automated as it doesn’t require any configuration and generates files on disk. You could run it at regular intervals and publish the artefacts.</p>

<p>Once we’ve got our hands on the pricing, all we need to do is size the <code class="language-plaintext highlighter-rouge">VMs</code> and cost them.</p>

<h3 id="coster">Coster</h3>

<p>The <code class="language-plaintext highlighter-rouge">Coster</code> is a <code class="language-plaintext highlighter-rouge">.NET Core</code> console application. Again, I didn’t bother pushing a <code class="language-plaintext highlighter-rouge">NuGet</code> package so you’ll have to build from <a href="https://github.com/gabrielweyer/azure-vm-pricing#coster">source</a>. You’ll need the pricing files generated by the <code class="language-plaintext highlighter-rouge">Parser</code>. The input expected by the <code class="language-plaintext highlighter-rouge">Coster</code> is a <code class="language-plaintext highlighter-rouge">CSV</code> file with the following format:</p>

<figure class="highlight"><pre><code class="language-csv" data-lang="csv">Region,Name,CPU,RAM,Operating System
australia-southeast,SuperName,8,64,windows</code></pre></figure>

<p>Once done, the <code class="language-plaintext highlighter-rouge">Coster</code> will write a <code class="language-plaintext highlighter-rouge">CSV</code> file:</p>

<figure class="highlight"><pre><code class="language-csv" data-lang="csv">Region,Name,Operating System,Instance,CPU,RAM,Pay as You Go,One Year Reserved,Three Year Reserved,Three Year Reserved with Azure Hybrid Benefit
australia-southeast,SuperName,windows,E8 v3,8,64,1.006,0.74334,0.60803,0.24003</code></pre></figure>

<h2 id="conclusion">Conclusion</h2>

<p>Let me know if you’re using these tools and I’ll tidy up and publish packages on <code class="language-plaintext highlighter-rouge">npm</code> and <code class="language-plaintext highlighter-rouge">NuGet</code>. I can’t say I’ve tested them extensively so be ready for some rough edges!</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/02/06/azure-vm-pricing/</guid>
                <description>
                    
                    Mass-pricing of VMs on Azure based on CPU cores count and memory.
                    
                </description>
                <pubDate>Wed, 06 Feb 2019 16:25:27 -0600</pubDate>
                <author>Gabriel Weyer</author>
            </item>
        
    
        
            <item>
                <title>Advanced .NET Debugging #2</title>
                <link>https://gabrielweyer.net/2018/05/18/advanced-dotnet-debugging-2/</link>
                <content:encoded>
                    <![CDATA[
                    <p>I’m continuing to read the excellent <a href="https://www.goodreads.com/book/show/7306509-advanced-net-debugging">Advanced .NET Debugging</a> by Mario Hewardt. Last time I looked at <a href="/2018/04/06/advanced-dotnet-debugging-1/">finding the entry point of a native image</a>. This time around I’ll be investigating the launch of a <strong>managed</strong> image by <code class="language-plaintext highlighter-rouge">Windows</code>.</p>

<h2 id="prerequisites">Prerequisites</h2>

<ul>
  <li>A hex viewer
    <ul>
      <li>I used the <a href="https://peclrviewer.azurewebsites.net/">PE CLR Viewer</a> (<strong>disclaimer</strong>: I created this truly ugly looking website)<!--more--></li>
    </ul>
  </li>
</ul>

<h2 id="the-problem">The problem</h2>

<p>In the section <strong>Loading .NET Assemblies</strong> Mario explains how <code class="language-plaintext highlighter-rouge">Windows</code> is loading a managed image. He’s leveraging <a href="https://docs.microsoft.com/en-us/cpp/build/reference/dumpbin-reference">dumpbin.exe</a> which requires a <code class="language-plaintext highlighter-rouge">Visual Studio</code> installation <strong>with</strong> the <code class="language-plaintext highlighter-rouge">C++</code> workload. This has two issues:</p>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">C++</code> workload requires a few <code class="language-plaintext highlighter-rouge">GB</code> of hard drive</li>
  <li><code class="language-plaintext highlighter-rouge">dumpbin</code> presents a high-level view of the different headers, hence it’s not a good teaching tool as it abstracts the process of reading the bytes</li>
</ul>

<p>I decided to try a different approach. I’ve compiled a <strong>x86</strong> managed image which you can download <a href="https://gabrielweyer.blob.core.windows.net/blog-samples/advanced-dotnet-debugging-2/net461-x86.exe">here</a>. You can then visualise it using the <a href="https://peclrviewer.azurewebsites.net/">PE CLR Viewer</a> and follow me down the rabbit hole.</p>

<h2 id="finding-the-addressofentrypoint">Finding the <code class="language-plaintext highlighter-rouge">AddressOfEntryPoint</code></h2>

<p>I recommend you first read the <a href="/2018/04/06/advanced-dotnet-debugging-1/">previous post</a> in this series as it explains core concepts such as <a href="/2018/04/06/advanced-dotnet-debugging-1/#endianness">endianness</a> and <a href="/2018/04/06/advanced-dotnet-debugging-1/#relative-virtual-address">Relative Virtual Address</a>.</p>

<p>Last time I highlighted a formula to compute the <code class="language-plaintext highlighter-rouge">AddressOfEntryPoint</code> file offset:</p>

<blockquote>
  <p>Signature file offset + <code class="language-plaintext highlighter-rouge">0x28</code> = <code class="language-plaintext highlighter-rouge">AddressOfEntryPoint</code> file offset</p>
</blockquote>

<p>The <code class="language-plaintext highlighter-rouge">signature file offset</code> is always at file offset <code class="language-plaintext highlighter-rouge">0x3C</code>. As seen below it has for value <code class="language-plaintext highlighter-rouge">0x80</code>.</p>

<p><img src="/assets/advanced-dotnet-debugging-2/signature-file-offset.png" alt="Signature file offset" /></p>

<p>Now that we have the <code class="language-plaintext highlighter-rouge">signature file offset</code>, we can compute the <code class="language-plaintext highlighter-rouge">AddressOfEntryPoint</code> file offset:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">0x80</code> + <code class="language-plaintext highlighter-rouge">0x28</code> = <code class="language-plaintext highlighter-rouge">0xA8</code></p>
</blockquote>

<p><img src="/assets/advanced-dotnet-debugging-2/address-of-entry-point.png" alt="AddressOfEntryPoint" /></p>

<p>As seen above, <code class="language-plaintext highlighter-rouge">AddressOfEntryPoint</code> has for value <code class="language-plaintext highlighter-rouge">0x2716</code>. But wait we’re not done, the <code class="language-plaintext highlighter-rouge">AddressOfEntryPoint</code> is a <code class="language-plaintext highlighter-rouge">RVA</code> which we need to convert to a file offset.</p>

<h2 id="converting-the-entry-point-rva-to-a-file-offset">Converting the entry point <code class="language-plaintext highlighter-rouge">RVA</code> to a file offset</h2>

<p>The entry point is located in the <strong>.text</strong> section (the <strong>.text</strong> section contains executable code), so we’ll need to locate the <strong>.text</strong> section first and this is where the <strong>section headers</strong> come into play. The <strong>section headers</strong> is a conversion table between <code class="language-plaintext highlighter-rouge">RVA</code> and file offset for the different sections:</p>

<p><img src="/assets/advanced-dotnet-debugging-2/text-section-header.png" alt=".text section header" /></p>

<p>According to the screenshot above the <strong>.text</strong> section has a base <code class="language-plaintext highlighter-rouge">RVA</code> of <code class="language-plaintext highlighter-rouge">0x2000</code> and is located at file offset <code class="language-plaintext highlighter-rouge">0x200</code>. Those two pieces of information will allow us to convert the entry point <code class="language-plaintext highlighter-rouge">RVA</code> into an entry point file offset:</p>

<blockquote>
  <p>Entry point <code class="language-plaintext highlighter-rouge">RVA</code> - .text base <code class="language-plaintext highlighter-rouge">RVA</code> + .text file offset = entry point file offset</p>
</blockquote>

<p>Let’s replace the placeholders with the values we obtained previously:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">0x2716</code> - <code class="language-plaintext highlighter-rouge">0x2000</code> + <code class="language-plaintext highlighter-rouge">0x200</code> = <code class="language-plaintext highlighter-rouge">0x916</code></p>
</blockquote>

<p>The entry point has for file offset <code class="language-plaintext highlighter-rouge">0x916</code>. But as we’ll see in the next section, this is yet another level of indirection.</p>

<h2 id="jumping-into-the-import-address-table">Jumping into the Import Address Table</h2>

<p><img src="/assets/advanced-dotnet-debugging-2/jump.png" alt="JMP" /></p>

<p>Apparently the first part (<code class="language-plaintext highlighter-rouge">FF25</code>) is the <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/x86-instructions#control_flow">x86 instruction</a> for <code class="language-plaintext highlighter-rouge">JMP</code> which instruct the computer to jump to an address (the second part):</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">JMP 402000</code></p>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">0x402000</code> is a <code class="language-plaintext highlighter-rouge">VA</code> (<code class="language-plaintext highlighter-rouge">Virtual Address</code>) based on the <strong>image base</strong> which has a value of <code class="language-plaintext highlighter-rouge">0x400000</code> (as seen in the <strong>NT specific fields header</strong> section):</p>

<p><img src="/assets/advanced-dotnet-debugging-2/image-base.png" alt="Image Base" /></p>

<p>Armed with this knowledge we can convert the <code class="language-plaintext highlighter-rouge">VA</code> to a <code class="language-plaintext highlighter-rouge">RVA</code>:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">VA</code> - image base <code class="language-plaintext highlighter-rouge">VA</code> = <code class="language-plaintext highlighter-rouge">RVA</code></p>
</blockquote>

<p>Let’s replace the placeholders with the values we obtained previously:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">0x402000</code> - <code class="language-plaintext highlighter-rouge">0x400000</code> = <code class="language-plaintext highlighter-rouge">0x2000</code></p>
</blockquote>

<p>If we look at the <strong>Data directories</strong> section, we can see than the <strong>Import Address Table</strong> is located at <code class="language-plaintext highlighter-rouge">RVA</code> <code class="language-plaintext highlighter-rouge">0x2000</code>. The <strong>Import Address Table</strong> is the first section of the <strong>.text</strong> section.</p>

<p><img src="/assets/advanced-dotnet-debugging-2/import-address-table-rva.png" alt="Import Address Table RVA" /></p>

<h2 id="jumping-out-of-the-import-address-table">Jumping out of the Import Address Table</h2>

<p><img src="/assets/advanced-dotnet-debugging-2/import-address-table.png" alt="Import Address Table" /></p>

<p>The <code class="language-plaintext highlighter-rouge">RVA</code> located at file offset <code class="language-plaintext highlighter-rouge">0x200</code> is: <code class="language-plaintext highlighter-rouge">0x26F8</code>. Like a mad rabbit, we continue jumping around. We can reuse the formula to convert a <code class="language-plaintext highlighter-rouge">RVA</code> to a file offset:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">0x26F8</code> - <code class="language-plaintext highlighter-rouge">0x2000</code> + <code class="language-plaintext highlighter-rouge">0x200</code> = <code class="language-plaintext highlighter-rouge">0x8F8</code></p>
</blockquote>

<p>Now I have good news, <code class="language-plaintext highlighter-rouge">0x8F8</code> is our final destination. Let’s inspect it more closely:</p>

<p><img src="/assets/advanced-dotnet-debugging-2/real-entry-point.png" alt="Real entry point" /></p>

<p>We skip the leading <code class="language-plaintext highlighter-rouge">NUL</code> bytes, the other bytes are <code class="language-plaintext highlighter-rouge">ASCII</code> characters. The first section is the function name <code class="language-plaintext highlighter-rouge">_CorExeMain</code> and - coming after a <code class="language-plaintext highlighter-rouge">NUL</code> byte - the second section is the name of the executable: <code class="language-plaintext highlighter-rouge">mscoree.dll</code>.</p>

<p>As it turns out <code class="language-plaintext highlighter-rouge">mscoree.dll</code> is located in the <code class="language-plaintext highlighter-rouge">Windows</code> directory:</p>

<p><img src="/assets/advanced-dotnet-debugging-2/mscoree.png" alt="mscoree" /></p>

<h2 id="conclusion">Conclusion</h2>

<p>I’ve demonstrated how to find the entry point of a <strong>x86</strong> managed image but in reality <code class="language-plaintext highlighter-rouge">Windows</code> knows how to execute a managed image just by looking at the <strong>CLI header</strong>. In the case of <strong>x64</strong> managed image the entry point is not even present!</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/18/advanced-dotnet-debugging-2/</guid>
                <description>
                    
                    How is Windows launching a managed image?
                    
                </description>
                <pubDate>Fri, 18 May 2018 20:58:34 -0500</pubDate>
                <author>Gabriel Weyer</author>
            </item>
        
    
        
            <item>
                <title>WinDbg #2 - The blocked async</title>
                <link>https://gabrielweyer.net/2018/05/04/windbg-2-blocked-async/</link>
                <content:encoded>
                    <![CDATA[
                    <p>Today’s exercise is not an exercise! The investigation I’m about to describe was triggered by a production outage affecting multiple <code class="language-plaintext highlighter-rouge">API</code>s - albeit not at the same time - at a customer. For obvious reasons I’ll not be able to share the code and will have to alter / obfuscate some of the commands’ results. I still think this is a valuable exercise as it is a classic example of an easy to make mistake leading to a catastrophic result.</p>

<p>The other interesting point is that I had no idea what the issue was so I’ll not be following a script as I did in the first instalment.<!--more--></p>

<h2 id="the-symptoms">The symptoms</h2>

<p>A week prior we had another production outage. One of our <code class="language-plaintext highlighter-rouge">API</code> became unresponsive, requests would sit in <code class="language-plaintext highlighter-rouge">Chrome</code> waiting for minutes for the server to reply. Logs did not yield anything interesting and according to <a href="https://newrelic.com/">New Relic</a> we had a quasiperfect <a href="https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/apdex-measuring-user-satisfaction">Apdex</a>.</p>

<ul>
  <li>The working theory was that requests were failing early in the pipeline so that our logging did not pick anything</li>
  <li>According to <code class="language-plaintext highlighter-rouge">New Relic</code> our traffic plummeted during the outage. So basically, <code class="language-plaintext highlighter-rouge">New Relic</code> was not capturing any of the failing requests and the dashboards were all green!</li>
</ul>

<p>At this stage I recommended to capture a memory dump before restarting the web app. The later happened but the former did not. The app recycled and started to serve production traffic again but we were left with few clues. Afterwards the operation team engaged Microsoft and learned than the thread count spiked during the outage.</p>

<p>I then wrote a guide explaining how to write a memory dump and we instructed the operation team to capture a memory dump before recycling the app if the outage were to happen again.</p>

<p>We were left with two clues:</p>

<ul>
  <li>Unresponsive web app</li>
  <li>High thread count</li>
</ul>

<p>We had released a new version of this <code class="language-plaintext highlighter-rouge">API</code> a week before the outage. The release included a fix that I did for an intermittent <code class="language-plaintext highlighter-rouge">500</code> error that our testers and front-end teams experienced. The patch involved modifying the lifetime of some classes involved in the logging system. The Pull Request had been approved after a heated discussion and as soon as news of the outage broke, fingers were pointed at my fix.</p>

<h2 id="draw-of-luck">Draw of luck</h2>

<p>Come Friday morning, I’m sipping my Dirty Chai while absently looking at <code class="language-plaintext highlighter-rouge">Slack</code>. Suddenly a message catches my attention:</p>

<p><img src="/assets/windbg-2/unresponsive-again.png" alt="Unresponsive again" /></p>

<p>This is the same <code class="language-plaintext highlighter-rouge">API</code> that went down last week! My heart beats slightly faster while I fire up the <code class="language-plaintext highlighter-rouge">Azure</code> portal. And sure enough the thread count is far too high for the current dev traffic this API is serving:</p>

<p><img src="/assets/windbg-2/oh-my-thread-count.png" alt="Oh my thread count" /></p>

<p>I write a memory dump, slurp the end of my Dirty Chai and go to work thinking I’ll allocate some <code class="language-plaintext highlighter-rouge">WinDbg</code> time during the week-end.</p>

<h2 id="were-down-again">We’re down again</h2>

<p>A few hours later another <code class="language-plaintext highlighter-rouge">API</code> experiences a significant outage. The symptoms are eerily similar. I was waiting for another of my <code class="language-plaintext highlighter-rouge">PR</code> to get approved but the process is being delayed as our build server is <a href="https://githubengineering.com/crypto-deprecation-notice/">down</a>. I don’t have access to the memory dump that was written in production during the outage but it’s likely the outages have a common cause; hence I decide to take my frustration out on the memory dump I wrote in the morning.</p>

<h2 id="investigation">Investigation</h2>

<h3 id="threads-all-the-things">Threads all the things</h3>

<p>The first question I had was: <strong>why do we have so many threads and what are they doing</strong>?</p>

<p>I’ll start with the <code class="language-plaintext highlighter-rouge">Threads</code> <a href="https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands">SOS command</a>.</p>

<blockquote>
  <p>Displays all managed threads in the process.</p>
</blockquote>

<p><strong>Note</strong>: The first column is the thread <code class="language-plaintext highlighter-rouge">ID</code>.</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; !threads
ThreadCount:      145
UnstartedThread:  0
BackgroundThread: 133
PendingThread:    0
DeadThread:       12
Hosted Runtime:   no
                                                                         Lock
       ID OSID ThreadOBJ    State GC Mode     GC Alloc Context  Domain   Count Apt Exception
   4    1 4420 05db3d78     28220 Preemptive  00000000:00000000 04e8e548 0     Ukn
  22    2 c3ac 05dc9200     2b220 Preemptive  00000000:00000000 04e8e548 0     MTA (Finalizer)
  23    3 108fc 05e0f738   102a220 Preemptive  00000000:00000000 04e8e548 0     MTA (Threadpool Worker)
  25    4 10ddc 05e1c0f0     21220 Preemptive  00000000:00000000 04e8e548 0     Ukn
  26    7 9010 05eb8e90   1020220 Preemptive  00000000:00000000 04e8e548 0     Ukn (Threadpool Worker)
#
# Abbreviated
#
 144  127 ed88 23f294b0   1029220 Preemptive  0E65ACE0:00000000 04e8e548 0     MTA (Threadpool Worker)
 145  141 ba3c 2407e100   3029220 Preemptive  0E61BF28:00000000 20e69ac0 0     MTA (Threadpool Worker)
 146  140 9cfc 23f20428   1029220 Preemptive  0A524AFC:00000000 04e8e548 0     MTA (Threadpool Worker)
 147  131 194f8 20f753a8   3029220 Preemptive  00000000:00000000 20e69ac0 0     MTA (Threadpool Worker)
 148  144 f4a8 23f20970   1029220 Preemptive  064DFA28:00000000 04e8e548 0     MTA (Threadpool Worker)
 149  145 9028 20f758f0     20220 Preemptive  06443CB8:00000000 04e8e548 0     Ukn
 150  143 16520 23f299f8   1029220 Preemptive  1253C4A8:00000000 04e8e548 0     MTA (Threadpool Worker)
 151  146 13db0 23f20eb8     20220 Preemptive  0E61FB98:00000000 04e8e548 0     Ukn</code></pre></figure>

<p>I then pick a few threads to see what they’re doing. To achieve this I’ll combine two different commands:</p>

<ul>
  <li><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/-e--thread-specific-command-">Thread-Specific Command</a>: The <code class="language-plaintext highlighter-rouge">~e</code> command executes one or more commands for a specific thread</li>
</ul>

<figure class="highlight"><pre><code class="language-text" data-lang="text">~&lt;thread-ID&gt;e &lt;command&gt;</code></pre></figure>

<ul>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands">CLRStack</a>: Provides a stack trace of managed code only</li>
</ul>

<h4 id="thread-143">Thread 143</h4>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; ~143e !CLRStack
OS Thread Id: 0xb9ac (143)
Child SP       IP Call Site
2a8bd110 7712eb2c [GCFrame: 2a8bd110]
2a8bd2b8 7712eb2c [GCFrame: 2a8bd2b8]
2a8bd268 7712eb2c [HelperMethodFrame: 2a8bd268] System.Threading.Monitor.ReliableEnter(System.Object, Boolean ByRef)
2a8bd2f8 21ab107d Autofac.Core.Lifetime.LifetimeScope.GetOrCreateAndShare(System.Guid, System.Func`1)
2a8bd344 21ab0f15 Autofac.Core.Resolving.InstanceLookup.Execute()
2a8bd370 21ab0a16 Autofac.Core.Resolving.ResolveOperation.GetOrCreateInstance(Autofac.Core.ISharingLifetimeScope, Autofac.Core.IComponentRegistration, System.Collections.Generic.IEnumerable`1)
2a8bd390 21ab20e1 Autofac.Core.Resolving.InstanceLookup.ResolveComponent(Autofac.Core.IComponentRegistration, System.Collections.Generic.IEnumerable`1)
# Abbreviated</code></pre></figure>

<p>So thread <code class="language-plaintext highlighter-rouge">143</code> is trying to acquire a lock: <code class="language-plaintext highlighter-rouge">System.Threading.Monitor.ReliableEnter(System.Object, Boolean ByRef)</code>. Let’s look at another thread.</p>

<h4 id="thread-136">Thread 136</h4>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; ~136e !CLRStack
OS Thread Id: 0x17e4 (136)
Child SP       IP Call Site
2b07d610 7712eb2c [GCFrame: 2b07d610]
2b07d7bc 7712eb2c [GCFrame: 2b07d7bc]
2b07d76c 7712eb2c [HelperMethodFrame: 2b07d76c] System.Threading.Monitor.ReliableEnter(System.Object, Boolean ByRef)
2b07d7fc 21ab107d Autofac.Core.Lifetime.LifetimeScope.GetOrCreateAndShare(System.Guid, System.Func`1)
2b07d848 21ab0f15 Autofac.Core.Resolving.InstanceLookup.Execute()
2b07d874 21ab0a16 Autofac.Core.Resolving.ResolveOperation.GetOrCreateInstance(Autofac.Core.ISharingLifetimeScope, Autofac.Core.IComponentRegistration, System.Collections.Generic.IEnumerable`1)
2b07d894 21ab20e1 Autofac.Core.Resolving.InstanceLookup.ResolveComponent(Autofac.Core.IComponentRegistration, System.Collections.Generic.IEnumerable`1)
# Abbreviated</code></pre></figure>

<p>Thread <code class="language-plaintext highlighter-rouge">136</code> is also trying to acquire a lock.</p>

<h4 id="thread-123">Thread 123</h4>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; ~123e !CLRStack
OS Thread Id: 0x4ce4 (123)
Child SP       IP Call Site
3d14d850 7712eb2c [GCFrame: 3d14d850]
3d14d9fc 7712eb2c [GCFrame: 3d14d9fc]
3d14d9ac 7712eb2c [HelperMethodFrame: 3d14d9ac] System.Threading.Monitor.ReliableEnter(System.Object, Boolean ByRef)
3d14da3c 21ab107d Autofac.Core.Lifetime.LifetimeScope.GetOrCreateAndShare(System.Guid, System.Func`1)
3d14da88 21ab0f15 Autofac.Core.Resolving.InstanceLookup.Execute()
3d14dab4 21ab0a16 Autofac.Core.Resolving.ResolveOperation.GetOrCreateInstance(Autofac.Core.ISharingLifetimeScope, Autofac.Core.IComponentRegistration, System.Collections.Generic.IEnumerable`1)
3d14dad4 21ab20e1 Autofac.Core.Resolving.InstanceLookup.ResolveComponent(Autofac.Core.IComponentRegistration, System.Collections.Generic.IEnumerable`1)
# Abbreviated</code></pre></figure>

<p>Thread <code class="language-plaintext highlighter-rouge">123</code> is also trying to acquire a lock. By now <strong>it’s safe to assume than many threads are trying to acquire a lock. How many of them exactly? And more importantly: which naughty thread is holding on the lock?</strong></p>

<h3 id="who-is-holding-on-the-lock">Who is holding on the lock?</h3>

<p>Time to use another <a href="https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands">SOS command</a>: <code class="language-plaintext highlighter-rouge">SyncBlk</code>.</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; !syncblk
Index         SyncBlock MonitorHeld Recursion Owning Thread Info          SyncBlock Owner
   52 20ee3118          229         2 20fc6ba0 9628  42   0a13ee8c System.Object
-----------------------------
Total           279
CCW             4
RCW             3
ComClassFactory 0
Free            206</code></pre></figure>

<p>Thread <code class="language-plaintext highlighter-rouge">ID</code> <code class="language-plaintext highlighter-rouge">42</code> is holding the lock. The third column (<code class="language-plaintext highlighter-rouge">MonitorHeld</code>) indicates how many threads are trying to acquire the same lock. In this case it is <code class="language-plaintext highlighter-rouge">114</code> (<code class="language-plaintext highlighter-rouge">(229 - 1) / 2</code>). You can read more about how I computed this number in this <a href="https://stackoverflow.com/a/2203085/57369">Stack Overflow answer</a>.</p>

<h3 id="what-is-thread-42-doing">What is thread 42 doing?</h3>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; ~42e !CLRStack
OS Thread Id: 0x9628 (42)
Child SP       IP Call Site
293bd178 7712eb2c [GCFrame: 293bd178]
293bd228 7712eb2c [HelperMethodFrame_1OBJ: 293bd228] System.Threading.Monitor.ObjWait(Boolean, Int32, System.Object)
293bd2b4 707bc273 System.Threading.Monitor.Wait(System.Object, Int32, Boolean) [f:\dd\ndp\clr\src\BCL\system\threading\monitor.cs @ 203]
293bd2c4 7084ca14 System.Threading.Monitor.Wait(System.Object, Int32) [f:\dd\ndp\clr\src\BCL\system\threading\monitor.cs @ 213]
293bd2c8 707ccb56 System.Threading.ManualResetEventSlim.Wait(Int32, System.Threading.CancellationToken)
293bd31c 707c785c System.Threading.Tasks.Task.SpinThenBlockingWait(Int32, System.Threading.CancellationToken) [f:\dd\ndp\clr\src\BCL\system\threading\Tasks\Task.cs @ 3320]
293bd35c 70868aed System.Threading.Tasks.Task.InternalWait(Int32, System.Threading.CancellationToken) [f:\dd\ndp\clr\src\BCL\system\threading\Tasks\Task.cs @ 3259]
293bd3c0 707c58ca System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task) [f:\dd\ndp\clr\src\BCL\system\runtime\compilerservices\TaskAwaiter.cs @ 148]
293bd3cc 1f4e5fd3 Contoso.AzureKeyVaultClient.GetSecretByName(System.String)
293bd3d8 1f4e5d80 Contoso.SecureAppSettings.GetOrFail(System.String)
293bd3f0 1f4e5ccb Contoso.CachableSecureAppSettings.GetOrFail(System.String)
293bd404 218b4f94 Contoso.SomeSecureSettings..ctor(Contoso.ISecureSettings)
293bd418 20af91eb DynamicClass.lambda_method(System.Runtime.CompilerServices.Closure, System.Object[])
293bd424 21ab1ef5 Autofac.Core.Activators.Reflection.ConstructorParameterBinding.Instantiate()</code></pre></figure>

<p>The last line executed in our code was:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Contoso</span><span class="p">.</span><span class="n">AzureKeyVaultClient</span><span class="p">.</span><span class="nf">GetSecretByName</span><span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="n">String</span><span class="p">)</span></code></pre></figure>

<p>Despite its name it seems to be executing <code class="language-plaintext highlighter-rouge">async</code> code and even more troubling it looks like we’re blocking. I have enough information to locate the source and find the following method:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="kt">string</span> <span class="nf">GetSecretByName</span><span class="p">(</span><span class="kt">string</span> <span class="n">secretName</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nf">GetSecretByNameAsync</span><span class="p">(</span><span class="n">secretName</span><span class="p">).</span><span class="nf">GetAwaiter</span><span class="p">().</span><span class="nf">GetResult</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>Sure enough we’re blocking on an <code class="language-plaintext highlighter-rouge">async</code> method. I’ll let Stephen Cleary explains what’s wrong but it can be summed up as: <a href="http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html">Don’t Block on Async Code</a> (seriously read the blog post).</p>

<h2 id="solution">Solution</h2>

<p>There are two alternatives:</p>

<ul>
  <li>
    <p>Resolve the secret on application startup. At this stage we’re single threaded and there is no request context so we can block without risking a deadlock. It isn’t pretty and will slow down the application startup but it works.</p>
  </li>
  <li>
    <p>A nicer option would be to resolve the secret when needed (lazy initialization). By then we’ll be in an <code class="language-plaintext highlighter-rouge">async</code> method and we will be able to call the <code class="language-plaintext highlighter-rouge">Async</code> overload.</p>
  </li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>Once again <code class="language-plaintext highlighter-rouge">WinDbg</code> has delivered the goods. I write up my findings and communicate them to my colleagues. It’s 4:30 PM and the build server is still not fixed, I decide to call it a day.</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/04/windbg-2-blocked-async/</guid>
                <description>
                    
                    Troubleshoot blocked async with WinDbg.
                    
                </description>
                <pubDate>Fri, 04 May 2018 17:59:01 -0500</pubDate>
                <author>Gabriel Weyer</author>
            </item>
        
    
        
            <item>
                <title>Cake build</title>
                <link>https://gabrielweyer.net/2018/04/21/cake-build/</link>
                <content:encoded>
                    <![CDATA[
                    <p><strong>5th of Jan 2019</strong>: a lot has been happening since I initially wrote this post. <code class="language-plaintext highlighter-rouge">Azure DevOps</code> released a free tier for open source projects, the <code class="language-plaintext highlighter-rouge">Cake</code> and <code class="language-plaintext highlighter-rouge">GitVersion</code> contributors have been hard at work to take advantage of the latest features of <code class="language-plaintext highlighter-rouge">.NET Core</code>. So much things have changed that I decided to update this post to reflect the current state of affairs (inclusion of <code class="language-plaintext highlighter-rouge">Azure DevOps</code>, upgrade to <code class="language-plaintext highlighter-rouge">.NET Core 2.2</code>, utilisation of <code class="language-plaintext highlighter-rouge">.NET Core global tools</code> and removing the <code class="language-plaintext highlighter-rouge">Mono</code> requirement on <code class="language-plaintext highlighter-rouge">Unix</code> platforms).</p>

<p>As a developer I’m amazed by the number of free tools and services available. I wanted to create an end-to-end demo of a <code class="language-plaintext highlighter-rouge">CI/CD</code> pipeline that would include:</p>

<ul>
  <li><a href="/2018/04/21/cake-build/#configuration">Trigger a build on commit</a></li>
  <li><a href="/2018/04/21/cake-build/#semantic-versioning">Use semantic versioning</a></li>
  <li><a href="/2018/04/21/cake-build/#run-the-tests">Run tests</a></li>
  <li><a href="/2018/04/21/cake-build/#publish-the-test-results">Publish test results</a></li>
  <li><a href="/2018/04/21/cake-build/#create-nuget-packages">Create NuGet packages</a></li>
  <li><a href="/2018/04/21/cake-build/#publish-the-nuget-packages">Publish the NuGet packages</a></li>
  <li><a href="/2018/04/21/cake-build/#create-a-github-release">Create a GitHub release</a></li>
</ul>

<p>For my purpose I wanted anonymous users to have access to a read-only view. I initially selected <a href="https://www.appveyor.com/">AppVeyor</a> as it seems to be the most popular choice for <code class="language-plaintext highlighter-rouge">.NET</code> open-source projects. But while browsing around I discovered than projects were often using more than one platform. <a href="https://travis-ci.org/">Travis CI</a> and <a href="https://circleci.com/">CircleCI</a> seemed to be the two other prevailing options. Since the initial version of this post, <a href="https://azure.microsoft.com/en-au/services/devops/">Azure DevOps</a> has released a free and unlimited plan for open source projects. I decided to leverage the four platforms so that I could highlight their pros and cons.<!--more--></p>

<h2 id="configuration">Configuration</h2>

<p>The code is hosted on the <code class="language-plaintext highlighter-rouge">GitHub</code> repository <a href="https://github.com/gabrielweyer/cake-build">Cake build</a>. It’s named <a href="https://cakebuild.net/">Cake</a> after my favourite build automation system and the project is using <code class="language-plaintext highlighter-rouge">Cake</code> as its build system.</p>

<p><code class="language-plaintext highlighter-rouge">AppVeyor</code>, <code class="language-plaintext highlighter-rouge">Azure DevOps</code>, <code class="language-plaintext highlighter-rouge">CircleCI</code> and <code class="language-plaintext highlighter-rouge">Travis CI</code> all use <a href="http://yaml.org/">YAML</a> configuration files. This means that your build steps are living in the same space than your code and this presents several benefits:</p>

<ul>
  <li>Any developer can modify the build</li>
  <li>The project is self-contained
    <ul>
      <li>Developers don’t have to search where the build is located</li>
      <li>It doesn’t matter if something terrible happens to the build server</li>
    </ul>
  </li>
  <li>Ability to run the build locally on some platforms</li>
</ul>

<p>I’m sure you’ll be as surprised as I was when I realised how simple the <code class="language-plaintext highlighter-rouge">YAML</code> files are:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">AppVeyor</code>: <a href="https://github.com/gabrielweyer/cake-build/blob/master/appveyor.yml">appveyor.yml</a></li>
  <li><code class="language-plaintext highlighter-rouge">Azure DevOps</code>: <a href="https://github.com/gabrielweyer/cake-build/blob/master/azure-pipelines.yml">azure-pipelines.yml</a></li>
  <li><code class="language-plaintext highlighter-rouge">CircleCI</code>: <a href="https://github.com/gabrielweyer/cake-build/blob/master/.circleci/config.yml">.circleci/config.yml</a></li>
  <li><code class="language-plaintext highlighter-rouge">Travis CI</code>: <a href="https://github.com/gabrielweyer/cake-build/blob/master/.travis.yml">.travis.yml</a></li>
</ul>

<h2 id="the-code">The code</h2>

<p>The project is useless. What is important is that it describes a real-life scenario:</p>

<ul>
  <li>The solution contains two projects which will be packed as <code class="language-plaintext highlighter-rouge">NuGet</code> packages
    <ul>
      <li>The <code class="language-plaintext highlighter-rouge">Logic</code> project references a <code class="language-plaintext highlighter-rouge">NuGet</code> package from <a href="https://www.nuget.org/">nuget.org</a> via a <code class="language-plaintext highlighter-rouge">PackageReference</code>, <code class="language-plaintext highlighter-rouge">dotnet pack</code> will turn this into a package reference.</li>
      <li>The <code class="language-plaintext highlighter-rouge">SuperLogic</code> project depends on <code class="language-plaintext highlighter-rouge">Logic</code> and when packing, this project reference will be turned into a <code class="language-plaintext highlighter-rouge">NuGet</code> package reference (handled out of the box by <code class="language-plaintext highlighter-rouge">dotnet pack</code>)</li>
    </ul>
  </li>
  <li>The projects target both <code class="language-plaintext highlighter-rouge">nestandard2.0</code> and <code class="language-plaintext highlighter-rouge">net461</code> so they can also be used with the <code class="language-plaintext highlighter-rouge">.NET Framework</code> (<code class="language-plaintext highlighter-rouge">net461</code> and above)
    <ul>
      <li>The resulting <code class="language-plaintext highlighter-rouge">NuGet</code> packages should contain <code class="language-plaintext highlighter-rouge">DLL</code>s for both frameworks</li>
    </ul>
  </li>
  <li>The projects reference a third project that should be embedded as a <code class="language-plaintext highlighter-rouge">DLL</code> rather than being referenced as a <code class="language-plaintext highlighter-rouge">NuGet</code> package
    <ul>
      <li>This is not yet supported by the new tooling but can be <a href="#create-nuget-packages">achieved</a>.</li>
    </ul>
  </li>
</ul>

<h2 id="cake">Cake</h2>

<h3 id="mono">Mono</h3>

<p><code class="language-plaintext highlighter-rouge">Mono</code> is not required any more when building on <code class="language-plaintext highlighter-rouge">Linux</code> and <code class="language-plaintext highlighter-rouge">macOS</code>. This is a massive achievement from the <a href="https://github.com/cake-build/cake/graphs/contributors">Cake</a> and <a href="https://github.com/GitTools/GitVersion/graphs/contributors">GitVersion</a> contributors. The build step installing <code class="language-plaintext highlighter-rouge">Mono</code> on <code class="language-plaintext highlighter-rouge">CircleCI</code> and <code class="language-plaintext highlighter-rouge">Travis CI</code> never took less than <code class="language-plaintext highlighter-rouge">5</code> minutes and would sometimes take over <code class="language-plaintext highlighter-rouge">10</code> minutes on <code class="language-plaintext highlighter-rouge">Travis CI</code>! As a result the build script has been simplified and is doing less platform specific handling.</p>

<h3 id="pinning-cake-version">Pinning <code class="language-plaintext highlighter-rouge">Cake</code> version</h3>

<p>Pinning the version of <code class="language-plaintext highlighter-rouge">Cake</code> guarantees you’ll be using the same version of <code class="language-plaintext highlighter-rouge">Cake</code> on your machine and on the build servers. This is enforced via the bootstrap scripts for developers’ machines (<a href="https://github.com/gabrielweyer/cake-build/blob/master/bootstrap.ps1">bootstrap.ps1</a> on <code class="language-plaintext highlighter-rouge">Windows</code>, <a href="https://github.com/gabrielweyer/cake-build/blob/master/bootstrap.sh">bootstrap.sh</a> on <code class="language-plaintext highlighter-rouge">Unix</code>) and in the <code class="language-plaintext highlighter-rouge">YAML</code> files for the build servers.</p>

<h2 id="semantic-versioning">Semantic versioning</h2>

<p>As I’m releasing packages I decided to use <a href="https://semver.org/">semantic versioning</a>.</p>

<blockquote>
  <p>Consider a version format of <code class="language-plaintext highlighter-rouge">X.Y.Z</code> (<code class="language-plaintext highlighter-rouge">Major.Minor.Patch</code>). Bug fixes not affecting the API increment the <strong>patch</strong> version, backwards compatible API additions/changes increment the <strong>minor</strong> version, and backwards incompatible API changes increment the <strong>major</strong> version.</p>
</blockquote>

<p>Semantic versioning allows the consumers of your binaries to assess the effort to upgrade to a newer version. Semantic versioning should not be used blindly for all kinds of projects. It makes a lot of sense for a <code class="language-plaintext highlighter-rouge">NuGet</code> package but it doesn’t for a product or an <code class="language-plaintext highlighter-rouge">API</code> for example.</p>

<h3 id="versioning-in-net">Versioning in <code class="language-plaintext highlighter-rouge">.NET</code></h3>

<p>In <code class="language-plaintext highlighter-rouge">.NET</code> we use four properties to handle versioning:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">AssemblyVersion</code>, <code class="language-plaintext highlighter-rouge">AssemblyFileVersion</code> and <code class="language-plaintext highlighter-rouge">AssemblyInformationalVersion</code> to version assemblies</li>
  <li><code class="language-plaintext highlighter-rouge">PackageVersion</code> to version a <code class="language-plaintext highlighter-rouge">NuGet</code> package</li>
</ul>

<h4 id="versioning-an-assembly">Versioning an assembly</h4>

<p><a href="https://stackoverflow.com/a/65062">These</a> <a href="https://stackoverflow.com/a/802038">two</a> <code class="language-plaintext highlighter-rouge">StackOverflow</code> are great at explaining how to version an assembly.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">AssemblyVersion</code>: the only version the <code class="language-plaintext highlighter-rouge">CLR</code> cares about (if you use <a href="https://docs.microsoft.com/en-us/dotnet/framework/app-domains/strong-named-assemblies">strong named assemblies</a>)</li>
</ul>

<p>Curiously enough the <a href="https://docs.microsoft.com/en-us/dotnet/framework/app-domains/assembly-versioning#assembly-version-number">official documentation</a> is sparse on the <a href="https://blogs.msdn.microsoft.com/msbuild/2007/01/03/why-are-build-numbers-limited-to-65535/">topic</a> but this what I came up with after doing some reading:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">AssemblyVersion</code> can be defined as <code class="language-plaintext highlighter-rouge">&lt;major-version&gt;.&lt;minor-version&gt;.&lt;build-number&gt;.&lt;revision&gt;</code> where each of the four segment is a <code class="language-plaintext highlighter-rouge">16-bit</code> unsigned number.</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">AssemblyInformationalVersion</code>: <code class="language-plaintext highlighter-rouge">string</code> that attaches additional version information to an assembly for informational purposes only. Corresponds to the product’s marketing literature, packaging, or product name</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">AssemblyInformationalVersion</code> is well <a href="https://docs.microsoft.com/en-us/dotnet/framework/app-domains/assembly-versioning#assembly-informational-version">documented</a>.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">AssemblyFileVersion</code>: intended to uniquely identify a build of the individual assembly</li>
</ul>

<p>Developers tend to auto-increment this on each build. I prefer it linked to a <code class="language-plaintext highlighter-rouge">commit</code> / <code class="language-plaintext highlighter-rouge">tag</code> to be able to reproduce a build. I also use the same <code class="language-plaintext highlighter-rouge">string</code> for <code class="language-plaintext highlighter-rouge">AssemblyInformationalVersion</code> and <code class="language-plaintext highlighter-rouge">AssemblyFileVersion</code> (I’m a bad person I know).</p>

<h4 id="versioning-a-nuget-package">Versioning a <code class="language-plaintext highlighter-rouge">NuGet</code> package</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">PackageVersion</code>: A specific package is always referred to using its package identifier and an exact version number</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">NuGet</code> package versioning is described <a href="https://docs.microsoft.com/en-us/nuget/reference/package-versioning">here</a>.</p>

<h3 id="gitversion"><code class="language-plaintext highlighter-rouge">GitVersion</code></h3>

<p>I’ve implemented semantic versioning using <a href="https://github.com/GitTools/GitVersion">GitVersion</a>. I recommend using <a href="https://guides.github.com/introduction/flow/">GitHub Flow</a> when working on a simple package. In my experience <a href="https://trunkbaseddevelopment.com/">Trunk Based Development</a> tends to lead to lower code quality. Developers push early and often thinking they will fix it later but we all know than in software development later means never.</p>

<p><code class="language-plaintext highlighter-rouge">GitVersion</code> produces an output that will allow you to handle even the trickiest situations:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
  </span><span class="nl">"Major"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Minor"</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Patch"</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="w">
  </span><span class="nl">"PreReleaseTag"</span><span class="p">:</span><span class="s2">"region-endpoint.2"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"PreReleaseTagWithDash"</span><span class="p">:</span><span class="s2">"-region-endpoint.2"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"PreReleaseLabel"</span><span class="p">:</span><span class="s2">"region-endpoint"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"PreReleaseNumber"</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="w">
  </span><span class="nl">"BuildMetaData"</span><span class="p">:</span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"BuildMetaDataPadded"</span><span class="p">:</span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"FullBuildMetaData"</span><span class="p">:</span><span class="s2">"Branch.features/region-endpoint.Sha.1f05a4bb4ebda8b293fbd139063ce3af22b1935a"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"MajorMinorPatch"</span><span class="p">:</span><span class="s2">"0.2.3"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"SemVer"</span><span class="p">:</span><span class="s2">"0.2.3-region-endpoint.2"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"LegacySemVer"</span><span class="p">:</span><span class="s2">"0.2.3-region-endpoint2"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"LegacySemVerPadded"</span><span class="p">:</span><span class="s2">"0.2.3-region-endpoint0002"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"AssemblySemVer"</span><span class="p">:</span><span class="s2">"0.2.3.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"FullSemVer"</span><span class="p">:</span><span class="s2">"0.2.3-region-endpoint.2"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"InformationalVersion"</span><span class="p">:</span><span class="s2">"0.2.3-region-endpoint.2+Branch.features/region-endpoint.Sha.1f05a4bb4ebda8b293fbd139063ce3af22b1935a"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"BranchName"</span><span class="p">:</span><span class="s2">"features/region-endpoint"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Sha"</span><span class="p">:</span><span class="s2">"1f05a4bb4ebda8b293fbd139063ce3af22b1935a"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"NuGetVersionV2"</span><span class="p">:</span><span class="s2">"0.2.3-region-endpoint0002"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"NuGetVersion"</span><span class="p">:</span><span class="s2">"0.2.3-region-endpoint0002"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"CommitsSinceVersionSource"</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="w">
  </span><span class="nl">"CommitsSinceVersionSourcePadded"</span><span class="p">:</span><span class="s2">"0002"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"CommitDate"</span><span class="p">:</span><span class="s2">"2018-01-31"</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>In my case I’m using:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">AssemblySemVer</code> as the <code class="language-plaintext highlighter-rouge">AssemblyVersion</code></li>
  <li><code class="language-plaintext highlighter-rouge">NuGetVersion</code> as the <code class="language-plaintext highlighter-rouge">AssemblyInformationalVersion</code>, <code class="language-plaintext highlighter-rouge">AssemblyFileVersion</code> and <code class="language-plaintext highlighter-rouge">PackageVersion</code></li>
</ul>

<p>If you want to handle rebasing and <code class="language-plaintext highlighter-rouge">Pull Request</code>s you’ll have to use a more complex versioning strategy (keep in mind that <code class="language-plaintext highlighter-rouge">GitHub</code> <a href="https://help.github.com/articles/about-pull-requests/">does not support rebasing</a> in <code class="language-plaintext highlighter-rouge">Pull Request</code>s).</p>

<p>As an aside <code class="language-plaintext highlighter-rouge">Cake</code> allows you to <a href="https://cakebuild.net/api/Cake.AppVeyor/AppVeyorBuild/069D8D3F">set</a> the <code class="language-plaintext highlighter-rouge">AppVeyor</code> build number.</p>

<p><img src="/assets/cake-build/app-veyor-version.png" alt="AppVeyor version" /></p>

<h2 id="run-the-tests">Run the tests</h2>

<p>As <code class="language-plaintext highlighter-rouge">Travis CI</code> and <code class="language-plaintext highlighter-rouge">CircleCI</code> are running on <code class="language-plaintext highlighter-rouge">Linux</code> and <code class="language-plaintext highlighter-rouge">macOS</code> they don’t support testing against <code class="language-plaintext highlighter-rouge">net461</code>. Luckily the framework can be enforced using an argument: <code class="language-plaintext highlighter-rouge">-framework netcoreapp2.0</code>.</p>

<h2 id="publish-the-test-results">Publish the test results</h2>

<h3 id="circleci">CircleCI</h3>

<p><code class="language-plaintext highlighter-rouge">CircleCI</code> has a few quirks when it comes to testing.</p>

<p>First it only support the <a href="http://llg.cubic.org/docs/junit/">JUnit format</a> so I had to write a <a href="https://github.com/gabrielweyer/xunit-to-junit">transform</a> to be able to publish the test results. Then you must place your test results within a folder named after the test framework you are using if you want <code class="language-plaintext highlighter-rouge">CircleCI</code> to identify your test framework.</p>

<p>When the tests run successfully <code class="language-plaintext highlighter-rouge">CirceCI</code> will only display the slowest test:</p>

<p><img src="/assets/cake-build/circle-ci-slowest-test.png" alt="Circle CI slowest test" /></p>

<p>I don’t understand the use case, I would prefer the list of tests and timing and the ability to sort them client-side.</p>

<p>The output for failed tests is not ideal but it might be due to the way I transform the test results:</p>

<p><img src="/assets/cake-build/circle-ci-failed-test.png" alt="Circle CI failed test" /></p>

<p>I decided not to invest more time on this as <code class="language-plaintext highlighter-rouge">CircleCI</code> has zero documentation around publishing test results.</p>

<h3 id="appveyor">AppVeyor</h3>

<p>Again, the integration between <code class="language-plaintext highlighter-rouge">Cake</code> and <code class="language-plaintext highlighter-rouge">AppVeyor</code> shines in this area as <code class="language-plaintext highlighter-rouge">Cake</code> will automatically publish the test results for you (I wondered why I had duplicate test results until I <a href="https://en.wikipedia.org/wiki/RTFM">RTFM</a>).</p>

<p><code class="language-plaintext highlighter-rouge">AppVeyor</code> displays all the tests but you must hover to see the framework used:</p>

<p><img src="/assets/cake-build/app-veyor-test-success.png" alt="AppVeyor framework" /></p>

<p>Failed tests come with a nice formatting and a <code class="language-plaintext highlighter-rouge">StackTrace</code>:</p>

<p><img src="/assets/cake-build/app-veyor-failed-test.png" alt="AppVeyor failed test" /></p>

<h3 id="travis-ci">Travis CI</h3>

<p>What about <code class="language-plaintext highlighter-rouge">Travis CI</code> you may ask. It turns out <strong><code class="language-plaintext highlighter-rouge">Travis CI</code> doesn’t parse test results</strong>! All you can rely on is the build log, luckily for us <code class="language-plaintext highlighter-rouge">xUnit</code> is awesome:</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">Contoso.Hello.HelloTests.EvenMoreUselessTests.WhenDoWork_ThenSomeSweetJson [FAIL]
  Assert.Equal() Failure
                  ↓ (pos 6)
  Expected: Some JASON (maybe): "Hello"
  Actual:   Some JSON (maybe): "Hello"
                  ↑ (pos 6)</code></pre></figure>

<h2 id="create-nuget-packages">Create <code class="language-plaintext highlighter-rouge">NuGet</code> packages</h2>

<p><code class="language-plaintext highlighter-rouge">.NET Core</code> is leveraging the new <code class="language-plaintext highlighter-rouge">*.csproj</code> system and this means:</p>

<ul>
  <li>No more <code class="language-plaintext highlighter-rouge">packages.config</code></li>
  <li>No more <code class="language-plaintext highlighter-rouge">*.nuspec</code></li>
  <li>No more tears</li>
</ul>

<p>The references (projects and packages) and the package configuration are both contained in the <code class="language-plaintext highlighter-rouge">*.csproj</code> making it the single source of truth!</p>

<h3 id="referencing-a-project-without-turning-it-into-a-package-reference">Referencing a project without turning it into a package reference</h3>

<p>Sometimes you want to include a <code class="language-plaintext highlighter-rouge">DLL</code> in a <code class="language-plaintext highlighter-rouge">NuGet</code> package rather than add it as a package reference.</p>

<p>The <code class="language-plaintext highlighter-rouge">SuperLogic</code> project depends on the <code class="language-plaintext highlighter-rouge">ExtraLogic</code> project but we don’t want to ship <code class="language-plaintext highlighter-rouge">ExtraLogic</code> as a package. Instead we want to include <code class="language-plaintext highlighter-rouge">Contoso.Hello.ExtraLogic.dll</code> in the <code class="language-plaintext highlighter-rouge">SuperLogic</code> package directly. Currently this is not supported out of the box but the team is <a href="https://github.com/NuGet/Home/issues/6285">tracking it</a>.</p>

<p>Luckily <a href="https://github.com/NuGet/Home/issues/3891">this issue</a> provides a workaround. All the modifications will take place in <code class="language-plaintext highlighter-rouge">SuperLogic.csproj</code>.</p>

<ul>
  <li>In the <code class="language-plaintext highlighter-rouge">&lt;PropertyGroup&gt;</code> section add the following line:</li>
</ul>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;TargetsForTfmSpecificBuildOutput&gt;</span>$(TargetsForTfmSpecificBuildOutput);IncludeReferencedProjectInPackage<span class="nt">&lt;/TargetsForTfmSpecificBuildOutput&gt;</span></code></pre></figure>

<ul>
  <li>Prevent the project to be added as a package reference by making <a href="https://docs.microsoft.com/en-us/dotnet/core/tools/csproj#includeassets-excludeassets-and-privateassets">all assets private</a>.</li>
</ul>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;ProjectReference</span> <span class="na">Include=</span><span class="s">"..\ExtraLogic\ExtraLogic.csproj"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;PrivateAssets&gt;</span>all<span class="nt">&lt;/PrivateAssets&gt;</span>
<span class="nt">&lt;/ProjectReference&gt;</span></code></pre></figure>

<ul>
  <li>Finally add the target responsible of copying the <code class="language-plaintext highlighter-rouge">DLL</code>:</li>
</ul>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;Target</span> <span class="na">Name=</span><span class="s">"IncludeReferencedProjectInPackage"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ItemGroup&gt;</span>
    <span class="nt">&lt;BuildOutputInPackage</span> <span class="na">Include=</span><span class="s">"$(OutputPath)Contoso.Hello.ExtraLogic.dll"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/ItemGroup&gt;</span>
<span class="nt">&lt;/Target&gt;</span></code></pre></figure>

<p>The result is the following <code class="language-plaintext highlighter-rouge">NuGet</code> package:</p>

<p><img src="/assets/cake-build/package-version.png" alt="Package version" /></p>

<p>And the assemblies have been versioned as expected:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="p">[</span><span class="n">assembly</span><span class="p">:</span> <span class="nf">AssemblyFileVersion</span><span class="p">(</span><span class="s">"1.0.5-fix-typos0003"</span><span class="p">)]</span>
<span class="p">[</span><span class="n">assembly</span><span class="p">:</span> <span class="nf">AssemblyInformationalVersion</span><span class="p">(</span><span class="s">"1.0.5-fix-typos0003"</span><span class="p">)]</span>
<span class="p">[</span><span class="n">assembly</span><span class="p">:</span> <span class="nf">AssemblyVersion</span><span class="p">(</span><span class="s">"1.0.5.0"</span><span class="p">)]</span></code></pre></figure>

<p><strong>Note</strong>: you can also use the new <code class="language-plaintext highlighter-rouge">*.csproj</code> system for <code class="language-plaintext highlighter-rouge">.NET Framework</code> <code class="language-plaintext highlighter-rouge">NuGet</code> packages. You don’t need to target <code class="language-plaintext highlighter-rouge">.NET Core</code> to take advantage of it.</p>

<h2 id="publish-the-nuget-packages">Publish the <code class="language-plaintext highlighter-rouge">NuGet</code> packages</h2>

<p>On any branches starting with <code class="language-plaintext highlighter-rouge">features/</code>, the <code class="language-plaintext highlighter-rouge">NuGet</code> packages will be published to a pre-release feed. If the branch is <code class="language-plaintext highlighter-rouge">master</code> it’ll be published to the production feed. This is handled by <code class="language-plaintext highlighter-rouge">AppVeyor</code> in this <a href="https://github.com/gabrielweyer/cake-build/blob/18ffcf3dfb591519353680f81653c86b8f3966d9/appveyor.yml#L52-L73">section</a> of the configuration.</p>

<p>As this is a demo project both feeds are hosted by <code class="language-plaintext highlighter-rouge">MyGet</code>. For my other projects I use <code class="language-plaintext highlighter-rouge">MyGet</code> to host my <a href="https://www.myget.org/feed/Packages/gabrielweyer-pre-release">pre-release feed</a> and <code class="language-plaintext highlighter-rouge">NuGet</code> for my <a href="https://www.nuget.org/profiles/gabrielweyer">production feed</a>.</p>

<p>When publishing the packages, I’m also publishing the associated <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ee416588(v=vs.85).aspx">symbols</a> to allow consumers to debug through my packages.</p>

<p>Strangely enough <code class="language-plaintext highlighter-rouge">Travis CI</code> does not support artifacts out of the box. You must provide an <code class="language-plaintext highlighter-rouge">S3</code> account if you wish to save your build artifacts.</p>

<h2 id="create-a-github-release">Create a GitHub release</h2>

<p><code class="language-plaintext highlighter-rouge">AppVeyor</code> also creates <code class="language-plaintext highlighter-rouge">GitHub</code> <a href="https://github.com/gabrielweyer/cake-build/blob/b707a64cf8218092942accfa5b1f570487f34f4e/appveyor.yml#L24-L47">releases</a>.</p>

<h2 id="what-about-azure-devops">What about Azure DevOps</h2>

<p><code class="language-plaintext highlighter-rouge">Azure DevOps</code> is the only product that supports <code class="language-plaintext highlighter-rouge">Windows</code>, <code class="language-plaintext highlighter-rouge">Linux</code> and <code class="language-plaintext highlighter-rouge">macOS</code>. <code class="language-plaintext highlighter-rouge">Microsoft</code> has been iterating relentlessly and the <code class="language-plaintext highlighter-rouge">GitHub</code> acquisition will likely lead to a tighter integration between the two services.</p>

<p><code class="language-plaintext highlighter-rouge">Azure DevOps</code> has the most powerful tests results tab:</p>

<p><img src="/assets/cake-build/azure-devops-tests.png" alt="Azure DevOps Tests" /></p>

<p>One thing I’ve noticed is that builds seem to be slower on the <code class="language-plaintext highlighter-rouge">Hosted Ubuntu 1604</code> agents than on the <code class="language-plaintext highlighter-rouge">Hosted VS2017</code> agents.</p>

<h2 id="conclusion">Conclusion</h2>

<p>This is one possible workflow only. I’ve glossed over many details and taken some shortcuts (for example there is no support for <code class="language-plaintext highlighter-rouge">PR</code> builds).</p>

<p>Those are the key takeaways:</p>

<ul>
  <li>Do <strong>upfront planning on how you want to handle versioning</strong>. This is the hardest part and the one that will be the hardest to fix later on. Read the <a href="http://gitversion.readthedocs.io/en/latest/">GitVersion documentation</a> carefully before making any decision.</li>
  <li>Do what works for your team. If you didn’t have any issues with auto-incrementing your builds, keep doing so. There is no point bringing additional complexity to fix a problem you don’t have.</li>
  <li>Don’t assume you’ll be running on <code class="language-plaintext highlighter-rouge">Windows</code> with <code class="language-plaintext highlighter-rouge">Visual Studio Enterprise</code> installed. Adding cross-platform or other <code class="language-plaintext highlighter-rouge">IDE</code> (<code class="language-plaintext highlighter-rouge">Rider</code>, <code class="language-plaintext highlighter-rouge">Code</code>…) support from the start will make your life easier down the track.</li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/21/cake-build/</guid>
                <description>
                    
                    Demonstrates a basic build of a .NET Core NuGet package using https://cakebuild.net/.
                    
                </description>
                <pubDate>Sat, 21 Apr 2018 18:57:02 -0500</pubDate>
                <author>Gabriel Weyer</author>
            </item>
        
    
        
            <item>
                <title>Advanced .NET Debugging #1</title>
                <link>https://gabrielweyer.net/2018/04/06/advanced-dotnet-debugging-1/</link>
                <content:encoded>
                    <![CDATA[
                    <p>After eyeing it for a while I finally decided to buy <a href="https://www.goodreads.com/book/show/7306509-advanced-net-debugging">Advanced .NET Debugging</a> by Mario Hewardt. I’ve been studying <code class="language-plaintext highlighter-rouge">WinDbg</code> for some time and consider myself somewhere between beginner and intermediate level. To my dismay I got stuck on the first excercise! Luckily I didn’t give up and finally stumbled on a blog post that unblocked me. This series has for goal to make <a href="https://www.goodreads.com/book/show/7306509-advanced-net-debugging">Advanced .NET Debugging</a> more accessible to people - quite like me - that haven’t grasped all the concepts yet.</p>

<h2 id="prerequisites">Prerequisites</h2>

<ul>
  <li>A hex viewer
    <ul>
      <li>I used the <a href="https://marketplace.visualstudio.com/items?itemName=slevesque.vscode-hexdump">hexdump for VSCode</a> Visual Studio Code extension</li>
    </ul>
  </li>
  <li><a href="https://github.com/gabrielweyer/nuggets/blob/master/windbg/README.md#download-and-install-windbg">WinDbg</a></li>
  <li>Windows<!--more--></li>
</ul>

<h2 id="the-problem">The problem</h2>

<p>In the section <strong>Loading Native Images</strong>, Mario explains how Windows is loading a native image using <code class="language-plaintext highlighter-rouge">Notepad.exe</code> (<code class="language-plaintext highlighter-rouge">%SystemRoot%\notepad.exe</code>) as an example. As the first step, Mario instructs the reader to:</p>

<blockquote>
  <p>go to file offset <code class="language-plaintext highlighter-rouge">0x108</code> where you will find the <code class="language-plaintext highlighter-rouge">AddressOfEntryPoint</code> field</p>
</blockquote>

<p>The book was written a few years ago and back then Mario was running <code class="language-plaintext highlighter-rouge">Windows Vista</code> (most likely in <code class="language-plaintext highlighter-rouge">32-bit</code> too). If you look at the same file offset in <code class="language-plaintext highlighter-rouge">Windows 10 64-bit</code> you’ll be disapointed:</p>

<p><img src="/assets/advanced-dotnet-debugging-1/no-address-of-entry-point.png" alt="No AddressOfEntryPoint" /></p>

<p>OK, there are quite a few things to unpack in this screenshot.</p>

<h3 id="hexadecimal">Hexadecimal</h3>

<p>Each white cell represents a <code class="language-plaintext highlighter-rouge">byte</code>. A <code class="language-plaintext highlighter-rouge">byte</code> has 256 different values (from <code class="language-plaintext highlighter-rouge">0</code> to <code class="language-plaintext highlighter-rouge">255</code>). If we want to represent the value <code class="language-plaintext highlighter-rouge">255</code> in <code class="language-plaintext highlighter-rouge">base 2</code> (<code class="language-plaintext highlighter-rouge">binary</code>), we would need 8 characters: <code class="language-plaintext highlighter-rouge">11111111</code>. The same value in <code class="language-plaintext highlighter-rouge">base 10</code> (<code class="language-plaintext highlighter-rouge">decimal</code>) still requires 3 characters: <code class="language-plaintext highlighter-rouge">255</code>. In <code class="language-plaintext highlighter-rouge">base 16</code> (<code class="language-plaintext highlighter-rouge">hexadecimal</code>) we only need 2 characters: <code class="language-plaintext highlighter-rouge">FF</code>. Hence <code class="language-plaintext highlighter-rouge">hexadecimal</code> strikes a good balance between brevity and not being too remote from the decimal base we human-beings use. You can use the <code class="language-plaintext highlighter-rouge">Windows 10</code> calculator in <code class="language-plaintext highlighter-rouge">Programmer</code> mode to convert between <code class="language-plaintext highlighter-rouge">hexadecimal</code> and <code class="language-plaintext highlighter-rouge">decimal</code>:</p>

<p><img src="/assets/advanced-dotnet-debugging-1/win-10-calc.png" alt="Convert between hex and dec" /></p>

<h3 id="file-offset">File offset</h3>

<p>The <code class="language-plaintext highlighter-rouge">byte</code>s are displayed from left to right and top to bottom. They are accessed via a <strong>file offset</strong>, represented by the blue numbers. The left column represents the 7 most significant digits while the top row represents the least significant digit.</p>

<p><img src="/assets/advanced-dotnet-debugging-1/file-offset.png" alt="File offset" /></p>

<p>The cell on the third row (<code class="language-plaintext highlighter-rouge">00000020</code>) and last column (<code class="language-plaintext highlighter-rouge">0F</code>) has a <strong>file offset</strong> of <code class="language-plaintext highlighter-rouge">0000002F</code>. <strong>File offset</strong>s are 4 <code class="language-plaintext highlighter-rouge">byte</code>s long, so every time we’ll be looking for an offset or an address we know it’ll be encoded over 4 <code class="language-plaintext highlighter-rouge">byte</code>s.</p>

<h3 id="endianness">Endianness</h3>

<p>Windows is a <a href="https://en.wikipedia.org/wiki/Endianness">little-endian</a> system. This means than the least significant <code class="language-plaintext highlighter-rouge">byte</code>s will appear <strong>before</strong> the most significant ones. So if you were to find the following value: <code class="language-plaintext highlighter-rouge">E0 93 01 00</code>, the address would be <code class="language-plaintext highlighter-rouge">00 01 93 E0</code> - only the <code class="language-plaintext highlighter-rouge">byte</code> order is inverted, not the order within a <code class="language-plaintext highlighter-rouge">byte</code> - which would commonly be written as <code class="language-plaintext highlighter-rouge">0x193E0</code> (<code class="language-plaintext highlighter-rouge">0x</code> denotes a hex notation and the leading <code class="language-plaintext highlighter-rouge">0</code>s are dropped as they are not significant).</p>

<h2 id="figuring-out-the-file-offset-of-addressofentrypoint">Figuring out the file offset of <code class="language-plaintext highlighter-rouge">AddressOfEntryPoint</code></h2>

<p>Now that we know how to read the <code class="language-plaintext highlighter-rouge">hex</code> dump, we’re still left with the same problem: there is no address where it’s supposed to be. This is when I started to browse the Internet trying to understand where <code class="language-plaintext highlighter-rouge">AddressOfEntryPoint</code> was supposed to be located. My quest initially took me to the <a href="https://msdn.microsoft.com/library/windows/desktop/ms680547(v=vs.85).aspx">PE Format specification</a>, after reading it for a while I ended up being more confused than I initially was. The situation was dire and I needed some hope, and hope did appear in the person of Simon Cooper and his brilliant post <a href="https://www.red-gate.com/simple-talk/blogs/anatomy-of-a-net-assembly-pe-headers/">Anatomy of a .NET Assembly – PE Headers</a>. This illustration details the required steps to find the value of the <code class="language-plaintext highlighter-rouge">AddressOfEntryPoint</code>:</p>

<p><img src="/assets/advanced-dotnet-debugging-1/address-of-entry-point.png" alt="AddressOfEntryPoint" /></p>

<p>Thanks to Simon’s detailed write-up I was able to figure out the file offset of the <code class="language-plaintext highlighter-rouge">AddressOfEntryPoint</code> (<code class="language-plaintext highlighter-rouge">0x120</code>), I also found its value: <code class="language-plaintext highlighter-rouge">0x193E0</code>. You can use the below formula to compute the <code class="language-plaintext highlighter-rouge">AddressOfEntryPoint</code> file offset based of the signature file offset:</p>

<blockquote>
  <p>Signature file offset + <code class="language-plaintext highlighter-rouge">0x28</code> = <code class="language-plaintext highlighter-rouge">AddressOfEntryPoint</code> file offset</p>
</blockquote>

<p>If we look back at the screenshot above we can see than the signature file offset was <code class="language-plaintext highlighter-rouge">0xF8</code>. Hence <code class="language-plaintext highlighter-rouge">0xF8</code> + <code class="language-plaintext highlighter-rouge">0x28</code> = <code class="language-plaintext highlighter-rouge">0x120</code>, which is exactly what we found without using the formula.</p>

<h2 id="relative-virtual-address">Relative virtual address</h2>

<p>But we’re now faced with another issue, the address entry point (<code class="language-plaintext highlighter-rouge">0x193E0</code>) resolves to some kind of wasteland:</p>

<p><img src="/assets/advanced-dotnet-debugging-1/wasteland.png" alt="That can't be the entry point!" /></p>

<p>The Portable Executable format has the concept of <strong>Relative Virtual Address</strong> (<code class="language-plaintext highlighter-rouge">RVA</code>) which it defines like this:</p>

<blockquote>
  <p>In an image file, the address of an item after it is loaded into memory, with the base address of the image file subtracted from it.</p>
</blockquote>

<p>As it turns out the <code class="language-plaintext highlighter-rouge">AddressOfEntryPoint</code> is <strong>not</strong> a file offset, it is actually a <code class="language-plaintext highlighter-rouge">RVA</code>.</p>

<p>So we need to <em>load Notepad in memory</em> which equates to running it. But we also need to be able to see the <code class="language-plaintext highlighter-rouge">base address</code> of the image which is not something than the <code class="language-plaintext highlighter-rouge">Task Manager</code> or any other basic tool will be able to provide us. To see this value we need a debugger. Open <code class="language-plaintext highlighter-rouge">Notepad.exe</code> (<code class="language-plaintext highlighter-rouge">%SystemRoot%\notepad.exe</code>) using <a href="https://github.com/gabrielweyer/nuggets/blob/master/windbg/README.md#store">WinDbg Preview</a>:</p>

<p><img src="/assets/advanced-dotnet-debugging-1/open-notepad-windbg-preview.gif" alt="Opening Notepad with WinDbg Preview" /></p>

<p>Type the command <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/lm--list-loaded-modules-">List Loaded Modules</a>:</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; lm
start             end                 module name
00007ff6`f92f0000 00007ff6`f9331000   notepad    (deferred)
00007ffd`09ce0000 00007ffd`09f49000   COMCTL32   (deferred)
00007ffd`0abb0000 00007ffd`0ad7c000   urlmon     (deferred)
// Abbreviated</code></pre></figure>

<p>The value we’re interested in is <code class="language-plaintext highlighter-rouge">00007ff6`f92f0000</code>, this is the <code class="language-plaintext highlighter-rouge">start</code> (i.e. the <code class="language-plaintext highlighter-rouge">base address</code>) of the <code class="language-plaintext highlighter-rouge">notepad</code> module.</p>

<p>Armed with this information we’ll be able to look at the instructions located at the <code class="language-plaintext highlighter-rouge">RVA</code> <code class="language-plaintext highlighter-rouge">0x193E0</code> by using the <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/u--unassemble-">Unassemble</a> command:</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; u 00007ff6`f92f0000+0x193E0
notepad!WinMainCRTStartup:
00007ff6`f93093e0 4883ec28        sub     rsp,28h
00007ff6`f93093e4 e8c7070000      call    notepad!_security_init_cookie (00007ff6`f9309bb0)
00007ff6`f93093e9 4883c428        add     rsp,28h
00007ff6`f93093ed e902000000      jmp     notepad!__mainCRTStartup (00007ff6`f93093f4)
00007ff6`f93093f2 cc              int     3
00007ff6`f93093f3 cc              int     3
notepad!__mainCRTStartup:
00007ff6`f93093f4 48895c2408      mov     qword ptr [rsp+8],rbx
00007ff6`f93093f9 48897c2410      mov     qword ptr [rsp+10h],rdi</code></pre></figure>

<p>Bingo!</p>

<h2 id="conclusion">Conclusion</h2>

<p>I hope this post clarified how to find the entry point of a native Windows executable.</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/06/advanced-dotnet-debugging-1/</guid>
                <description>
                    
                    Finding the entry point of a native image.
                    
                </description>
                <pubDate>Fri, 06 Apr 2018 22:17:02 -0500</pubDate>
                <author>Gabriel Weyer</author>
            </item>
        
    
        
            <item>
                <title>Testing anti-patterns #1</title>
                <link>https://gabrielweyer.net/2018/03/24/testing-anti-patterns-1/</link>
                <content:encoded>
                    <![CDATA[
                    <p>I often ask candidates to define a good unit test. This is the starting point of a conversation around testing strategies and delivering value. Over the years I’ve heard opinions ranging from <code class="language-plaintext highlighter-rouge">the 100% coverage</code>, passing by <code class="language-plaintext highlighter-rouge">testing is for testers</code>, all the way to <code class="language-plaintext highlighter-rouge">we don't do automated testing</code>. If the notion of a <em>good test</em> can be subjective, it is easier to identify a <strong>bad</strong> test. Bloggers have written about this topic at length but I thought I would try paraphrasing the same content hoping nobody would notice.</p>

<p>I must admit I have written - quite - a few bad tests myself and that’s fine. We all make mistakes, how we handle those mistakes is what help us grow:</p>

<ul>
  <li>It’s important to understand why the mistake happened and put in place measures to prevent the same mistake from happening again</li>
  <li>Equally we should challenge existing practices, they might be there for a good reason but they might instead be there for a <strong>bad</strong> reason</li>
</ul>

<!--more-->

<p>Here are a few anti-patterns I’ve noticed over the years:</p>

<h2 id="ignored-or-commented-test">Ignored or commented test</h2>

<p>Have you ever seen this?</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="p">[</span><span class="n">Ignore</span><span class="p">]</span>
<span class="p">[</span><span class="n">TestMethod</span><span class="p">]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">Test</span><span class="p">()</span></code></pre></figure>

<p>Luckily only <code class="language-plaintext highlighter-rouge">MSTest</code> allows to ignore a test without providing a message, both <code class="language-plaintext highlighter-rouge">xUnit</code> and <code class="language-plaintext highlighter-rouge">NUnit</code> require the developer to provide a message. What’s worse is that the message of the commit ignoring the test often reads <code class="language-plaintext highlighter-rouge">"fixed" test YOLO LMAO</code> and you’re left wondering what deep philosophical message lies hidden behind those mundane words.</p>

<p>In the case of a <em>commented test</em> the solution is simple: <strong>delete</strong> it. Regarding <em>ignored tests</em>, have a quick read through and run them. If you can’t get them to pass, <strong>delete</strong> them too. Ignored / commented tests will only confuse future developers. You should treat your test code the same way you treat your production code: if a piece of code has no use anymore it should go.</p>

<p><strong>Ask yourself</strong>: why am I ignoring this test, what conditions should be met to enable it again? Then write a <strong>descriptive</strong> ignore message.</p>

<h2 id="non-thread-safe">Non-thread-safe</h2>

<p>The first thing that is wrong with this test is that it’s recording log messages so that they can be asserted at a later stage (see <a href="#asserting-log-messages">below</a> for the log anti-pattern):</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">logger</span>
    <span class="p">.</span><span class="nf">When</span><span class="p">(</span><span class="n">l</span> <span class="p">=&gt;</span> <span class="n">l</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Any</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;()))</span>
    <span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="n">ci</span> <span class="p">=&gt;</span> <span class="n">_logs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">ci</span><span class="p">.</span><span class="n">Arg</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;()));</span></code></pre></figure>

<p>But this was not the only issue with this statement. After making an unrelated change this test failed. I ran it again on its own and it passed, so this test was failing intermittently and I was also getting different <code class="language-plaintext highlighter-rouge">Exception</code> <code class="language-plaintext highlighter-rouge">Type</code>s! The <code class="language-plaintext highlighter-rouge">NullReferenceException</code> wasn’t meaningful but I also got an <code class="language-plaintext highlighter-rouge">IndexOutOfRangeException</code> when adding an element to the <code class="language-plaintext highlighter-rouge">List</code>.</p>

<p>It turned out the code under test was multi-threaded and multiple threads were trying to add to the <code class="language-plaintext highlighter-rouge">List</code> at the same time. The <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=netframework-4.7.1#Thread_Safety">.NET API browser</a> makes it clear than <code class="language-plaintext highlighter-rouge">List</code> is not thread-safe:</p>

<blockquote>
  <p>Any instance members are not guaranteed to be thread safe. […] <strong>To ensure thread safety, lock the collection during a read or write operation</strong>.</p>
</blockquote>

<p>In this instance the solution was to lock the <code class="language-plaintext highlighter-rouge">List</code> when adding to it:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">logger</span>
    <span class="p">.</span><span class="nf">When</span><span class="p">(</span><span class="n">l</span> <span class="p">=&gt;</span> <span class="n">l</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Any</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;()))</span>
    <span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="n">ci</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="k">lock</span> <span class="p">(</span><span class="n">_logs</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_logs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">ci</span><span class="p">.</span><span class="n">Arg</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;());</span>
        <span class="p">}</span>
    <span class="p">});</span></code></pre></figure>

<p><strong>Ask yourself</strong>: most of the code we write is not performance critical, do you need to create multiple threads?</p>

<h2 id="failure-without-enough-context">Failure without enough context</h2>

<p>There is nothing more frustrating than having a build failing on the build server and be faced by this kind of log:</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">Assert.True() Failure
Expected: True
Actual:   False</code></pre></figure>

<p>From there things only get worse, when you look at the actual assert you discover it’s asserting multiple things at the same time and you’ve no idea which one went wrong:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Assert</span><span class="p">.</span><span class="nf">True</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">A</span> <span class="p">==</span> <span class="n">b</span><span class="p">.</span><span class="n">A</span> <span class="p">&amp;&amp;</span> <span class="n">a</span><span class="p">.</span><span class="n">B</span> <span class="p">==</span> <span class="n">b</span><span class="p">.</span><span class="n">B</span> <span class="p">&amp;&amp;</span> <span class="n">a</span><span class="p">.</span><span class="n">C</span> <span class="p">==</span> <span class="n">b</span><span class="p">.</span><span class="n">C</span><span class="p">);</span></code></pre></figure>

<p>If you need to compare objects you can use an assertion library such as <a href="http://fluentassertions.com/">Fluent Assertions</a> or <a href="https://github.com/shouldly/shouldly">Shouldly</a>.</p>

<p><strong>Ask yourself</strong>: if I make this test break, would I have enough context based on <strong>only</strong> the logs to understand what went wrong?</p>

<h2 id="asserting-log-messages">Asserting log messages</h2>

<p>Please don’t do this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">logger</span><span class="p">.</span><span class="nf">Received</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">"Super important log"</span><span class="p">);</span></code></pre></figure>

<p>Logging is an implementation detail, asserting log messages is over-specifying.</p>

<p>On the other hand, if recording that something happened is critical from a business point of view you don’t want to use logging for this purpose as developers should be able to modify logging as they see fit.</p>

<p>Tracking business events can be achieved in different ways:</p>

<ul>
  <li>Via your <code class="language-plaintext highlighter-rouge">APM</code> service, both <a href="https://docs.microsoft.com/en-us/azure/application-insights/app-insights-api-custom-events-metrics#trackevent">Application Insights</a> and <a href="https://docs.newrelic.com/docs/insights/insights-data-sources/custom-data/insert-custom-events-new-relic-apm-agents">New Relic</a> can track custom events</li>
  <li>Via a service bus. Your code could be instrumented to emit messages and any interested service can subscribe to them</li>
</ul>

<p><strong>Ask yourself</strong>: is this the best way of doing this? Read the documentation of the systems you’re currently using, you’ll quite often discover features you had no idea existed.</p>

<h2 id="nullreferenceexception-in-constructor">NullReferenceException in constructor</h2>

<p>Don’t assert than your constructors are throwing a <code class="language-plaintext highlighter-rouge">NullReferenceException</code> when being passed a <code class="language-plaintext highlighter-rouge">null</code>. Your <code class="language-plaintext highlighter-rouge">IoC</code> <code class="language-plaintext highlighter-rouge">container</code> will throw an <code class="language-plaintext highlighter-rouge">Exception</code> anyway when trying to resolve the dependencies.</p>

<p><strong>Ask yourself</strong>: do I need to test third-party libraries?</p>

<h2 id="sanity-check">Sanity check</h2>

<p>Quite often when starting a new project, developers will create a <em>sanity check</em> test. This is a test that <strong>should</strong> pass and if it were to fail it would mean that things are terribly wrong. An example of such a test is this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Assert</span><span class="p">.</span><span class="nf">True</span><span class="p">(</span><span class="k">true</span><span class="p">);</span></code></pre></figure>

<p>I’ve never seen this kind of test fail. Moreover, this test does not have any value as it doesn’t give me any confidence that the code is behaving the way it is supposed to.</p>

<p><strong>Ask yourself</strong>: Can I break this test by altering the correctness of the production code?</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/03/24/testing-anti-patterns-1/</guid>
                <description>
                    
                    List 6 testing anti-patterns.
                    
                </description>
                <pubDate>Sat, 24 Mar 2018 01:36:53 -0500</pubDate>
                <author>Gabriel Weyer</author>
            </item>
        
    
        
            <item>
                <title>WinDbg #1 - The static root</title>
                <link>https://gabrielweyer.net/2018/03/09/windbg-1-static-root/</link>
                <content:encoded>
                    <![CDATA[
                    <p>This new series is an attempt to improve my <code class="language-plaintext highlighter-rouge">WinDbg</code> skills. The concept is to create faulty applications and troubleshoot the issue using <code class="language-plaintext highlighter-rouge">WinDbg</code> pretending that I have no prior knowledge of the code.</p>

<p>I’ll be using my <a href="https://github.com/gabrielweyer/nuggets/blob/master/windbg/README.md">WinDbg guide</a> as I can never remember the commands! I’m hoping than through those challenges I’ll get to improve the guide. Today’s exercise is inspired by the excellent blog post <a href="https://blogs.microsoft.co.il/sasha/2012/02/07/pinpointing-a-static-gc-root-with-sos/">Pinpointing a Static GC Root with SOS</a>. The post only contains a few commands but I must admit that it took me hours to achieve the same result.<!--more--></p>

<h2 id="the-code">The code</h2>

<p>The application is available on <a href="https://github.com/gabrielweyer/blog-samples/tree/master/windbg-static">GitHub</a>. Clone it, I’ll wait.</p>

<p>It is an <code class="language-plaintext highlighter-rouge">ASP.NET Core 2.0</code> project:</p>

<ul>
  <li>Compile the solution with the <code class="language-plaintext highlighter-rouge">Release</code> <code class="language-plaintext highlighter-rouge">Configuration</code></li>
  <li>Launch the <code class="language-plaintext highlighter-rouge">SampleApi</code> project, it should start on port <code class="language-plaintext highlighter-rouge">5000</code>
    <ul>
      <li>Using <code class="language-plaintext highlighter-rouge">Kestrel</code> will make the next part easier</li>
    </ul>
  </li>
</ul>

<p>Launch <code class="language-plaintext highlighter-rouge">Process Explorer</code>. If you don’t have this gem drop everything you’re doing and <a href="https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer">download</a> it now! Click on the <strong>crosshair</strong>, mouse hover the process you want to target and release the button:</p>

<p><img src="/assets/windbg-1/find-process.gif" alt="Find process" /></p>

<p>The <code class="language-plaintext highlighter-rouge">Working Set</code> is sitting just under <code class="language-plaintext highlighter-rouge">44 MB</code>.</p>

<ul>
  <li>Issue <code class="language-plaintext highlighter-rouge">20</code> <code class="language-plaintext highlighter-rouge">GET</code> requests to <code class="language-plaintext highlighter-rouge">http://localhost:5000/feed/me</code></li>
</ul>

<p>If you’re as lazy as me you can leverage <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">Windows Subsystem for Linux</a>:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">for </span>i <span class="k">in</span> <span class="sb">`</span><span class="nb">seq </span>1 20<span class="sb">`</span><span class="p">;</span> <span class="k">do </span>curl <span class="s2">"http://localhost:5000/feed/me"</span><span class="p">;</span> <span class="k">done</span></code></pre></figure>

<p><img src="/assets/windbg-1/hungry-process.png" alt="Hungry process" /></p>

<p>The <code class="language-plaintext highlighter-rouge">Working Set</code> is now sitting just under <code class="language-plaintext highlighter-rouge">262 MB</code>. That’s an increase of roughly <code class="language-plaintext highlighter-rouge">10 MB</code> per request.</p>

<h2 id="capture-a-full-memory-dump">Capture a full memory dump</h2>

<p>The easiest option in this case is to leverage <code class="language-plaintext highlighter-rouge">Process Explorer</code> as we already have it opened. Right-click on <code class="language-plaintext highlighter-rouge">dotnet.exe</code> and select <code class="language-plaintext highlighter-rouge">Create Full Dump...</code>:</p>

<p><img src="/assets/windbg-1/create-full-dump.png" alt="Create Full Dump" /></p>

<h2 id="install-and-configure-windbg">Install and configure <code class="language-plaintext highlighter-rouge">WinDbg</code></h2>

<p>Follow these instructions:</p>

<ul>
  <li><a href="https://github.com/gabrielweyer/nuggets/blob/master/windbg/README.md#download-and-install-windbg">Download and install WinDbg</a></li>
  <li><a href="https://github.com/gabrielweyer/nuggets/blob/master/windbg/README.md#configure-the-symbols">Configure the symbols</a>:</li>
  <li>Right-click on <code class="language-plaintext highlighter-rouge">dotnet.exe</code> and select <code class="language-plaintext highlighter-rouge">Properties</code></li>
</ul>

<p><img src="/assets/windbg-1/properties.png" alt="Properties" /></p>

<ul>
  <li>Copy the path of the directory where <code class="language-plaintext highlighter-rouge">SampleApi.dll</code> is located (in my case it is <code class="language-plaintext highlighter-rouge">E:/code/me/blog-samples/windbg-static/src/SampleApi/bin/Release/netcoreapp2.0/</code>)</li>
</ul>

<p><img src="/assets/windbg-1/command-line.png" alt="Binaries path" /></p>

<ul>
  <li>Copy the content of this directory into your symbols directory (in my case I configured <code class="language-plaintext highlighter-rouge">sympath</code> to include <code class="language-plaintext highlighter-rouge">C:\symbols\local\</code>):</li>
</ul>

<p><img src="/assets/windbg-1/symbols-directory.png" alt="Symbols directory" /></p>

<ul>
  <li><a href="https://github.com/gabrielweyer/nuggets/blob/master/windbg/README.md#open-a-memory-dump">Open the memory dump</a></li>
  <li><a href="https://github.com/gabrielweyer/nuggets/blob/master/windbg/README.md#net-core">Load the SOS extension</a></li>
</ul>

<p>Now we’re in business!</p>

<h2 id="identifying-the-most-problematic-type--instance">Identifying the most problematic <code class="language-plaintext highlighter-rouge">Type</code> / instance</h2>

<p>We’ll start with the <code class="language-plaintext highlighter-rouge">DumpHeap</code> <a href="https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands">command</a> from the <code class="language-plaintext highlighter-rouge">SOS</code> extension.</p>

<blockquote>
  <p>Displays information about the garbage-collected heap […]. The <code class="language-plaintext highlighter-rouge">-stat</code> option restricts the output to the statistical type summary.</p>
</blockquote>

<p>Instead of listing every single object present in the heap(s), this will group them by <code class="language-plaintext highlighter-rouge">Class Name</code> and provide us with an instance <code class="language-plaintext highlighter-rouge">Count</code> and <code class="language-plaintext highlighter-rouge">TotalSize</code> taken (in <code class="language-plaintext highlighter-rouge">bytes</code>). Let’s run it:</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; !dumpheap -stat
Statistics:
              MT    Count    TotalSize Class Name
00007ffb0f6cec68        1           24 System.Collections.Generic.GenericEqualityComparer`1[[System.Int32, System.Private.CoreLib]]
00007ffb0f6cb200        1           24 System.Collections.Generic.GenericEqualityComparer`1[[System.Int64, System.Private.CoreLib]]
00007ffb0f6be130        1           24 System.Collections.Generic.GenericComparer`1[[System.Int32, System.Private.CoreLib]]
// Abbreviated
00007ffb0f632ca8       97       151456 System.Object[]
00007ffac6364330        8       262336 Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.LibuvThread+Work[]
00007ffac6158558    30346       971072 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.DateHeaderValueManager+DateHeaderValues
00007ffac638df58    30345      1942080 System.Collections.Concurrent.ConcurrentDictionary`2+&lt;GetEnumerator&gt;d__38[[System.Int64, System.Private.CoreLib],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.FrameConnectionReference, Microsoft.AspNetCore.Server.Kestrel.Core]]
00007ffb0f633050    30475      2148742 System.Byte[]
00007ffb0f667be8    32554      2795084 System.String
00000190177eb6e0     2837     16874148      Free
00007ffb0f634158      158    251802384 System.Int32[]
Total 137415 objects</code></pre></figure>

<p>It looks like we have a winner! There are <code class="language-plaintext highlighter-rouge">158</code> instances of <code class="language-plaintext highlighter-rouge">System.Int32[]</code> for a <code class="language-plaintext highlighter-rouge">TotalSize</code> of <code class="language-plaintext highlighter-rouge">251802384 bytes</code>. As we have only <code class="language-plaintext highlighter-rouge">158</code> instances it’s likely we have a few big instances, let’s list the ones that are bigger than <code class="language-plaintext highlighter-rouge">1000 bytes</code>:</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; !dumpheap -type System.Int32[] -min 1000
         Address               MT     Size
0000019019413cf0 00007ffb0f634158     4120
0000019019414d08 00007ffb0f634158     8216
0000019019416d20 00007ffb0f634158    16408
000001901941ad38 00007ffb0f634158    32792
0000019019422d50 00007ffb0f634158    65560
000001941a364df0 00007ffb0f634158 33554456
000001941c364e28 00007ffb0f634158 134217752
0000019439341038 00007ffb0f634158 16777240
0000019449341038 00007ffb0f634158 67108888

Statistics:
              MT    Count    TotalSize Class Name
00007ffb0f634158        9    251785432 System.Int32[]
Total 9 objects</code></pre></figure>

<p>As it turns out one instance is <code class="language-plaintext highlighter-rouge">134217752 bytes</code> which is roughly <code class="language-plaintext highlighter-rouge">134 MB</code>. I suggest we start investigating this one.</p>

<h2 id="determine-what-is-keeping-our-instance-alive">Determine what is keeping our instance alive</h2>

<p>We’ll use another <code class="language-plaintext highlighter-rouge">SOS</code> <a href="https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands">command</a>: <code class="language-plaintext highlighter-rouge">GCRoot</code>.</p>

<blockquote>
  <p>Displays information about references (or roots) to an object at the specified address.</p>
</blockquote>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; !gcroot 000001941c364e28
HandleTable:
    00000190176115f8 (pinned handle)
    -&gt; 0000019419341038 System.Object[]
    -&gt; 0000019019412bf0 System.Collections.Generic.List`1[[System.Int32, System.Private.CoreLib]]
    -&gt; 000001941c364e28 System.Int32[]

Found 1 unique roots (run '!GCRoot -all' to see all roots).</code></pre></figure>

<p>This reads bottom to top, our <code class="language-plaintext highlighter-rouge">Int32[]</code> is referenced by a <code class="language-plaintext highlighter-rouge">List&lt;Int32&gt;</code>. This makes sense as <code class="language-plaintext highlighter-rouge">List&lt;T&gt;</code> is <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=netframework-4.7.1#Remarks">using an array</a> internally:</p>

<blockquote>
  <p>The <code class="language-plaintext highlighter-rouge">List&lt;T&gt;</code> <code class="language-plaintext highlighter-rouge">class</code> is the generic equivalent of the <code class="language-plaintext highlighter-rouge">ArrayList</code> <code class="language-plaintext highlighter-rouge">class</code>. It implements the <code class="language-plaintext highlighter-rouge">IList&lt;T&gt;</code> generic <code class="language-plaintext highlighter-rouge">interface</code> by <strong>using an array</strong> whose size is dynamically increased as required.</p>
</blockquote>

<p>In turn this <code class="language-plaintext highlighter-rouge">List&lt;Int32&gt;</code> is referenced by a <code class="language-plaintext highlighter-rouge">System.Object[]</code>. I was hoping to get the name of one of my <code class="language-plaintext highlighter-rouge">class</code> but I’ll have to dig deeper, let’s take a closer look at this array of object.</p>

<p>For this we’ll rely on the <code class="language-plaintext highlighter-rouge">DumpObj</code> <a href="https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands">command</a> from the <code class="language-plaintext highlighter-rouge">SOS</code> extension.</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; !do 0000019419341038
Name:        System.Object[]
MethodTable: 00007ffb0f632ca8
EEClass:     00007ffb0edf2a00
Size:        8184(0x1ff8) bytes
Array:       Rank 1, Number of elements 1020, Type CLASS (Print Array)
Fields:
None</code></pre></figure>

<p>According to Sasha Goldshtein <a href="https://blogs.microsoft.co.il/sasha/2012/02/07/pinpointing-a-static-gc-root-with-sos/">post</a> this is how the <code class="language-plaintext highlighter-rouge">CLR</code> stores <code class="language-plaintext highlighter-rouge">static</code> fields:</p>

<blockquote>
  <p>This <code class="language-plaintext highlighter-rouge">object</code> <code class="language-plaintext highlighter-rouge">array</code> is ubiquitous, it would seem that all <code class="language-plaintext highlighter-rouge">static</code> root references stem from it. Indeed (and this is a <code class="language-plaintext highlighter-rouge">CLR</code> implementation detail), <code class="language-plaintext highlighter-rouge">static</code> fields are stored in this array and their retention as far as the <code class="language-plaintext highlighter-rouge">GC</code> is concerned is through it.</p>
</blockquote>

<p>Let’s now determine where in the array is our <code class="language-plaintext highlighter-rouge">List</code> referenced. We’ll use the <code class="language-plaintext highlighter-rouge">Search Memory</code> <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/s--search-memory-">command</a> which is the first <code class="language-plaintext highlighter-rouge">WinDbg</code> command we used today!</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">-q</code>: we’re looking for a <code class="language-plaintext highlighter-rouge">QWORD</code> (the address is <code class="language-plaintext highlighter-rouge">64 bit</code>)</li>
  <li><code class="language-plaintext highlighter-rouge">L</code>: this is a <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/address-and-address-range-syntax#span-idaddressrangesspanspan-idaddressrangesspanaddress-ranges">Range</a>, we’re starting to search at the address <code class="language-plaintext highlighter-rouge">0000019419341038</code> (the beginning of the array) and we search the whole array (<code class="language-plaintext highlighter-rouge">1ff8</code> is the size of the array as indicated in the previous command output)</li>
  <li><code class="language-plaintext highlighter-rouge">0000019019412bf0</code> is the address of the <code class="language-plaintext highlighter-rouge">List</code></li>
</ul>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; s -q 0000019419341038 L1ff8 0000019019412bf0
00000194`19342830  00000190`19412bf0 00000191`19397798</code></pre></figure>

<p>Sadly the lead stops there. We know this is a <code class="language-plaintext highlighter-rouge">static</code> field but we don’t know which <code class="language-plaintext highlighter-rouge">class</code> it belongs to.</p>

<h2 id="fishing-with-dynamite">Fishing with dynamite</h2>

<p>There is one last thing we can try, we could look for references to <code class="language-plaintext highlighter-rouge">0000019419342830</code> in memory. This section is completely stolen from Sasha’s excellent <a href="https://blogs.microsoft.co.il/sasha/2012/02/07/pinpointing-a-static-gc-root-with-sos/">post</a> as I never did something like this before.</p>

<p>The <code class="language-plaintext highlighter-rouge">SOS</code> <a href="https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands">command</a> <code class="language-plaintext highlighter-rouge">DumpDomain</code> comes in handy:</p>

<blockquote>
  <p>Enumerates each <code class="language-plaintext highlighter-rouge">Assembly</code> object that is loaded within the specified <code class="language-plaintext highlighter-rouge">AppDomain</code> object address.</p>
</blockquote>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; !dumpdomain
--------------------------------------
System Domain:      00007ffb25d15800
LowFrequencyHeap:   00007ffb25d15d80
HighFrequencyHeap:  00007ffb25d15e10
StubHeap:           00007ffb25d15ea0
Stage:              OPEN
Name:               None
--------------------------------------
Shared Domain:      00007ffb25d15220
LowFrequencyHeap:   00007ffb25d15d80
HighFrequencyHeap:  00007ffb25d15e10
StubHeap:           00007ffb25d15ea0
Stage:              OPEN
Name:               None
Assembly:           0000019017796330 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.5\System.Private.CoreLib.dll]
ClassLoader:        00000190176b33f0
  Module Name
00007ffb0ed11000            C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.5\System.Private.CoreLib.dll

--------------------------------------
Domain 1:           00000190178511a0
LowFrequencyHeap:   00000190178519a0
HighFrequencyHeap:  0000019017851a30
StubHeap:           0000019017851ac0
Stage:              OPEN
SecurityDescriptor: 0000019017859320
Name:               clrhost
Assembly:           0000019017796330 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.5\System.Private.CoreLib.dll]
ClassLoader:        00000190176b33f0
SecurityDescriptor: 000001901774c9a0
  Module Name
00007ffb0ed11000            C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.5\System.Private.CoreLib.dll

Assembly:           0000019017796410 [E:\code\me\blog-samples\windbg-static\src\SampleApi\bin\Release\netcoreapp2.0\SampleApi.dll]
ClassLoader:        0000019017834490
SecurityDescriptor: 00000190177851c0
  Module Name
00007ffac5d04d38            E:\code\me\blog-samples\windbg-static\src\SampleApi\bin\Release\netcoreapp2.0\SampleApi.dll

Assembly:           0000019017786bb0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.5\System.Runtime.dll]
ClassLoader:        0000019017834ee0
SecurityDescriptor: 0000019017784680
  Module Name
00007ffac5d05588            C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.5\System.Runtime.dll

// Abbreviated

Assembly:           0000019019319d90 [C:\Program Files\dotnet\store\x64\netcoreapp2.0\microsoft.aspnetcore.webutilities\2.0.1\lib\netstandard2.0\Microsoft.AspNetCore.WebUtilities.dll]
ClassLoader:        0000019463d80530
SecurityDescriptor: 0000019463dae9c0
  Module Name
00007ffac6549270            C:\Program Files\dotnet\store\x64\netcoreapp2.0\microsoft.aspnetcore.webutilities\2.0.1\lib\netstandard2.0\Microsoft.AspNetCore.WebUtilities.dll</code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">SampleApi.dll</code> is located at <code class="language-plaintext highlighter-rouge">00007ffac5d04d38</code> so it does make sense to start searching at <code class="language-plaintext highlighter-rouge">00007ffa00000000</code>. Remember the <code class="language-plaintext highlighter-rouge">Search Memory</code> command we used above? We’ll put it to good use again:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">L</code>: this is a <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/address-and-address-range-syntax#span-idaddressrangesspanspan-idaddressrangesspanaddress-ranges">Range</a>, we’re starting to search at the address <code class="language-plaintext highlighter-rouge">00007ffa00000000</code>
    <ul>
      <li>As we’re searching for a <code class="language-plaintext highlighter-rouge">QWORD</code> the unit is <code class="language-plaintext highlighter-rouge">8 bytes</code> (<code class="language-plaintext highlighter-rouge">64 bit</code>), so we’re looking ahead for <code class="language-plaintext highlighter-rouge">40000000 * 8 = 320 MB</code></li>
    </ul>
  </li>
</ul>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; s -q 00007ffa00000000 L?00000000`40000000 0000019419342830
00007ffa`c5d05370  00000194`19342830 00000000`00000001</code></pre></figure>

<p>Bingo! Wow I didn’t think it would be that easy. We have a reference! Let’s use the <code class="language-plaintext highlighter-rouge">WinDbg</code> <code class="language-plaintext highlighter-rouge">Unassemble</code> <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/u--unassemble-">command</a> to look at the instructions:</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; !u 00007ffa`c5d05370
Unmanaged code
00007ffa`c5d05370 3028            xor     byte ptr [rax],ch
00007ffa`c5d05372 3419            xor     al,19h
00007ffa`c5d05374 94              xchg    eax,esp
00007ffa`c5d05375 0100            add     dword ptr [rax],eax
00007ffa`c5d05377 0001            add     byte ptr [rcx],al
00007ffa`c5d05379 0000            add     byte ptr [rax],al
00007ffa`c5d0537b 0000            add     byte ptr [rax],al
00007ffa`c5d0537d 0000            add     byte ptr [rax],al
00007ffa`c5d0537f 0000            add     byte ptr [rax],al
00007ffa`c5d05381 0000            add     byte ptr [rax],al</code></pre></figure>

<p>Looks like I might have celebrated prematurely. Let’s extend the range:</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; s -q 00007ffa00000000 L?00000000`80000000 0000019419342830
00007ffa`c5d05370  00000194`19342830 00000000`00000001</code></pre></figure>

<p>Same result!</p>

<p>Again, this is where Sasha comes to the rescue:</p>

<blockquote>
  <p>The problem is that we might miss unaligned references to that address, which may occur if it is hardcoded into some instruction (e.g. a <code class="language-plaintext highlighter-rouge">MOV</code>). So instead we should be looking for the individual byte sequence, and remember that we are on a little-endian architecture</p>
</blockquote>

<p>The command is the same than the previous one except for two differences:</p>

<ul>
  <li>This time we’re searching for bytes <code class="language-plaintext highlighter-rouge">-b</code></li>
  <li>As we’re on a little-endian architecture, <code class="language-plaintext highlighter-rouge">0000019419342830</code> turn into <code class="language-plaintext highlighter-rouge">30 28 34 19 94 01 00 00</code></li>
</ul>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; s -b 00007ffa00000000 L?00000000`320000000 30 28 34 19 94 01 00 00
00007ffa`c5d05370  30 28 34 19 94 01 00 00-01 00 00 00 00 00 00 00  0(4.............
00007ffa`c63902ac  30 28 34 19 94 01 00 00-48 8b 31 b9 01 00 00 00  0(4.....H.1.....
00007ffa`c6501b6e  30 28 34 19 94 01 00 00-48 8b 55 f8 e8 81 0b 44  0(4.....H.U....D</code></pre></figure>

<p>I’ve already unassembled the first address, let’s look at the two other ones:</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; !u 00007ffa`c63902ac
Normal JIT generated code
DynamicClass.lambda_method(System.Runtime.CompilerServices.Closure, System.Object, System.Object[])
Begin 00007ffac6390270, size 71
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390270 56              push    rsi
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390271 4883ec20        sub     rsp,20h
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390275 488bf2          mov     rsi,rdx
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390278 4885f6          test    rsi,rsi
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c639027b 7417            je      00007ffa`c6390294
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c639027d 48b910d53cc6fa7f0000 mov rcx,7FFAC63CD510h (MT: SampleApi.Controllers.FeedController)
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390287 48390e          cmp     qword ptr [rsi],rcx
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c639028a 7408            je      00007ffa`c6390294
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c639028c e88f225b5f      call    coreclr!JIT_ChkCastClassSpecial (00007ffb`25942520)
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390291 488bf0          mov     rsi,rax
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390294 8b0e            mov     ecx,dword ptr [rsi]
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390296 48b95053d0c5fa7f0000 mov rcx,7FFAC5D05350h
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902a0 ba03000000      mov     edx,3
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902a5 e8a6515b5f      call    coreclr!JIT_GetSharedNonGCStaticBase_SingleAppDomain (00007ffb`25945450)
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902aa 48b93028341994010000 mov rcx,19419342830h
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902b4 488b31          mov     rsi,qword ptr [rcx]
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902b7 b901000000      mov     ecx,1
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902bc ba40420f00      mov     edx,0F4240h
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902c1 e8a213adff      call    00007ffa`c5e61668 (System.Linq.Enumerable.Range(Int32, Int32), mdToken: 0000000006000090)
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902c6 4c8bc0          mov     r8,rax
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902c9 8b5618          mov     edx,dword ptr [rsi+18h]
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902cc 488bce          mov     rcx,rsi
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902cf 48b8c0d6330ffb7f0000 mov rax,offset System_Private_CoreLib+0x62d6c0 (00007ffb`0f33d6c0)
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902d9 4883c420        add     rsp,20h
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902dd 5e              pop     rsi
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902de 48ffe0          jmp     rax</code></pre></figure>

<p>That’s much nicer, there is a reference to one of my class: <code class="language-plaintext highlighter-rouge">SampleApi.Controllers.FeedController</code>. What about the other address:</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; !u 00007ffa`c6501b6e
Normal JIT generated code
SampleApi.Controllers.FeedController..cctor()
Begin 00007ffac6501b40, size 46

E:\code\me\blog-samples\windbg-static\src\SampleApi\Controllers\FeedController.cs @ 10:
00007ffa`c6501b40 55              push    rbp
00007ffa`c6501b41 4883ec30        sub     rsp,30h
00007ffa`c6501b45 488d6c2430      lea     rbp,[rsp+30h]
00007ffa`c6501b4a 33c0            xor     eax,eax
00007ffa`c6501b4c 488945f8        mov     qword ptr [rbp-8],rax
00007ffa`c6501b50 48b9885d670ffb7f0000 mov rcx,offset System_Private_CoreLib+0x965d88 (00007ffb`0f675d88) (MT: System.Collections.Generic.List`1[[System.Int32, System.Private.CoreLib]])
00007ffa`c6501b5a e89127445f      call    coreclr!JIT_TrialAllocSFastMP_InlineGetThread (00007ffb`259442f0)
00007ffa`c6501b5f 488945f8        mov     qword ptr [rbp-8],rax
00007ffa`c6501b63 488b4df8        mov     rcx,qword ptr [rbp-8]
00007ffa`c6501b67 e874cde348      call    System_Private_CoreLib+0x62e8e0 (00007ffb`0f33e8e0) (System.Collections.Generic.List`1[[System.Int32, System.Private.CoreLib]]..ctor(), mdToken: 00000000060038ae)
00007ffa`c6501b6c 48b93028341994010000 mov rcx,19419342830h
00007ffa`c6501b76 488b55f8        mov     rdx,qword ptr [rbp-8]
00007ffa`c6501b7a e8810b445f      call    coreclr!JIT_CheckedWriteBarrier (00007ffb`25942700)
00007ffa`c6501b7f 90              nop
00007ffa`c6501b80 488d6500        lea     rsp,[rbp]
00007ffa`c6501b84 5d              pop     rbp
00007ffa`c6501b85 c3              ret</code></pre></figure>

<p>This goes a step farther as it references the static constructor of <code class="language-plaintext highlighter-rouge">FeedController</code> (<code class="language-plaintext highlighter-rouge">SampleApi.Controllers.FeedController..cctor()</code>). We now have enough information to inspect the code but first let’s take a deeper look at the <code class="language-plaintext highlighter-rouge">FeedController</code> <code class="language-plaintext highlighter-rouge">class</code>.</p>

<p>Let’s use the <code class="language-plaintext highlighter-rouge">SOS</code> <code class="language-plaintext highlighter-rouge">Name2EE</code> <a href="https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands">command</a>.</p>

<blockquote>
  <p>Displays the <code class="language-plaintext highlighter-rouge">MethodTable</code> structure and <code class="language-plaintext highlighter-rouge">EEClass</code> structure for the specified type or method in the specified module. […] This command supports the Windows debugger syntax of <code class="language-plaintext highlighter-rouge">&lt;module&gt;!&lt;type&gt;</code>. The type must be fully qualified.</p>
</blockquote>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; !name2ee SampleApi!SampleApi.Controllers.FeedController
Module:      00007ffac5d04d38
Assembly:    SampleApi.dll
Token:       0000000002000004
MethodTable: 00007ffac63cd510
EEClass:     00007ffac63bf968
Name:        SampleApi.Controllers.FeedController</code></pre></figure>

<p>We’ll use the <code class="language-plaintext highlighter-rouge">SOS</code> <code class="language-plaintext highlighter-rouge">DumpClass</code> <a href="https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands">command</a>.</p>

<blockquote>
  <p>Displays information about the <code class="language-plaintext highlighter-rouge">EEClass</code> structure associated with a type.</p>
</blockquote>

<figure class="highlight"><pre><code class="language-text" data-lang="text">0:000&gt; !DumpClass /d 00007ffac63bf968
Class Name:      SampleApi.Controllers.FeedController
mdToken:         0000000002000004
File:            E:\code\me\blog-samples\windbg-static\src\SampleApi\bin\Release\netcoreapp2.0\SampleApi.dll
Parent Class:    00007ffac63bf868
Module:          00007ffac5d04d38
Method Table:    00007ffac63cd510
Vtable Slots:    90
Total Method Slots:  92
Class Attributes:    100001
Transparency:        Critical
NumInstanceFields:   8
NumStaticFields:     1
              MT    Field   Offset                 Type VT     Attr            Value Name
00007ffac62ec808  400004a        8 ...ControllerContext  0 instance           _controllerContext
00007ffac6061d88  400004b       10 ...lMetadataProvider  0 instance           _metadataProvider
00007ffac6062f20  400004c       18 ...odelBinderFactory  0 instance           _modelBinderFactory
00007ffac6063178  400004d       20 ...ectModelValidator  0 instance           _objectValidator
00007ffac6487758  400004e       28 ...re.Mvc.IUrlHelper  0 instance           _url
00007ffac6487630  4000018       30 ...empDataDictionary  0 instance           _tempData
0000000000000000  4000019       38 ...l.DynamicViewData  0 instance           _viewBag
00007ffac6487480  400001a       40 ...iewDataDictionary  0 instance           _viewData
00007ffb0f675d88  4000002        8 ...Private.CoreLib]]  0   static 0000019019412bf0 MemoryHog</code></pre></figure>

<p>So, it turns out the <code class="language-plaintext highlighter-rouge">FeedController</code> has a <code class="language-plaintext highlighter-rouge">static</code> field named <code class="language-plaintext highlighter-rouge">MemoryHog</code>. Probably not my <a href="https://github.com/gabrielweyer/blog-samples/blob/4d434b594d7cab48f50bc12140fd9b7fd5f89977/windbg-static/src/SampleApi/Controllers/FeedController.cs#L10">finest</a> piece of <a href="https://github.com/gabrielweyer/blog-samples/blob/4d434b594d7cab48f50bc12140fd9b7fd5f89977/windbg-static/src/SampleApi/Controllers/FeedController.cs#L15">coding</a> to be honest.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I learned how to trace back a <code class="language-plaintext highlighter-rouge">static</code> field to a <code class="language-plaintext highlighter-rouge">class</code>. I’m sure this will come in handy later.</p>

<p>I might have made some mistakes around <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/address-and-address-range-syntax#span-idaddressrangesspanspan-idaddressrangesspanaddress-ranges">Ranges</a> as this is an area I’m still unfamiliar with but it shouldn’t prevent you from achieving the same result.</p>

<p>Until next time!</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/03/09/windbg-1-static-root/</guid>
                <description>
                    
                    Pinpointing a static GC root with WindDbg and SOS.
                    
                </description>
                <pubDate>Fri, 09 Mar 2018 15:51:53 -0600</pubDate>
                <author>Gabriel Weyer</author>
            </item>
        
    
        
            <item>
                <title>Beanstalk Seeder</title>
                <link>https://gabrielweyer.net/2018/02/23/beanstalk-seeder/</link>
                <content:encoded>
                    <![CDATA[
                    <p><code class="language-plaintext highlighter-rouge">Elastic Beanstalk</code> is a great platform, it offers both a <code class="language-plaintext highlighter-rouge">Web</code> tier and a <code class="language-plaintext highlighter-rouge">Worker</code> tier. I recently wrote about <a href="/2018/01/28/simple-routing-elastic-beanstalk-worker/">Simple Routing</a> one of my library that allows you to route a <code class="language-plaintext highlighter-rouge">SQS</code> message to a specific endpoint on the <code class="language-plaintext highlighter-rouge">Worker</code>.</p>

<p>While <code class="language-plaintext highlighter-rouge">Beanstalk</code> works great once it’s deployed to <code class="language-plaintext highlighter-rouge">AWS</code> there is no easy way to run it locally. As soon as you want to execute an end-to-end flow involving both the <code class="language-plaintext highlighter-rouge">Web</code> and the <code class="language-plaintext highlighter-rouge">Worker</code> you need to manually <code class="language-plaintext highlighter-rouge">POST</code> requests to the <code class="language-plaintext highlighter-rouge">Worker</code> using <a href="https://www.getpostman.com/">Postman</a> which is cumbersome and error-prone.</p>

<p>As it core all the <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features-managing-env-tiers.html">SQS daemon</a> does is dequeue messages from a <code class="language-plaintext highlighter-rouge">SQS</code> queue and <code class="language-plaintext highlighter-rouge">POST</code> it to a specified endpoint. With this goal in mind I wrote <a href="https://github.com/gabrielweyer/beanstalk-seeder">Beanstalk Seeder</a>.<!--more--></p>

<p>I had the following objectives:</p>

<ul>
  <li>Users should be able to get up and running quickly</li>
  <li>Meaningful logging</li>
  <li>Transform the <code class="language-plaintext highlighter-rouge">SQS</code> <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-attributes.html">message attributes</a> into HTTP headers (in order to support <a href="https://github.com/gabrielweyer/simple-routing">Simple Routing</a>)</li>
</ul>

<h2 id="get-up-and-running-quickly">Get up and running quickly</h2>

<p>You can get <code class="language-plaintext highlighter-rouge">Beanstalk Seeder</code> from <a href="https://github.com/gabrielweyer/beanstalk-seeder/releases">GitHub releases</a>. Download the archive and extract it somewhere.</p>

<p><code class="language-plaintext highlighter-rouge">Beanstalk Seeder</code>’s <a href="https://github.com/gabrielweyer/beanstalk-seeder#configuration">configuration</a> is detailed in the <code class="language-plaintext highlighter-rouge">README</code>. All you need is a <code class="language-plaintext highlighter-rouge">iAM</code> user, the <code class="language-plaintext highlighter-rouge">Worker</code> <code class="language-plaintext highlighter-rouge">URI</code> and the <code class="language-plaintext highlighter-rouge">SQS</code> queue <code class="language-plaintext highlighter-rouge">URI.</code></p>

<h2 id="meaningful-logging">Meaningful logging</h2>

<p>When running a third-party tool, it’s critical to get meaningful logging as the binary is a black-box for the end user. I use <a href="https://nblumhardt.com/2016/06/structured-logging-concepts-in-net-series-1/#what-is-structured-logging">structured logging</a> in order to make querying the log events a breeze. My logging framework of choice is <a href="https://blog.getseq.net/serilog-tutorial/">Serilog</a>.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">loggerConfiguration</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">LoggerConfiguration</span><span class="p">()</span>
    <span class="p">.</span><span class="n">Destructure</span><span class="p">.</span><span class="n">ByTransforming</span><span class="p">&lt;</span><span class="n">MessageAttributeValue</span><span class="p">&gt;(</span><span class="n">Destructure</span><span class="p">)</span>
    <span class="p">.</span><span class="n">Destructure</span><span class="p">.</span><span class="n">ByTransforming</span><span class="p">&lt;</span><span class="n">Message</span><span class="p">&gt;(</span><span class="n">Destructure</span><span class="p">)</span>
    <span class="p">.</span><span class="n">MinimumLevel</span><span class="p">.</span><span class="nf">Is</span><span class="p">(</span><span class="n">serilogLevel</span><span class="p">)</span>
    <span class="p">.</span><span class="n">Enrich</span><span class="p">.</span><span class="nf">WithDemystifiedStackTraces</span><span class="p">()</span>
    <span class="p">.</span><span class="n">Enrich</span><span class="p">.</span><span class="nf">FromLogContext</span><span class="p">()</span>
    <span class="p">.</span><span class="n">WriteTo</span><span class="p">.</span><span class="nf">Console</span><span class="p">(</span><span class="n">serilogLevel</span><span class="p">);</span></code></pre></figure>

<p>The previous snippet highlights only a few of the <code class="language-plaintext highlighter-rouge">Serilog</code> features.</p>

<h3 id="the-structure-capturing-operator">The structure-capturing operator</h3>

<p><code class="language-plaintext highlighter-rouge">MessageAttributeValue</code> and <code class="language-plaintext highlighter-rouge">Message</code> are both defined in the <code class="language-plaintext highlighter-rouge">awssdk.sqs</code> <code class="language-plaintext highlighter-rouge">NuGet</code> package. I’m interested in logging only some of their properties, <code class="language-plaintext highlighter-rouge">Serilog</code> has the ability to capture object via the <a href="https://nblumhardt.com/2016/08/serialized-data-structured-logging-concepts-in-net-6/#capturing-objects">structure-capturing operator</a>.</p>

<h3 id="enrichment">Enrichment</h3>

<blockquote>
  <p>Enrichment is the act of adding additional properties to events, other than the ones originating from the message template.</p>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">Serilog</code> supports <a href="https://blog.getseq.net/serilog-tutorial/#enrichingwithambientcontext">ambient context</a>. I’m also using the excellent <a href="https://github.com/benaadams/Ben.Demystifier">Ben.Demystifier</a> for getting nicer stack traces.</p>

<h3 id="sinks">Sinks</h3>

<p>By default, <code class="language-plaintext highlighter-rouge">Serilog</code> does not log anywhere. In order to record events you’ll need to configure one or more <code class="language-plaintext highlighter-rouge">Sink</code>s. In this case I’m writing to the console but they are <a href="https://github.com/serilog/serilog/wiki/Provided-Sinks">many other</a> <code class="language-plaintext highlighter-rouge">Sink</code>s available.</p>

<h3 id="result">Result</h3>

<p><img src="/assets/beanstalk-seeder/events.png" alt="HTTP Path" /></p>

<p>I hope the recorded events are descriptive enough so that an end user know what’s happening:</p>

<ul>
  <li>First I display the settings used, this is important as they could come from the <code class="language-plaintext highlighter-rouge">appsettings.json</code>, environment variables or even the <a href="https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets?tabs=visual-studio#secret-manager">user secrets</a> if the environment is <code class="language-plaintext highlighter-rouge">Development</code>.</li>
  <li>Then using the <code class="language-plaintext highlighter-rouge">structure-capturing operator</code> I log the relevant <code class="language-plaintext highlighter-rouge">SQS</code> message properties.</li>
  <li>Instead of logging the complete HTTP request I log the content of the body and the relevant headers.</li>
  <li>When deleting the message, I log the <code class="language-plaintext highlighter-rouge">ReceiptHandle</code>, this is the value used to delete a message and the user can correlate it to what was displayed above.</li>
  <li>Finally, rather than not displaying anything when there are no messages in the queue I inform the user that’s the case and how long I’ll wait before retrying.</li>
</ul>

<h2 id="interestings-bits">Interestings bits</h2>

<p>I’m using a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource?view=netcore-2.0">CancellationTokenSource</a> so that the user can stop the message pump at any time (relying on <a href="https://docs.microsoft.com/en-us/dotnet/api/system.console.cancelkeypress?view=netcore-2.0">Console.CancelKeyPress</a>).</p>

<p>The <a href="https://github.com/gabrielweyer/beanstalk-seeder/blob/ca47d6f84fe748915a22de63b23a34ef735a88ae/src/BeanstalkSeeder/Services/MessagePump.cs">MessagePump</a> <code class="language-plaintext highlighter-rouge">class</code> is the only <code class="language-plaintext highlighter-rouge">class</code> with some logic. I wrote some <a href="https://github.com/gabrielweyer/beanstalk-seeder/blob/ca47d6f84fe748915a22de63b23a34ef735a88ae/tests/BeanstalkSeederTests/MessagePumpTests.cs">tests</a> around the cancellation token, the transformation of <code class="language-plaintext highlighter-rouge">SQS</code> message attributes into HTTP headers and the back-off when no messages are available in the queue.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I hope you’ll find <a href="https://github.com/gabrielweyer/beanstalk-seeder">Beanstalk Seeder</a> as useful as I did, combined with <a href="https://github.com/gabrielweyer/simple-routing">Simple Routing</a> it simplified and streamlined my <code class="language-plaintext highlighter-rouge">Elastic Beanstalk</code> development.</p>

<p>I also wanted to point out that <code class="language-plaintext highlighter-rouge">Beanstalk Seeder</code> is platform agnostic. It doesn’t matter if you’re developing using <code class="language-plaintext highlighter-rouge">Node.js</code>, <code class="language-plaintext highlighter-rouge">Go</code> or any other of the <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html">Elastic Beanstalk supported platforms</a>, all you need to do is install the latest <a href="https://www.microsoft.com/net/download/windows">.NET Core runtime</a> (available on <code class="language-plaintext highlighter-rouge">Windows</code>, <code class="language-plaintext highlighter-rouge">macOS</code> and <code class="language-plaintext highlighter-rouge">Linux</code>).</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/02/23/beanstalk-seeder/</guid>
                <description>
                    
                    Emulates the SQS Daemon surrounding an Elastic Beanstalk Worker Tier so that you can replicate the interaction between a Web Tier and a Worker Tier on your machine.
                    
                </description>
                <pubDate>Fri, 23 Feb 2018 17:40:46 -0600</pubDate>
                <author>Gabriel Weyer</author>
            </item>
        
    
        
            <item>
                <title>Singleton HTTP Client</title>
                <link>https://gabrielweyer.net/2018/02/08/singleton-http-client/</link>
                <content:encoded>
                    <![CDATA[
                    <p>Even though the <code class="language-plaintext highlighter-rouge">class</code> <code class="language-plaintext highlighter-rouge">HttpClient</code> implements <code class="language-plaintext highlighter-rouge">IDisposable</code> it is supposed to be used as a singleton as stated in the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=netcore-2.0#Remarks">API reference</a>:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">HttpClient</code> is intended to be instantiated once and re-used throughout the life of an application. Instantiating an <code class="language-plaintext highlighter-rouge">HttpClient</code> class for every request will exhaust the number of sockets available under heavy loads. This will result in <code class="language-plaintext highlighter-rouge">SocketException</code> errors.</p>
</blockquote>

<p>The accepted best practice is to have one <code class="language-plaintext highlighter-rouge">HttpClient</code> per HTTP endpoint you’re interacting with. This will not only yield better performance it also allows to encapsulate endpoint specific logic (such as setting headers).</p>

<p>Now the question is: how do you configure your <code class="language-plaintext highlighter-rouge">IoC</code> container to resolve the expected <code class="language-plaintext highlighter-rouge">HttpClient</code> instance? This used to require a cumbersome registration but <code class="language-plaintext highlighter-rouge">.NET Core 2.1</code> will ship with the <a href="https://github.com/aspnet/HttpClientFactory">HttpClientFactory</a> making our life much easier.<!--more--></p>

<h2 id="httpclientfactory"><code class="language-plaintext highlighter-rouge">HttpClientFactory</code></h2>

<p><a href="https://www.stevejgordon.co.uk/">Steve Gordon</a> has an excellent <a href="https://www.stevejgordon.co.uk/httpclientfactory-named-typed-clients-aspnetcore">post</a> explaining what is <code class="language-plaintext highlighter-rouge">HttpClientFactory</code> and how it works.</p>

<p><code class="language-plaintext highlighter-rouge">HttpClientFactory</code> aims to provide the following improvements:</p>

<ul>
  <li>Alleviate sockets exhaustion by reusing connection when possible</li>
  <li>Alleviate stale <code class="language-plaintext highlighter-rouge">DNS</code> records (by default <code class="language-plaintext highlighter-rouge">HttpClient</code> caches <code class="language-plaintext highlighter-rouge">DNS</code> records for its lifetime)</li>
  <li>Easily resolve an <code class="language-plaintext highlighter-rouge">HttpClient</code> instance linked to a specific HTTP endpoint</li>
</ul>

<p>What if you can’t use <code class="language-plaintext highlighter-rouge">.NET Core</code> or can’t update? Fear not, we can achieve tomorrow’s dream with today’s tools (most of it anyway).</p>

<h2 id="associate-an-httpclient-instance-with-the-service-using-it">Associate an <code class="language-plaintext highlighter-rouge">HttpClient</code> instance with the service using it</h2>

<p><code class="language-plaintext highlighter-rouge">HttpClient</code> instances communicating with a specific HTTP endpoint tend to have dedicated settings such as an <code class="language-plaintext highlighter-rouge">Authorization</code> header, default request headers (<code class="language-plaintext highlighter-rouge">Accept</code> for example), maybe a <code class="language-plaintext highlighter-rouge">HMAC</code>… I tend to encapsulate those settings in a <code class="language-plaintext highlighter-rouge">class</code> to decouple the settings’s source from the consummer.</p>

<p>Let’s imagine that we’re integrating with a fictitious company called <em>Contoso</em>. The integration takes place via an HTTP API and our contact at Contoso gave us a bearer token that needs to be set on the <code class="language-plaintext highlighter-rouge">Authorization</code> header.</p>

<p>The first step is to create a <code class="language-plaintext highlighter-rouge">POCO</code> modelizing the settings:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ContosoSettings</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">Uri</span> <span class="n">BaseAddress</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">BearerToken</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">HttpClient</code> makes writing tests harder. Developers tend to derive from <code class="language-plaintext highlighter-rouge">HttpMessageHandler</code> and provide an implementation allowing them to assert the requests issued by the <code class="language-plaintext highlighter-rouge">HttpClient</code>. I prefer to introduce an interface called <code class="language-plaintext highlighter-rouge">IHttpClient</code> exposing a single method to handle <code class="language-plaintext highlighter-rouge">HTTP</code> traffic:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="nc">IHttpClient</span>
<span class="p">{</span>
    <span class="n">Task</span><span class="p">&lt;</span><span class="n">HttpResponseMessage</span><span class="p">&gt;</span> <span class="nf">SendAsync</span><span class="p">(</span><span class="n">HttpRequestMessage</span> <span class="n">request</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>We then implement the <code class="language-plaintext highlighter-rouge">ContosoHttpClient</code> that will be dedicated to communicating with the <code class="language-plaintext highlighter-rouge">Contoso</code> API:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ContosoHttpClient</span> <span class="p">:</span> <span class="n">HttpClient</span><span class="p">,</span> <span class="n">IHttpClient</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nf">ContosoHttpClient</span><span class="p">(</span><span class="n">ContosoSettings</span> <span class="n">settings</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">BaseAddress</span> <span class="p">=</span> <span class="n">settings</span><span class="p">.</span><span class="n">BaseAddress</span><span class="p">;</span>
        <span class="n">DefaultRequestHeaders</span><span class="p">.</span><span class="n">Authorization</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">AuthenticationHeaderValue</span><span class="p">(</span><span class="s">"Bearer"</span><span class="p">,</span> <span class="n">settings</span><span class="p">.</span><span class="n">BearerToken</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>And finally we registers the <code class="language-plaintext highlighter-rouge">Type</code>s in the <code class="language-plaintext highlighter-rouge">IoC</code> container:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">const</span> <span class="kt">string</span> <span class="n">contosoHttpClientAutofacKeyName</span> <span class="p">=</span> <span class="s">"ContosoHttpClient"</span><span class="p">;</span>

<span class="n">builder</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">ContosoHttpClient</span><span class="p">&gt;()</span>
    <span class="p">.</span><span class="nf">Named</span><span class="p">(</span><span class="n">contosoHttpClientAutofacKeyName</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="n">IHttpClient</span><span class="p">))</span>
    <span class="p">.</span><span class="nf">SingleInstance</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">ContosoClient</span><span class="p">&gt;()</span>
    <span class="p">.</span><span class="nf">WithParameter</span><span class="p">(</span><span class="k">new</span> <span class="nf">ResolvedParameter</span><span class="p">(</span>
        <span class="p">(</span><span class="n">pi</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">pi</span><span class="p">.</span><span class="n">ParameterType</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="n">IHttpClient</span><span class="p">),</span>
        <span class="p">(</span><span class="n">pi</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">ctx</span><span class="p">.</span><span class="n">ResolveNamed</span><span class="p">&lt;</span><span class="n">IHttpClient</span><span class="p">&gt;(</span><span class="n">ContosoHttpClientAutofacKeyName</span><span class="p">)))</span>
    <span class="p">.</span><span class="nf">AsImplementedInterfaces</span><span class="p">().</span><span class="nf">InstancePerRequest</span><span class="p">();</span>

<span class="c1">// Abbreviated: resolve and register ContosoSettings (from Web.config, appsettings.json, CSV, volumen...)</span></code></pre></figure>

<p>This snippet is using <code class="language-plaintext highlighter-rouge">Autofac</code> <a href="http://autofaccn.readthedocs.io/en/latest/advanced/keyed-services.html#named-services">named service</a>. Using a <code class="language-plaintext highlighter-rouge">named service</code> this way has several benefits:</p>

<ul>
  <li>If someone registered another <code class="language-plaintext highlighter-rouge">IHttpClient</code> that is supposed to be used everywhere else we will not override the registration for all the other services while still retrieving an instance of <code class="language-plaintext highlighter-rouge">ContosoHttpClient</code> when resolving <code class="language-plaintext highlighter-rouge">IContosoClient</code>.</li>
  <li>The <code class="language-plaintext highlighter-rouge">named service</code> is an implementation details that only the <code class="language-plaintext highlighter-rouge">IoC</code> container knows about.</li>
</ul>

<h2 id="solve-stale-dns-records">Solve stale DNS records</h2>

<p>Let’s say you’re interacting with an API hosted at <code class="language-plaintext highlighter-rouge">https://api.contoso.com</code>, <code class="language-plaintext highlighter-rouge">HttpClient</code> will first have to resolve the domain name to an <code class="language-plaintext highlighter-rouge">IP</code> thanks to a <code class="language-plaintext highlighter-rouge">DNS</code> server. But what happens if the <code class="language-plaintext highlighter-rouge">DNS</code> record is updated and the domain name now resolves to another <code class="language-plaintext highlighter-rouge">IP</code>? If you are using a transient <code class="language-plaintext highlighter-rouge">HttpClient</code> you’ll be fine but if you’re using a singleton instance (as you should) <code class="language-plaintext highlighter-rouge">Exception</code>s will start to shoot up in your monitoring system. Should we stop calling APIs, or maybe rewrite everything in <code class="language-plaintext highlighter-rouge">Go</code>?</p>

<p>The <a href="https://docs.microsoft.com/en-us/dotnet/api/system.net.servicepoint.connectionleasetimeout?view=netframework-4.7.1#System_Net_ServicePoint_ConnectionLeaseTimeout">ConnectionLeaseTimeout</a> property can solve this situation nicely for us:</p>

<blockquote>
  <p>A <code class="language-plaintext highlighter-rouge">Int32</code> that specifies the number of <strong>milliseconds</strong> that an active <code class="language-plaintext highlighter-rouge">ServicePoint</code> connection remains open. <strong>The default is <code class="language-plaintext highlighter-rouge">-1</code>, which allows an active <code class="language-plaintext highlighter-rouge">ServicePoint</code> connection to stay connected indefinitely</strong>. Set this property to <code class="language-plaintext highlighter-rouge">0</code> to force <code class="language-plaintext highlighter-rouge">ServicePoint</code> connections to close after servicing a request.</p>
</blockquote>

<p>This is how you set it:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">apiUri</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="s">"https://api.contoso.com"</span><span class="p">);</span>
<span class="kt">var</span> <span class="n">sp</span> <span class="p">=</span> <span class="n">ServicePointManager</span><span class="p">.</span><span class="nf">FindServicePoint</span><span class="p">(</span><span class="n">apiUri</span><span class="p">);</span>
<span class="n">sp</span><span class="p">.</span><span class="n">ConnectionLeaseTimeout</span> <span class="p">=</span> <span class="m">60</span><span class="p">*</span><span class="m">1000</span><span class="p">;</span></code></pre></figure>

<p>In the previous snippet I’m keeping the connection opened for a minute which seems like a good trade-off.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I haven’t looked at the implementation of <code class="language-plaintext highlighter-rouge">HttpClientFactory</code> yet but I suspect the end result will be fairly similar to what I demonstrated above. If you still have doubts about using a singleton <code class="language-plaintext highlighter-rouge">HttpClient</code> I recommend you to perf test it. At a previous customer I developped an API that was calling other HTTP endpoints, I increased the throughput by a factor of <code class="language-plaintext highlighter-rouge">10</code> by changing a single thing: I made the <code class="language-plaintext highlighter-rouge">HttpClient</code> a singleton rather than a per-request scope.</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/02/08/singleton-http-client/</guid>
                <description>
                    
                    Use a singleton HTTP Client for better performance.
                    
                </description>
                <pubDate>Thu, 08 Feb 2018 14:34:06 -0600</pubDate>
                <author>Gabriel Weyer</author>
            </item>
        
    
        
            <item>
                <title>Simple Routing for Elastic Beanstalk Worker tier</title>
                <link>https://gabrielweyer.net/2018/01/28/simple-routing-elastic-beanstalk-worker/</link>
                <content:encoded>
                    <![CDATA[
                    <p><code class="language-plaintext highlighter-rouge">Elastic Beanstalk</code> offers both a <code class="language-plaintext highlighter-rouge">Web</code> tier and a <code class="language-plaintext highlighter-rouge">Worker</code> tier. This allows developers to build reasonably complex applications without having to maintain moving pieces. Offloading heavy-duty workloads to the worker in order to keep the web tier responsive is as easy as putting a message on a queue.</p>

<p><img src="/assets/simple-routing-elastic-beanstalk-worker/http-path.png" alt="HTTP Path" /></p>

<p>One annoyance that I have with <code class="language-plaintext highlighter-rouge">Beanstalk</code> is that there is no way to direct a message to a specific endpoint, hence leaving a single endpoint the responsibility of distributing the messages to all their handlers and potentially leading to brittle code. But it doesn’t have to be that way.<!--more--></p>

<h2 id="implementation">Implementation</h2>

<p><code class="language-plaintext highlighter-rouge">SQS</code> messages have <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-attributes.html">attributes</a>, attributes can be set by the sender and are read by the receiver. The idea is to use a known attribute to attach routing metadata to the message.</p>

<h3 id="constants">Constants</h3>

<p>Constants are the base of any decently built <code class="language-plaintext highlighter-rouge">C#</code> application. I did not want to depart from to this rule and hence added some constants:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">RoutingConstants</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">HeaderName</span> <span class="p">=</span> <span class="s">"Task"</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">HeaderType</span> <span class="p">=</span> <span class="s">"String"</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>These constansts will be used to add routing metadata to the <code class="language-plaintext highlighter-rouge">SQS</code> message.</p>

<p>We can then define our routes via some more constants:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">WorkerConstants</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">DoSomeWorkTaskName</span> <span class="p">=</span> <span class="s">"do-some-work"</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">DoSomeOtherWorkTaskName</span> <span class="p">=</span> <span class="s">"do-some-other-work"</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p><strong>Note</strong>: those two <code class="language-plaintext highlighter-rouge">class</code> will have to be referenced by the sender and the <code class="language-plaintext highlighter-rouge">Worker</code>.</p>

<h3 id="sending-the-message">Sending the message</h3>

<p>The sender will most likely be the <code class="language-plaintext highlighter-rouge">Web</code> tier but it could be any system being able to send a message to a <code class="language-plaintext highlighter-rouge">SQS</code> queue.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">sendMessageRequest</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SendMessageRequest</span><span class="p">();</span>
<span class="c1">// Abbreviated: set properties on sendMessageRequest, such as the MessageBody and the QueueUrl</span>

<span class="c1">// We're using RoutingConstants.HeaderName as the MessageAttribute key</span>
<span class="c1">// and WorkerConstants.DoSomeWorkTaskName as the MessageAttribute value</span>
<span class="n">sendMessageRequest</span><span class="p">.</span><span class="n">MessageAttributes</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span>
    <span class="n">RoutingConstants</span><span class="p">.</span><span class="n">HeaderName</span><span class="p">,</span>
    <span class="k">new</span> <span class="n">MessageAttributeValue</span> <span class="p">{</span><span class="n">StringValue</span> <span class="p">=</span> <span class="n">WorkerConstants</span><span class="p">.</span><span class="n">DoSomeWorkTaskName</span><span class="p">,</span> <span class="n">DataType</span> <span class="p">=</span> <span class="n">RoutingConstants</span><span class="p">.</span><span class="n">HeaderType</span><span class="p">});</span>

<span class="c1">// Abbreviated: send the message</span></code></pre></figure>

<h3 id="middleware">Middleware</h3>

<p>In the <code class="language-plaintext highlighter-rouge">Worker</code>, the routing is implemented via a <code class="language-plaintext highlighter-rouge">Middleware</code>:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">HeaderRoutingMiddleware</span>
<span class="p">{</span>
    <span class="c1">// Elastic Beanstalk prefixes the SQS messages properties' name with "X-Aws-Sqsd-Attr-"</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="n">TaskHeaderName</span> <span class="p">=</span> <span class="s">$"X-Aws-Sqsd-Attr-</span><span class="p">{</span><span class="n">RoutingConstants</span><span class="p">.</span><span class="n">HeaderName</span><span class="p">}</span><span class="s">"</span><span class="p">;</span>

    <span class="k">public</span> <span class="n">Task</span> <span class="nf">Invoke</span><span class="p">(</span><span class="n">HttpContext</span> <span class="n">context</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// We get the value of the routing header</span>
        <span class="n">StringValues</span> <span class="n">task</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">Request</span><span class="p">.</span><span class="n">Headers</span><span class="p">[</span><span class="n">TaskHeaderName</span><span class="p">];</span>

        <span class="c1">// And set it as the path</span>
        <span class="n">context</span><span class="p">.</span><span class="n">Request</span><span class="p">.</span><span class="n">Path</span> <span class="p">=</span> <span class="s">$"/</span><span class="p">{</span><span class="n">task</span><span class="p">.</span><span class="nf">Single</span><span class="p">()}</span><span class="s">"</span><span class="p">;</span>

        <span class="k">return</span> <span class="nf">_next</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><strong>Note</strong>: don’t forget to add <code class="language-plaintext highlighter-rouge">HeaderRoutingMiddleware</code> to the <code class="language-plaintext highlighter-rouge">IApplicationBuilder</code>.</p>

<h3 id="controller">Controller</h3>

<p>The last piece of the puzzle is defining the expected route on the <code class="language-plaintext highlighter-rouge">Controller</code>:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// This is important, we do not want a prefix in front of the action's route</span>
<span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">""</span><span class="p">)]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">SomeController</span> <span class="p">:</span> <span class="n">Controller</span>
<span class="p">{</span>
  <span class="c1">// The route has to match the value given to the MessageAttribute</span>
  <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="n">WorkerConstants</span><span class="p">.</span><span class="n">DoSomeWorkTaskName</span><span class="p">)]</span>
  <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">SomeMethod</span><span class="p">(</span><span class="n">SomeModel</span> <span class="n">model</span><span class="p">)</span>
  <span class="p">{</span>
      <span class="c1">// Abbreviated for clarity</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h2 id="simple-routing">Simple routing</h2>

<p>I used <code class="language-plaintext highlighter-rouge">Simple Routing</code> in production over the last few months and am now confident that it does what it’s supposed to do. This is why I decided to release it under a <code class="language-plaintext highlighter-rouge">MIT</code> license to allow others to benefit from my work.</p>

<p><code class="language-plaintext highlighter-rouge">Simple Routing</code> is available:</p>

<ul>
  <li>On <code class="language-plaintext highlighter-rouge">NuGet</code> as the package <a href="https://www.nuget.org/packages/BeanstalkWorker.SimpleRouting/">BeanstalkWorker.SimpleRouting</a></li>
  <li>A <code class="language-plaintext highlighter-rouge">GitHub</code> <a href="https://github.com/gabrielweyer/simple-routing/releases">release</a></li>
  <li>As <a href="https://github.com/gabrielweyer/simple-routing">source</a> on <code class="language-plaintext highlighter-rouge">Github</code>
    <ul>
      <li>The implementation is so simple that you can just copy the classes into your own solution if that works better for you</li>
    </ul>
  </li>
</ul>

<h3 id="demo">Demo</h3>

<p>The <code class="language-plaintext highlighter-rouge">Simple Routing</code> solution contains a <code class="language-plaintext highlighter-rouge">SampleWeb</code> app, you can either:</p>

<ul>
  <li>Send “work” - <code class="language-plaintext highlighter-rouge">Send/Work</code></li>
  <li>Send “nothing” - <code class="language-plaintext highlighter-rouge">Send/Nothing</code></li>
</ul>

<h4 id="send-messages">Send messages</h4>

<figure class="highlight"><pre><code class="language-text" data-lang="text">GET http://localhost:5000/Send/Work HTTP/1.1
Host: localhost:5000</code></pre></figure>

<p><img src="/assets/simple-routing-elastic-beanstalk-worker/web-send-work.png" alt="Send Work" /></p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">GET http://localhost:5000/Send/Nothing HTTP/1.1
Host: localhost:5000</code></pre></figure>

<p><img src="/assets/simple-routing-elastic-beanstalk-worker/web-send-nothing.png" alt="Send Nothing" /></p>

<h4 id="peek-at-the-messages">Peek at the messages</h4>

<p>Now let’s look at the messages in the <code class="language-plaintext highlighter-rouge">SQS</code> queue:</p>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">Work</code> message</li>
</ul>

<p><img src="/assets/simple-routing-elastic-beanstalk-worker/message-work-body.png" alt="Work Message Body" /></p>

<p><img src="/assets/simple-routing-elastic-beanstalk-worker/message-work-attributes.png" alt="Work Message Attributes" /></p>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">Nothing</code> message</li>
</ul>

<p><img src="/assets/simple-routing-elastic-beanstalk-worker/message-nothing-body.png" alt="Nothing Message Body" /></p>

<p><img src="/assets/simple-routing-elastic-beanstalk-worker/message-nothing-attributes.png" alt="Nothing Message Attributes" /></p>

<h4 id="handle-the-messages">Handle the messages</h4>

<p>Launch the <code class="language-plaintext highlighter-rouge">SampleWorker</code> app. When running in <code class="language-plaintext highlighter-rouge">ElasticBeanstalk</code> the <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features-managing-env-tiers.html">Sqsd daemon</a> reads <code class="language-plaintext highlighter-rouge">SQS</code> messages from the <code class="language-plaintext highlighter-rouge">SQS</code> queue and <code class="language-plaintext highlighter-rouge">POST</code> the content to your <code class="language-plaintext highlighter-rouge">Worker</code>. But we’re running the <code class="language-plaintext highlighter-rouge">Worker</code> on our machine and the <code class="language-plaintext highlighter-rouge">Sqsd daemon</code> is not available. This is why I wrote <code class="language-plaintext highlighter-rouge">Beanstalk Seeder</code>.</p>

<blockquote>
  <p><a href="https://github.com/gabrielweyer/beanstalk-seeder">Beanstalk Seeder</a> emulates the <code class="language-plaintext highlighter-rouge">SQS Daemon</code> surrounding an <code class="language-plaintext highlighter-rouge">Elastic Beanstalk</code> <code class="language-plaintext highlighter-rouge">Worker Tier</code> so that you can replicate the interaction between a <code class="language-plaintext highlighter-rouge">Web Tier</code> and a <code class="language-plaintext highlighter-rouge">Worker Tier</code> on your machine.</p>
</blockquote>

<h5 id="handling-the-work-message">Handling the <code class="language-plaintext highlighter-rouge">Work</code> message</h5>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Beanstalk Seeder</code></li>
</ul>

<p><img src="/assets/simple-routing-elastic-beanstalk-worker/beanstalk-seeder-work.png" alt="Work Message Beanstalk Seeder" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Worker</code></li>
</ul>

<p><img src="/assets/simple-routing-elastic-beanstalk-worker/worker-work.png" alt="Work Message Worker" /></p>

<h5 id="handling-the-nothing-message">Handling the <code class="language-plaintext highlighter-rouge">Nothing</code> message</h5>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Beanstalk Seeder</code></li>
</ul>

<p><img src="/assets/simple-routing-elastic-beanstalk-worker/beanstalk-seeder-nothing.png" alt="Nothing Message Beanstalk Seeder" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Worker</code></li>
</ul>

<p><img src="/assets/simple-routing-elastic-beanstalk-worker/worker-nothing.png" alt="Nothing Message Worker" /></p>

<p>I wrote a detailed guide in the <a href="https://github.com/gabrielweyer/simple-routing">GitHub repository</a>. Give it a try and let me know if it works for you.</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/01/28/simple-routing-elastic-beanstalk-worker/</guid>
                <description>
                    
                    Allows to route a SQS message to a specific endpoint on the Elastic Beanstalk Worker instead of having a single endpoint handling all the messages.
                    
                </description>
                <pubDate>Sun, 28 Jan 2018 14:24:33 -0600</pubDate>
                <author>Gabriel Weyer</author>
            </item>
        
    
        
            <item>
                <title>Links Insights #1</title>
                <link>https://gabrielweyer.net/2018/01/26/links-insights-1/</link>
                <content:encoded>
                    <![CDATA[
                    <p>Every now and then I stumble upon a brilliant post on Internet, I share some of those links on my <a href="https://www.diigo.com/user/gabrielweyer">Diigo profile</a> but the format is very succinct. I decided to start a new experiment and instead write full blog posts about those links. The first reason is quite selfish as I would like to keep a record of what I thought was interesting and why, I also hope to empower the reader so that she can decide if she wants to read the full post as some of them are lengthy.</p>

<p>I’m considering limiting each of those post to up to three links as to not require too much time from the reader.</p>

<p>This is inspired by the excellent work that Chris Alcock and Michael Wolfenden are doing with respectively <a href="http://blog.cwa.me.uk/">The Morning Brew</a> and <a href="https://michael-wolfenden.github.io/">The Wolf Report</a>. Don’t be surprised if I end up <del>stealing</del> borrowing some links from them.</p>

<p>Without further ado let me get started with the first links.<!--more--></p>

<h2 id="how-to-be-a-programmer-a-short-comprehensive-and-personal-summary">How To Be a Programmer: A Short, Comprehensive, and Personal Summary</h2>

<p><strong>Link</strong>: <a href="https://www.doc.ic.ac.uk/~susan/475/HowToBeAProgrammer.pdf">https://www.doc.ic.ac.uk/~susan/475/HowToBeAProgrammer.pdf</a></p>

<p>This is a 40 pages long PDF but contains some invaluable lessons especially if you’ve been in the field for only a few years.</p>

<blockquote>
  <p>A classic mistake is to use a hash table as a cache and forget to remove the references in the hash table. Since the reference remains, the referent is uncollectable but useless. This is called a memory leak.</p>
</blockquote>

<p>This is a mistake I’ve seen across almost all companies I’ve consulted for. I never managed to understand why dev teams adopted this anti-pattern as it has only drawbacks and is not simpler to write than a barebone caching system.</p>

<p>In the .NET word it’s often implemented via a <code class="language-plaintext highlighter-rouge">static private Dictionary</code>. Developers tend to use objects as key without understanding the requirements around equality but the main issue is that there is rarely code to remove keys which then requires an app pool restart (in a web app) in order to get rid of the stale key! This is compounded by the fact that sessions are often stored in process too and will be wiped out by an app pool restart.</p>

<ul>
  <li>Caching is hard, only introduce caching if you need to (based on performance measurements and performance targets)</li>
  <li>Use the <a href="https://docs.microsoft.com/en-us/dotnet/framework/performance/caching-in-net-framework-applications"><code class="language-plaintext highlighter-rouge">System.Runtime.Caching</code></a> namespace for in process caching</li>
  <li>Cache data for the smallest amount of time you can get away with</li>
  <li>Have an API allowing you to interact with your caching system</li>
  <li>Consider using a distributed caching system (<a href="https://redis.io/"><code class="language-plaintext highlighter-rouge">Redis</code></a> is great for this workload)</li>
  <li>When using a distributed caching system, consider using a short lived in process cache</li>
</ul>

<blockquote>
  <p>Never, ever, rest any hopes on vapor. Vapor is any alleged software that has been promised but is not yet available.</p>
</blockquote>

<p>This situation happened in one of my previous engagement. The feature we were developing was tightly integrated with a product being built by a startup. Their CEO flew down to our office, we listed the API endpoints we required and development started straight away. We even had a support engineer assigned to us!</p>

<p>Two things started to happen:</p>

<ul>
  <li>Already working features would break suddenly. After getting some support it would turn out that they pushed a new release that broke the feature. They would then deploy a patch which would break another feature!</li>
  <li>The core feature of this system was to poll third party services for created or modified entities. During our testing we noticed that entities were being missed frequently and we had to trigger the system manually for anything to happen. We raised those concerns and the startup promised to improve the reliability.</li>
</ul>

<p>We were developing at a faster pace and started to mock more and more dependencies. The release date was approaching and we had no confidence the integration would work. The product we were working on had long release cycles and was deployed by our customers on their own infrastructure, a failure would have been catastrophic. It was finally decided to test the reliability of our provider, we also included one of their competitor. After a few days of collecting data the verdict came in and things weren’t looking good, even though the competitor captured 100% of the entities we created our provider missed almost 30% of them!</p>

<p>The CTO decided to scrap the integration on the spot and we ended up throwing away half of the code base.</p>

<p>What we did right was to investigate the unknowns early on in the project. Instead of building our infrastructure we developed a small proof of concept and were able to get a contrived end-to-end execution. The lesson that I learned is that you should define a SLA for your provider from day one and measure it.</p>

<h2 id="how-to-write-a-git-commit-message">How to Write a Git Commit Message</h2>

<p><strong>Link</strong>: <a href="https://chris.beams.io/posts/git-commit/">https://chris.beams.io/posts/git-commit/</a></p>

<p>This is an amazing post, I’ve started to apply those rules a few months ago and my commit messages are so much better now.</p>

<blockquote>
  <p>Use the body to explain what and why vs. how</p>
</blockquote>

<p><a href="https://chris.beams.io/posts/git-commit/#why-not-how">Giving context in the body</a> is critical as often when fixing a bug I can see how it has been introduced but I have no idea why the change was made - even after reading the story associated with it! Please spend a few minutes explaining why and how a change was made, in 6 months or one year someone will be grateful. This someone might even be you!</p>

<blockquote>
  <p>Wrap the body at 72 characters</p>
</blockquote>

<p>I used to write my commit messages inline with the <code class="language-plaintext highlighter-rouge">-m</code> argument. After reading this <a href="https://chris.beams.io/posts/git-commit/#wrap-72">rule</a> I realized I needed an editor. I started to use <a href="https://notepad-plus-plus.org/">Notepad++</a> by configuring Git this way:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git config <span class="nt">--global</span> core.editor <span class="s2">"'C:</span><span class="se">\P</span><span class="s2">rogram Files (x86)</span><span class="se">\N</span><span class="s2">otepad++</span><span class="se">\n</span><span class="s2">otepad++.exe' -multiInst -notabbar -nosession -noPlugin"</span></code></pre></figure>

<p>Notepad++ accepts <a href="https://docs.notepad-plus-plus.org/index.php/Command_Line_Switches">command line switches</a> but there is no switch to set the text width. Git has a setting enforcing the text width but it does not work with Notepad++. The good news is that Git can also use notepad and the text width will be enforced:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git config <span class="nt">--global</span> core.editor notepad
git config <span class="nt">--global</span> format.commitMessageColumns 72</code></pre></figure>

<p>But the text will be wrapped <strong>after</strong> you save your commit message leading to a less than desirable result:</p>

<p><a href="/assets/links-insights-1/wrap-notepad.gif"><img src="/assets/links-insights-1/wrap-notepad.gif" alt="wrap-notepad" /></a></p>

<p>A better solution is to use vim instead:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git config <span class="nt">--global</span> core.editor vim
git config <span class="nt">--global</span> <span class="nt">--unset</span> format.commitMessageColumns</code></pre></figure>

<p><a href="/assets/links-insights-1/wrap-vim.gif"><img src="/assets/links-insights-1/wrap-vim.gif" alt="wrap-vim" /></a></p>

<p>I did not hit Enter while typing the body of this commit message, instead vim wrapped it for me automatically. If you want to learn more about configuring Git on Windows I wrote a <a href="https://github.com/gabrielweyer/nuggets/blob/master/git/git.md">tutorial</a> to get you started.</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/01/26/links-insights-1/</guid>
                <description>
                    
                </description>
                <pubDate>Fri, 26 Jan 2018 20:10:07 -0600</pubDate>
                <author>Gabriel Weyer</author>
            </item>
        
    
        
            <item>
                <title>Capture network packets with netsh</title>
                <link>https://gabrielweyer.net/2016/07/16/capture-network-packets-with-netsh/</link>
                <content:encoded>
                    <![CDATA[
                    <p>Another day, another “interesting” issue at a customer. After deploying our product we were left with a partially working web application. The product has been developed over many years and is a mix of ASP Classic, Web Forms, MVC and Web API. In this case ASP Classic pages were broken and would throw an error.</p>

<h2 id="ensuring-asp-classic-is-configured-properly">Ensuring ASP Classic is configured properly</h2>

<p>The first step is to ensure that IIS has been configured to execute ASP Classic and this is done easily by adding a dummy ASP page to the web application. After deploying this page I was able to confirm that it was working as expected.</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/5eb3198119bead02649c0fe11d733055.js"> </script>

<p><img src="/assets/2016-07-16-capture-network-packets-with-netsh/dummy-asp.png" alt="dummy-asp" /><!--more--></p>

<h2 id="enabling-failed-request-tracing">Enabling failed request tracing</h2>

<p>The features written in ASP Classic have been written many years ago and the developers didn’t consider logging as a key part of the development process. The end result being that when something goes wrong no logs get written by the application or to the event viewer.</p>

<p>The second step is to turn on the “<strong>Failed Request Tracing Rules</strong>“ and reload the failing page. Internet has a lot of tutorials around this but they’re all missing key steps, I’ll focus on those as you can find everything else easily.</p>

<p>“Failed Request Tracing Rules” will not be available in the IIS Manager if you didn’t turn on the <strong>Tracing</strong> feature in Windows Features:</p>

<p><img src="/assets/2016-07-16-capture-network-packets-with-netsh/tracing.png" alt="tracing" /></p>

<p>Another thing is that multiple sites could be writing traces at the same time. Each site will be writing to a different sub folder suffixed with the site ID:</p>

<p><img src="/assets/2016-07-16-capture-network-packets-with-netsh/site-id.gif" alt="site-id" /></p>

<p>Finally you can copy the log files back to your machine, don’t forget to copy the freb.xsl file too, you’ll then be able to open the XML files in Internet Explorer and look at a human readable representation of the log.</p>

<p><img src="/assets/2016-07-16-capture-network-packets-with-netsh/invalid-authority.png" alt="invalid-authority" /></p>

<p>All ASP Classic pages are calling an API endpoint in order to get a token (long story short: don’t ask - the user is signing-in in an AngularJS app backed by Web API and is then able to use seamlessly the pages hosted on MVC, Web Forms and Classic ASP). What is strange in this situation is that Internet Explorer is marking the TLS certificate as valid, so does Chrome. Even worse: the same ASP Classic page hosted on my machine calling the token endpoint on the remote server is successful! The Windows Certificate Manager is displaying the same message for the root CA, intermediate CA and certificate: ”This certificate is OK.”.</p>

<p>I then suspected the certificate might be using unsupported ciphers but it turned out that it wasn’t the case. I quickly wrote a C# Console application calling the same token endpoint - the HttpClient class is throwing meaningful errors - but to my dismay the C# code was able to call the endpoint successfully!</p>

<p>Armed with the ErrorCode “80072f0d” and the Description “The certificate authority is invalid or incorrect” I scoured Internet for some potential solutions. Everything I could find was related to invalid and self-signed certificates.</p>

<h2 id="capturing-packets-on-a-windows-server">Capturing packets on a Windows Server</h2>

<p>When people think “packet capture” they always assume they need to install <a href="https://www.wireshark.org/">Wireshark</a> (or another similar tool) whereas Windows Server is shipping with the ability to capture network packets with <a href="https://technet.microsoft.com/en-us/library/dd878517(v=ws.10).aspx">netsh</a> since Windows Server 2008 R2. The advantage of this solution is that you don’t need to install anything on the machine. To see if it’s available, all you need to do is open a command prompt and type:</p>

<figure class="highlight"><pre><code class="language-posh" data-lang="posh"><span class="nf">netsh</span><span class="w"> </span><span class="nx">trace</span></code></pre></figure>

<p><img src="/assets/2016-07-16-capture-network-packets-with-netsh/netsh-trace.gif" alt="netsh-trace" /></p>

<p>Now that we know that <strong>trace</strong> is available we need to start capturing the packets and reproduce the problem. Launch an <strong>elevated</strong> command prompt and type:</p>

<figure class="highlight"><pre><code class="language-posh" data-lang="posh"><span class="nf">netsh</span><span class="w"> </span><span class="nx">trace</span><span class="w"> </span><span class="nx">start</span><span class="w"> </span><span class="nx">tracefile</span><span class="o">=</span><span class="s2">"C:\tmp\traces\classic.etl"</span><span class="w"> </span><span class="nf">scenario</span><span class="o">=</span><span class="nf">internetclient</span><span class="w"> </span><span class="nx">capture</span><span class="o">=</span><span class="nf">yes</span><span class="w"> </span><span class="nx">maxsize</span><span class="o">=</span><span class="mi">200</span><span class="w"> </span><span class="nf">filemode</span><span class="o">=</span><span class="nf">circular</span><span class="w"> </span><span class="nx">overwrite</span><span class="o">=</span><span class="nf">yes</span></code></pre></figure>

<p><strong>Note</strong>: the path needs to exist beforehand.</p>

<p><img src="/assets/2016-07-16-capture-network-packets-with-netsh/start-stop.gif" alt="start-stop" /></p>

<p>Starting and stopping the trace is actually slower that what is demonstrated above but I didn’t want lo lose your attention! And of course you would need to reproduce the issue before issuing:</p>

<figure class="highlight"><pre><code class="language-posh" data-lang="posh"><span class="nf">netsh</span><span class="w"> </span><span class="nx">stop</span></code></pre></figure>

<h2 id="microsoft-message-analyzer">Microsoft Message Analyzer</h2>

<p>We now need to analyze this trace and this is done with the <a href="https://technet.microsoft.com/en-us/library/jj649776.aspx">Microsoft Message</a> <a href="https://blogs.technet.microsoft.com/messageanalyzer/">Analyzer</a> (can be downloaded <a href="https://www.microsoft.com/en-au/download/details.aspx?id=44226">here</a>). The Analyzer takes a long time to open the smallest trace but once the trace is loaded you can search quickly.</p>

<p>We’ll first look for an HTTP CONNECT, use this filter:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(HTTP.Method == "CONNECT") And
(HTTP.Uri.Host == "domain.name") And
(HTTP.Uri.Port == "port")
</code></pre></div></div>

<p><img src="/assets/2016-07-16-capture-network-packets-with-netsh/connect.png" alt="connect.png" /></p>

<p>As we can see the CONNECT was successful. Let’s investigate the TLS handshake now, this is handled by the TLS module so all we need to do is filter on this module only:</p>

<blockquote>
  <p>TLS</p>
</blockquote>

<p>This is what was captured when the C# application connected to the token endpoint:</p>

<p><img src="/assets/2016-07-16-capture-network-packets-with-netsh/c-sharp-tls.png" alt="c-sharp-tls" /></p>

<p>This is matching closely what is described in the <a href="https://tools.ietf.org/html/rfc5246#page-36">RFC 5246</a> (TLS 1.2).</p>

<p><img src="/assets/2016-07-16-capture-network-packets-with-netsh/full-handshake.png" alt="full-handshake" /></p>

<p>Let’s now capture the traffic when the VB code is trying to call the token endpoint.</p>

<p><img src="/assets/2016-07-16-capture-network-packets-with-netsh/vb-tls.png" alt="vb-tls.png" /></p>

<p>Great Scott! The server is sending <code class="language-plaintext highlighter-rouge">ServerHello</code> as expected but the client doesn’t reply with <code class="language-plaintext highlighter-rouge">ClientKeyExchange</code>. I then removed the filter and started to look at the messages below. My reasoning was that I should be finding some kind of error message soon after and here it was:</p>

<p><img src="/assets/2016-07-16-capture-network-packets-with-netsh/browsing-messages.png" alt="browsing-messages" /></p>

<p>The error message was:</p>

<blockquote>
  <p>A certificate chain processed, but terminated in a root certificate which is not trusted by the trust provider. (0x800B0109)</p>
</blockquote>

<p>As it turned out someone had messed up with the certificate store and removed the intermediate CA from the “Intermediate Certification Authorities”. As the root CA was still present in the “Trusted Root Certification Authorities” it was good enough for Internet Explorer and C# but it wasn’t for VB! I added the intermediate CA to the store and things started to work again.</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2016/07/16/capture-network-packets-with-netsh/</guid>
                <description>
                    
                    Troubleshoot a broken Certification Authority with netsh.
                    
                </description>
                <pubDate>Sat, 16 Jul 2016 04:20:07 -0500</pubDate>
                <author>Gabriel Weyer</author>
            </item>
        
    
        
            <item>
                <title>beIN SPORTS CONNECT</title>
                <link>https://gabrielweyer.net/2016/06/13/bein-sports-connect/</link>
                <content:encoded>
                    <![CDATA[
                    <p>I like football, even with the time difference I try to watch at least the World Cup and the European Championship. I watched the last World Cup on <a href="http://www.sbs.com.au/">SBS</a> but this time around they only managed to secure a handful of games. As they’re a public service it makes sense after all that they wouldn’t buy the rights for all the games. A quick search on Google indicated that <a href="http://www.beinsportsconnect.com.au/home">beIN SPORTS CONNECT</a> is the way to go in Australia - I will refer to this service as beIN for the rest of this post.</p>

<h1 id="subscribing">Subscribing</h1>

<p>As the pricing seems reasonable I decided to go ahead. The page is loaded over HTTPS so we start well but to my surprise the form contains a <strong>password remainder</strong> field. Password remainders are a bad practice as users tend to fill them with their password (when allowed) or with a hint that is an obvious give away.<!--more--></p>

<p>As I don’t know any of my password, a password reminder is useless to me so I always generate a strong unique random password for this field. After trying to submit the form I got the following error:</p>

<p><img src="/assets/2016-06-13-bein-sports-connect/password-remainder.png" alt="password-remainder" /></p>

<p>I don’t understand the benefits of restricting the characters I can use. On the contrary it seems to indicate this site is potentially vulnerable to <a href="https://www.troyhunt.com/understanding-xss-input-sanitisation/">XSS</a>. I generate another reminder without “special” characters and get presented with another error:</p>

<p><img src="/assets/2016-06-13-bein-sports-connect/invalid-format.png" alt="invalid-format" /></p>

<p>So my valid email address is in an “Incorrect format”. How convenient should they ever decide to sell my data to a third party without me being able to track it back to them.</p>

<p>I start to have a bad feeling about the password requirements. After all the only one that is stated is that my password should be at least 6 characters. I decide to use “123456” and also use it as the password reminder. <strong>&lt;clickbait&gt;</strong>You won’t believe what happens next!<strong>&lt;/clickbait&gt;</strong>. Actually I’m sure you knew what would happen: the form happily accepted my password and let me reuse it in the reminder field. Well at least I “<em>can access the site</em> <strong>securely</strong>” (emphasis is mine).</p>

<p><img src="/assets/2016-06-13-bein-sports-connect/123456.png" alt="123456" /></p>

<p>One last thing before we move on to the dessert. Does it seem normal to be loading so many third party JavaScript files on a registration page? They’re even loading ads and we know what malicious ads do to your browser and it’s not kind (malware installation, credentials theft…).</p>

<p><img src="/assets/2016-06-13-bein-sports-connect/do-you-need-ads-on-signup.png" alt="do-you-need-ads-on-signup.png" /></p>

<h1 id="sign-inform-loaded-over-http">Sign-in form loaded over HTTP</h1>

<p>Yes you read that right. Even though the form is POSTing to HTTPS by then it is <a href="https://www.troyhunt.com/your-login-form-posts-to-https-but-you/">too late</a>. An attacker could have already intercepted the initial HTTP response and pointed the form to the URL of his choosing.</p>

<p>Sometimes websites still offer sign-in over HTTPS when you look for it but it doesn’t seem to be the case here.  <a href="https://secure.beinsportsconnect.com.au/">https://secure.beinsportsconnect.com.au/</a> redirects to <a href="http://www.beinsportsconnect.com.au/">http://www.beinsportsconnect.com.au/</a> and trying to access <a href="https://www.beinsportsconnect.com.au/">https://www.beinsportsconnect.com.au/</a> results in something you should never see:</p>

<p><img src="/assets/2016-06-13-bein-sports-connect/bein-loaded-over-https.png" alt="bein-loaded-over-https.png" /></p>

<h1 id="conclusion">Conclusion</h1>

<p>If you’re already using beIN or are planning on starting to use it at least generate a unique password so that when they get compromised attackers will not gain access to your account on other services.</p>

<p>I understand going all HTTPS would require a tremendous amount of work but beIN could first take some other steps that would make a big difference:</p>

<ul>
  <li>Remove the password reminder altogether</li>
  <li>Provide a dedicated HTTPS only sign-in page</li>
  <li>Stop loading third-party ads on the sign-in page</li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2016/06/13/bein-sports-connect/</guid>
                <description>
                    
                    beIN has pretty poor security practices.
                    
                </description>
                <pubDate>Mon, 13 Jun 2016 05:46:32 -0500</pubDate>
                <author>Gabriel Weyer</author>
            </item>
        
    
        
            <item>
                <title>CodeCleanser</title>
                <link>https://gabrielweyer.net/2016/06/03/codecleanser/</link>
                <content:encoded>
                    <![CDATA[
                    <p>Recently I came up with an interesting issue at a customer. A governmental agency contacted us and informed us that due to a Windows update we could experience intermittent issue when trying to communicate with them. All I knew at this stage was that the issue would manifest itself when trying to upload a document and that the integration is done via DLLs that are wrapping a few web services.</p>

<p>After <a href="https://www.jetbrains.com/help/decompiler/2016.1/Generating_PDB_Files.html">generating PDBs</a> via <a href="https://www.jetbrains.com/decompiler/">dotPeek</a> and adding them to the Visual Studio symbol cache directory I was able to debug through those third party DLLs and confirm that the issue was indeed located in one of them.</p>

<p>Knowing the DLL is redistributed with the product, is in multiple production versions and that the source control’s history is pretty patchy, the question then become: <strong>if we were to get a new DLL could we use it for all the versions?</strong></p>

<p>To answer this question we will have to assess the differences between the DLL in each version.<!--more--></p>

<h1 id="first-naive-attempt-checksum">First naive attempt: checksum</h1>

<p>Windows ships with a few ways to compute a checksum, <a href="http://superuser.com/a/898377/128002">CertUtil</a> is one of them, PowerShell has a <a href="https://technet.microsoft.com/en-us/library/dn520872.aspx">Get-FileHash</a> cmdlet and this is what I’ll use:</p>

<figure class="highlight"><pre><code class="language-posh" data-lang="posh"><span class="nf">Get-FileHash</span><span class="w"> </span><span class="err">&lt;</span><span class="nx">filepath</span><span class="err">&gt;</span><span class="w"> </span><span class="nt">-Algorithm</span><span class="w"> </span><span class="nx">MD5</span></code></pre></figure>

<p>For our purpose MD5 is good enough, if you want to ensure that a file hasn’t been tampered with you should be using SHA256 at least.</p>

<p>Sadly the three checksums for the three versions were different. But it doesn’t mean the DLLs are semantically different. It could have been metadata, different .NET Framework versions…</p>

<p>At this stage I could have used <a href="https://msdn.microsoft.com/en-us/library/f7dy01k1(v=vs.110).aspx">Ildasm</a> to try to diff the full source code in one file but according to my previous tries the output end up being different. For sake of completeness I tried again before writing this blog post.</p>

<figure class="highlight"><pre><code class="language-posh" data-lang="posh"><span class="nf">ildasm</span><span class="w"> </span><span class="err">&lt;</span><span class="nx">dll-filepath</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">/text</span><span class="w"> </span><span class="nx">/out</span><span class="o">=</span><span class="err">&lt;</span><span class="nf">output-filepath</span><span class="err">&gt;</span></code></pre></figure>

<p>This time is no exception, WinMerge indicates 348 differences! Some of them can be explained away:</p>

<p><a href="/assets/2016-06-04-codecleanser/different-dot-net-version.png"><img src="/assets/2016-06-04-codecleanser/different-dot-net-version.png" alt="different-dot-net-version" /></a></p>

<p>The assemblies have been compiled using different version of the .NET Framework, which makes sense as many years separate those two versions.</p>

<p>Next comes an interesting piece of information that explains why two builds of the same source code always result in two different DLLs:</p>

<p><a href="/assets/2016-06-04-codecleanser/mvid-image-base.png"><img src="/assets/2016-06-04-codecleanser/mvid-image-base.png" alt="mvid-image-base.png" /></a></p>

<p>The <a href="https://msdn.microsoft.com/en-us/library/system.reflection.module.moduleversionid(v=vs.110).aspx">MVID</a> changes at every single build, for our purpose we can safely ignore this difference, same goes for the Image base. The other differences are more worrying:</p>

<p><a href="/assets/2016-06-04-codecleanser/different-attributes.png"><img src="/assets/2016-06-04-codecleanser/different-attributes.png" alt="different-attributes.png" /></a></p>

<p>It looks like the Attributes are the same but in a different order. There are hundreds of such instances and as IL is harder to read than C# it’s time to move on to another strategy.</p>

<h1 id="plan-b-generate-a-project-via-dotpeek">Plan B: generate a project via dotPeek</h1>

<p>dotPeek can not only decompile IL to C#, it also can <a href="https://www.jetbrains.com/help/decompiler/2016.1/Exporting_Assembly_to_Project.html">generate a project from a DLL</a>. Let’s give it a spin and close this case!</p>

<p>According to WinMerge, every single file is different! Now I’m a sad panda :(, how could the C# differ even more than the IL? This is due to the fact that as a <em>convenience</em>, dotPeek kindly outputs the MVID and the assembly location at the top of each file:</p>

<p><a href="/assets/2016-06-04-codecleanser/dotpeek-mvid-assembly-location.png"><img src="/assets/2016-06-04-codecleanser/dotpeek-mvid-assembly-location.png" alt="dotpeek-mvid-assembly-location" /></a></p>

<p>In our use case, this is rather inconvenient. Luckily WinMerge has a feature called <a href="http://stackoverflow.com/a/22178182/57369">LineFilters</a> which allows to ignore lines based on Regular Expressions. Two filters later a lot of files are still different:</p>

<p><a href="/assets/2016-06-04-codecleanser/win-merge.png"><img src="/assets/2016-06-04-codecleanser/win-merge.png" alt="win-merge.png" /></a></p>

<p>It’s now confirmed, some attributes are in a different order! dotPeek has an <a href="https://youtrack.jetbrains.com/issue/DOTP-7063">opened bug</a> regarding this but it hasn’t been updated since October 2015 so we can assume it won’t be fixed anytime soon. By then I already spent 30 minutes on this task and being a consultant I can’t justify spending more time trying to find a (mostly) automated solution. I might be able to pull it off with a Regex but it might also turn to be a rabbit hole. According to the number of different files and hoping it would only be about attributes ordering it should take me less than an hour to go through the difference. It actually only took me 30 minutes and confirmed the assumption that only the order of the attributes was differing.</p>

<h1 id="enter-codecleanser">Enter CodeCleanser</h1>

<p>Fast forward two days, it’s Saturday morning and I’m wondering if I can use <a href="https://github.com/dotnet/roslyn">Roslyn</a> to solve this problem.</p>

<p>I had 3 objectives:</p>

<ol>
  <li>Get rid of the comments at the top of the file</li>
  <li>Sort Attributes by alphabetical order</li>
  <li>Wrap up before training</li>
</ol>

<p>The source code is available <a href="https://github.com/gabrielweyer/CodeCleanser">here</a>, feel free to use it and adapt it to your own needs.</p>

<h2 id="get-rid-of-the-comments-at-the-top-of-the-file">Get rid of the comments at the top of the file</h2>

<p>Let’s start by what seems the easiest: removing the comments at the top of the files. What’s very nice with Roslyn is that you don’t need an actual file, you can pass a string as an argument which makes unit testing very easy. As I’m only planning on doing cosmetic changes and I only care about comparing the two DLLs I don’t need to operate at a project or solution level.</p>

<p>Following the TDD principles I’ll first write a <a href="https://github.com/gabrielweyer/CodeCleanser/blob/4b7b769bdf104461decc7db0f6ce46a890de4351/Tests/RemoveLeadingTriviaTests.cs#L8-L55">test</a>:</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/b6aaa2c60ba20f8340d32edd4ff87265.js"> </script>

<p>This test ensures that everything before the first using statement is removed. Let’s now look at the <a href="https://github.com/gabrielweyer/CodeCleanser/blob/4b7b769bdf104461decc7db0f6ce46a890de4351/Logic/CodeCleaner.cs#L39-L47">implementation</a>:</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/ac0976203a5315f16e1bac81963a6a8b.js"> </script>

<p>The Roslyn documentation defines a <a href="https://github.com/dotnet/roslyn/wiki/Roslyn%20Overview#syntax-trivia">trivia</a> as:</p>

<blockquote>
  <p>Syntax trivia represent the parts of the source text that are largely insignificant for normal understanding of the code, such as whitespace, comments, and preprocessor directives.</p>
</blockquote>

<p>All the code is doing is replace each leading trivia with an empty trivia. I’m sure there is a better way of doing this but this works well enough for my purpose.</p>

<h2 id="sort-attributes-by-alphabetical-order">Sort Attributes by alphabetical order</h2>

<p>Again we’ll start with a <a href="https://github.com/gabrielweyer/CodeCleanser/blob/4b7b769bdf104461decc7db0f6ce46a890de4351/Tests/SortAttributesAlphabeticallyTests.cs#L8-L51">test</a>:</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/786db1ecb44c689ce18532cda794f0f7.js"> </script>

<p>We’ll need to pack a bit more power this time. In my case the issue only happened on class, enum and property declarations, CSharpSyntaxRewriter seems to be a good candidate for what I want to achieve. The implementation can be found <a href="https://github.com/gabrielweyer/CodeCleanser/blob/4b7b769bdf104461decc7db0f6ce46a890de4351/Logic/AttributesSorter.cs#L46-L66">here</a>:</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/2daec819f25eca2679174c08985b599e.js"> </script>

<p>I had to make sure the blank line preceding the first attribute didn’t get moved down and that’s why there is some logic around leading trivia (prompted by this <a href="https://github.com/gabrielweyer/CodeCleanser/blob/4b7b769bdf104461decc7db0f6ce46a890de4351/Tests/SortAttributesAlphabeticallyTests.cs#L180-L219">test</a>). Initially I was storing the AttributeListSyntax in a dictionary using the first attribute name as a key, of course I forgot that you could have the same attribute multiple time on a single declaration. It prompted me to write this <a href="https://github.com/gabrielweyer/CodeCleanser/blob/4b7b769bdf104461decc7db0f6ce46a890de4351/Tests/SortAttributesAlphabeticallyTests.cs#L53-L9">test</a>) and adapt my implementation. It took me a few tries to get it right and rather than having to replace the files after each attempt I created a local Git repository, committed the unmodified files and issued a git reset after each attempt.</p>

<p>After running CodeCleanser on the three DLLs I was able to confirm they were identical.</p>

<h1 id="plot-twist">Plot twist</h1>

<p>I contacted the governmental agency and asked them if they could provide us with the new version of their DLL. To my surprise they told me that they’re distributing source code only. Sure enough after a few Git commands I discovered we had the code under source control all along! Funnily enough nobody knew about it and it wouldn’t have helped anyway as history only go two years back.</p>

<h1 id="takeaways">Takeaways</h1>

<p>The main takeaway is that everything is immutable in Roslyn. I kept forgetting that Add and AddRange would return a new AttributeListSyntax instead of performing an in place Add. As those methods have not been marked as Pure, ReSharper would not warm me that I didn’t use the return type and I would end up with an empty AttributeListSyntax. After 10 seconds of debugging I would exclaim “I’m an idiot” every single time, never gets old! Roslyn has changed a lot between the different Release Candidates and many code sample from Internet won’t compile.</p>

<p>During my research I found <a href="https://roslynquoter.azurewebsites.net/">https://roslynquoter.azurewebsites.net/</a>, it takes C# as an input and writes out the Roslyn code that will generate it.</p>

<p>I realize CodeCleanser doesn’t do much and the whole comparing process still requires some manual steps but I hope it can help someone else.</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2016/06/03/codecleanser/</guid>
                <description>
                    
                    A tool whose purpose is to transform C# generated from a DLL so that it can then be determined if two DLLs are semantically identical.
                    
                </description>
                <pubDate>Fri, 03 Jun 2016 19:41:48 -0500</pubDate>
                <author>Gabriel Weyer</author>
            </item>
        
    
        
            <item>
                <title>Barnes and Noble: a tale of poor security practices</title>
                <link>https://gabrielweyer.net/2014/12/07/barnes-and-noble-a-tale-of-poor-security-practices/</link>
                <content:encoded>
                    <![CDATA[
                    <p>Being the happy owner of a Kindle I usually buy my ebooks on Amazon. They have a very large selection to choose from and normally sell all the latest releases. To my surprise they only had “<a href="(http://us.macmillan.com/enigmaofchina/qiuxiaolong)">Enigma of China</a>” from Qiu Xialong in paperback and hardcover formats. <a href="http://store.kobobooks.com/en-US/Search/Query?query=Enigma%20of%20China&amp;dontModifyQuery=True">Kobo</a> didn’t have it at all but after searching for a while I found out that Barnes &amp; Noble sold it as a <a href="http://www.barnesandnoble.com/w/enigma-of-china-qiu-xiaolong/1114701902?ean=9781250025814">NOOK Book</a> for $10.</p>

<p>So far, so good or so it seemed. It turned out that Barnes &amp; Noble has such a lax approach of security that at the end I decided not to purchase from them. You’ll find below the reasons that motivated my decision.<!--more--></p>

<h2 id="i-sign-in-and-registration-in-a-new-window">I Sign in and registration in a new window</h2>

<p>The first issue made itself apparent very quickly: when clicking on the “Sign in” link the browser will open a new window. This new window does not contain a toolbar, which means that users won’t be able to use some password managers (such as 1Password, the Chrome extension being accessible through a button in the toolbar).</p>

<p>I know that you can work around it as the <a href="https://www.barnesandnoble.com/signin">Sign in</a> page is also available directly on the website. You can also use the shortcut “Ctrl + " within the new window in order to enter your credentials via 1Password but I don’t think that everybody is a power user. Basically opening a new window instead of loading a page creates extra-friction when using a password manager.</p>

<p>Of course the registration page is also located in a new window and within this page things got even more interesting!</p>

<h2 id="ii-mixed-content-warning">II Mixed content warning</h2>

<p>As they’re loading a dedicated sign in page, you would expect Barnes &amp; Noble to use SSL properly. As it turned out the source code contains a link to an HTTP iframe. Chrome (rightly so) blocks the content and displays a warning:</p>

<p><a href="/assets/2014-12-07-barnes-and-noble-a-tale-of-poor-security-practices/barnes-and-noble-sign-in-mixed-content-warning.png"><img src="/assets/2014-12-07-barnes-and-noble-a-tale-of-poor-security-practices/barnes-and-noble-sign-in-mixed-content-warning.png" alt="Sign in: mixed content warning" /></a></p>

<p>The most interesting part is that the tracking page is also available via <a href="https://4476037.fls.doubleclick.net/activityi;cat=signi0;ord=1641192771;src=4476037;type=signi0?">SSL</a>. The sign in page being loaded only over SSL, the link could have been hardcoded as SSL too.</p>

<h2 id="iii-weak-password-policy">III Weak password policy</h2>

<p>So Barnes and Noble decided to limit the number of characters I can use in my password to 15. Not only this but they’re also preventing me from using any special characters. I’m not sure what “<em>numeric symbol</em>” means, some special characters might be allowed but as a user I’ve no idea which one I can use.</p>

<p><a href="/assets/2014-12-07-barnes-and-noble-a-tale-of-poor-security-practices/barnes-and-noble-password-policy.png"><img src="/assets/2014-12-07-barnes-and-noble-a-tale-of-poor-security-practices/barnes-and-noble-password-policy.png" alt="Barnes &amp; noble: password policy" /></a></p>

<p>It’s quite strange that the security answer is limited to 15 characters, what if my favorite movie is “<a href="http://www.imdb.com/title/tt0111161/">The Shawshank Redemption</a>)”? Security questions are a terrible practice anyway as people tend to use easily guessable answers (as you can see in the screenshot I get my password manager to generate one for me).</p>

<h2 id="iv-mixed-content-warning-on-payment-page">IV Mixed content warning on payment page</h2>

<p>Even the payment page comes with a shiny warning:</p>

<p><a href="/assets/2014-12-07-barnes-and-noble-a-tale-of-poor-security-practices/barnes-and-noble-payment-mixed-content-warning.png"><img src="/assets/2014-12-07-barnes-and-noble-a-tale-of-poor-security-practices/barnes-and-noble-payment-mixed-content-warning.png" alt="Barnes &amp; Noble: payment mixed content warning" /></a></p>

<p>This is due to the fact that the search form is posting to an <a href="http://www.barnesandnoble.com/s/Enigma-of-China?store=allproducts&amp;keyword=Enigma+of+China">HTTP endpoint</a> even when the page is loaded over SSL.</p>

<p>At this stage I decided to give up, buying this book is not worth taking the risk of exposing my credit card data.</p>

<h2 id="special-bonus-credit-card-number-used-in-the-drm">Special bonus: credit card number used in the DRM</h2>

<p>Barnes and Noble decided to protect its content via the highly controversial use of a <a href="http://en.wikipedia.org/wiki/Digital_rights_management">DRM</a> system (Amazon has made the same choice). The goal is to prevent the consumer from sharing it’s purchase with any other user. Of course DRM don’t work and they’re only being a major annoyance to the people actually paying for content.</p>

<p>What is unusual is that Barnes and Noble decided that it would use your <strong>credit card number</strong> in order to sign the DRM. This means that this data is included with your ebooks and could potentially be extracted.</p>

<h2 id="how-could-barnes--noble-address-those-issues">How could Barnes &amp; Noble address those issues?</h2>

<p>Instead of opening a new window for sign in and registration the site should merely link to a new page. As a matter of fact they already have them in place: <a href="https://www.barnesandnoble.com/signin">sign in</a> and <a href="https://www.barnesandnoble.com/register">registration</a>.</p>

<p>They should also link to the SSL URL of the DoubleClick script on their sign in and registration page.</p>

<p>Passwords should not be restricted in terms of character set or length. If you really want to have an upper limit it should be set to something ridiculously high (such as 100 characters). In fact they should instead enforce stronger passwords (combination of letters, numbers and symbols).</p>

<p>The payment should be on a page of its own and not use the same layout (I don’t think that users need to be able to look for a book while entering their credit card details).</p>

<p>And please stop encoding my credit card number into the books I’m buying from you. If you’re afraid I’ll remove your precious DRM and share the book on Internet there is nothing preventing you to use a unique string linked to my account.</p>

<p>Some of those points are extremely easy to address (new page for sign in and registration, SSL URL for the tracking script), others will certainly be more challenging but are nevertheless necessary.</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2014/12/07/barnes-and-noble-a-tale-of-poor-security-practices/</guid>
                <description>
                    
                    Barnes &amp; Noble has a pretty lax approach of security.
                    
                </description>
                <pubDate>Sun, 07 Dec 2014 00:16:14 -0600</pubDate>
                <author>Gabriel Weyer</author>
            </item>
        
    
        
            <item>
                <title>The Good, the Bad and the Ugly of password practices</title>
                <link>https://gabrielweyer.net/2014/04/27/the-good-the-bad-and-the-ugly-of-password-practices/</link>
                <content:encoded>
                    <![CDATA[
                    <p>Internet has taken a preponderant place in our lives and most of us regularly purchase goods on Internet or use Internet banking. The access to the services we use is protected by a password and humans are not good at managing passwords:</p>

<ul>
  <li>Most of us will reuse the same password on many services (combine this with the fact that people also use the same email address to log in into said services and you get an explosive mix when security is breached on one <a href="http://www.geekosystem.com/gawker-hack-acai-spam-twitter/">service</a>).</li>
  <li>Most of us will use weak passwords, basically as weak as the service will allow. Not only our passwords are weak they’re also extremely <a href="https://www.duosecurity.com/blog/brief-analysis-of-the-gawker-password-dump">predictable</a>.</li>
</ul>

<p>To address those issues you need to use <strong>strong unique</strong> passwords. By <strong>strong</strong> I mean that your passwords should be:</p>

<ul>
  <li>long (let’s say at least 25 characters)</li>
  <li>a mix of lower / upper case letters, digits and symbols</li>
  <li>randomly generated (by a random generator not by you typing random keys on your keyboard)</li>
</ul>

<p>By <strong>unique</strong> I mean that you should <em>never</em> reuse a password. You should set a different password on each service. As we tend to use many services and tend to log in from multiple devices (home and work computers, smartphones, tablets..) it makes it impossible to remember all those strong passwords.</p>

<p>Google has <a href="https://www.youtube.com/watch?v=0RCsHJfHL_4">recommended</a> the use of sentence and substitution, something even stronger has been advocated by <a href="http://xkcd.com/936/">xkcd</a>. But this doesn’t work. I use over a hundred different services, how could I remember a hundred different sentences? Common substitutions (the one you will use) are also well documented and will be attempted by the attackers to guess your password. Other experts have advised to <a href="https://medium.com/cyber-security/9ed56d483eb">get rid of passwords</a> altogether, but this opinion is unconventional to say the least.</p>

<p>Want it or not we’re stuck with passwords for the  predictable future. Luckily there is a solution: it’s called a password manager. With a password manager you’ll only need to remember one password (the master password), all the other ones will be entered automatically for you in the login forms. I use <a href="https://agilebits.com/onepassword">1Password</a>, but there are other products on the market: <a href="https://lastpass.com/">LastPass</a>, <a href="http://keepass.info/">KeePass</a>, <a href="http://www.roboform.com/">RoboForm</a>… Most of those products are not free but I’m sure you’ll prefer to drop a few dozens dollars every few years instead of seeing your online (and sometimes offline) life ruined.</p>

<p>Now that I’ve addressed password best practices on the users’ side it’s time to mention the other side. The services that you use should do everything they can in order to protect your password. There is a <a href="http://www.troyhunt.com/2011/06/owasp-top-10-for-net-developers-part-7.html">lot</a> to say in this area but I decided to address the features that are easily observable:</p>

<ul>
  <li>passwords requirements: services shouldn’t restrict the length of our passwords (at least not smaller than a few dozens characters) or the characters’ set that we can use (this would reduce the entropy)</li>
  <li><a href="http://www.troyhunt.com/2013/05/your-login-form-posts-to-https-but-you.html">proper use of HTTPS</a></li>
  <li><a href="http://www.troyhunt.com/2012/05/everything-you-ever-wanted-to-know.html">reset password feature</a></li>
</ul>

<p>Due to the <a href="http://heartbleed.com/">Heartbleed</a> vulnerability I decided to change some of my passwords recently. To my surprise many well known services impose some strong restrictions on the passwords users can set. Shall we get started? The offenders are ordered from worst ones to the most benign ones.<!--more--></p>

<h2 id="the-ugly">The ugly</h2>

<blockquote>
  <p>Use at your own risk. Most of those services do not use HTTPS properly or force you to choose passwords that are easily guessable.</p>
</blockquote>

<ul>
  <li><a href="http://www.airfrance.fr/cgi-bin/AF/FR/en/common/home/home/HomePageAction.do">Air France</a></li>
</ul>

<p>Not only Air France is loading the login form over HTTP, the password policy they enforce is a 4 digits PIN!</p>

<ul>
  <li><a href="https://www.caisse-epargne.fr/particuliers/ile-de-france/accueil.aspx">Caisse d’Epargne</a></li>
</ul>

<p>One of the biggest French bank, forcing its users to use a 5 digits PIN as a password (and the login is the account number which is a semi-public information).</p>

<ul>
  <li><a href="http://weibo.com/">Weibo</a></li>
</ul>

<p>The service logs users in over HTTP and limiting the password length to 16 characters.</p>

<ul>
  <li><a href="http://doodle.com/en/">Doodle</a></li>
</ul>

<p>The service logs users in over HTTP! According to <a href="http://en.blog.doodle.com/2014/04/10/important-security-news-from-doodle/">them</a>, they updated their system to patch the vulnerability. Of course as they don’t use HTTPS they were never vulnerable to this specific vulnerability in the first place.</p>

<h2 id="the-bad">The bad</h2>

<blockquote>
  <p>Use with caution. Those services are not getting security, they’re exposing your passwords in clear via email.</p>
</blockquote>

<ul>
  <li><a href="https://uberstrike.com/">UberStrike</a></li>
</ul>

<p>The service is currently using an expired certificate. When changing your password you’ll receive an email containing your new password in clear (and stating “We’ve reset your UberStrike password” [<em>sic</em>]).</p>

<p><a href="/assets/2014-04-27-the-good-the-bad-and-the-ugly-of-password-practices/uberstrike-change-password.png"><img src="/assets/2014-04-27-the-good-the-bad-and-the-ugly-of-password-practices/uberstrike-change-password.png" alt="uberstrike-change-password" /></a></p>

<ul>
  <li><a href="https://ielts.britishcouncil.org/CandidateLogin.aspx">IELTS</a></li>
</ul>

<p>The service does not allow you to change your password. This password is in fact your reference number that you need to use in every communication with IELTS’ staff.</p>

<ul>
  <li><a href="https://www.astrill.com/">Astrill</a></li>
</ul>

<p>Astrill provide VPN services and allow (among other things) to access blocked websites from Mainland China. A VPN also prevents attackers from listening to your traffic. This service is mainly about security and so you would expect them to have pretty good practices in terms of passwords. It turns out that if you’re not currently a paying customer you can’t change your password. Even worse the support staff does not have the ability to delete your account and will instead send you a new password in clear via email (you can read the full conversation <a href="/assets/2014-04-27-the-good-the-bad-and-the-ugly-of-password-practices/astrill-change-password.png">here</a>)!</p>

<p><a href="/assets/2014-04-27-the-good-the-bad-and-the-ugly-of-password-practices/astrill-reset-password1.png"><img src="/assets/2014-04-27-the-good-the-bad-and-the-ugly-of-password-practices/astrill-reset-password1.png" alt="astrill-reset-password" /></a></p>

<ul>
  <li><a href="https://depot-marque.inpi.fr/index.html">INPI</a></li>
</ul>

<p>This is the French department in charge of registering patents and trademarks. When creating an account they’re kind enough to send you your password via email in clear. At least they’re deleting inactive accounts after three months.</p>

<p><a href="/assets/2014-04-27-the-good-the-bad-and-the-ugly-of-password-practices/inpi-create-account.png"><img src="/assets/2014-04-27-the-good-the-bad-and-the-ugly-of-password-practices/inpi-create-account.png" alt="inpi-create-account" /></a></p>

<h2 id="the-almost-good">The (almost) good</h2>

<blockquote>
  <p>In this category you’ll find the offenders that almost got it right. But their policies are not good enough to get them off the hook. It’s all related to the maximal length of passwords and the allowed symbols.</p>
</blockquote>

<ul>
  <li><a href="http://us.battle.net/en/">Battle.net</a></li>
</ul>

<blockquote>
  <p>Your password must be between 8–16 characters in length. Your password may only contain alphabetic characters (A–Z), numeric characters (0–9), and punctuation.</p>
</blockquote>

<p>Blizzard has been battling accounts hijacking for years. A better password policy would certainly help protect the accounts of their users.</p>

<ul>
  <li><a href="http://www.free.fr/adsl/index.html">Free</a></li>
</ul>

<blockquote>
  <p>Your password can’t be longer than 16 characters. Characters are restricted to a-z, A-Z, 0-9, #$,;.:*@[]()?+=-_%</p>
</blockquote>

<ul>
  <li><a href="https://www.mymyki.com.au/NTSWebPortal/Common/getmyki/GetMykiOption.aspx?menu=Get%20myki">Myki</a></li>
</ul>

<blockquote>
  <p>Your password can’t be longer than 15 characters.</p>
</blockquote>

<ul>
  <li><a href="http://www.optus.com.au/">Optus</a></li>
</ul>

<blockquote>
  <p>Your password can’t be longer than 15 characters.</p>
</blockquote>

<ul>
  <li><a href="https://www.commbank.com.au/">Commonwealth Bank</a></li>
</ul>

<blockquote>
  <p>8 and 16 characters long. can contain most characters except &lt;&gt;^`{}~=</p>
</blockquote>

<p>The 16 characters limit is completely unacceptable coming from a bank!</p>

<ul>
  <li><a href="http://www.microsoft.com/en-au/default.aspx">Microsoft</a></li>
</ul>

<blockquote>
  <p>Your password can’t be longer than 16 characters.</p>
</blockquote>

<p>This is the biggest company present in this list and it’s quite disappointing coming from an enterprise software company. Microsoft accounts are also used by businesses to access Azure, MSDN…</p>

<ul>
  <li><a href="http://www.originenergy.com.au/">Origin</a></li>
</ul>

<p>The energy company in Australia (not the gaming service operated by EA).</p>

<p>Not only you can’t use symbols but also the password length is limited to 20 characters. Origin only allows you to change your password once per 24 hours, I’ve no idea why this is the case on how it can make the service more secure.</p>

<ul>
  <li><a href="http://en.voyages-sncf.com/en/">SNCF</a></li>
</ul>

<blockquote>
  <p>Password must only contain numbers and/or letters. The length should not be bigger than 25 characters.</p>
</blockquote>

<ul>
  <li><a href="http://www.renren.com/">RenRen</a></li>
</ul>

<p>RenRen is limiting the password length to 20 characters.</p>

<ul>
  <li><a href="http://www.viadeo.com/">Viadeo</a></li>
</ul>

<blockquote>
  <p>Your password can’t be longer than 20 characters.</p>
</blockquote>

<ul>
  <li><a href="https://btguard.com/">BTGuard</a></li>
</ul>

<p>The service prevents you from using symbols altogether:</p>

<blockquote>
  <p>Password must only contain numbers and/or letters.</p>
</blockquote>

<ul>
  <li><a href="https://my.gov.au/">myGov</a></li>
</ul>

<p>This website allows Australians to manage their social benefits (medicare, Centrelink, child support…). The service has a pretty good policy but restricts you from using certain symbols:</p>

<blockquote>
  <p>You can strengthen your password by including a mixture of upper and lower case letters, numbers, and the following special characters: !, @, #, $, %, ^, &amp;, *.</p>
</blockquote>

<ul>
  <li><a href="http://wordpress.com/">WordPress</a></li>
</ul>

<blockquote>
  <p>ERROR: Passwords may not contain the character “\”.</p>
</blockquote>

<p>This is a minor violation as WordPress is only preventing us from using a single symbol and this is why the service sits at the last position of this list.</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2014/04/27/the-good-the-bad-and-the-ugly-of-password-practices/</guid>
                <description>
                    
                    Name calling services with poor password policies.
                    
                </description>
                <pubDate>Sun, 27 Apr 2014 04:17:31 -0500</pubDate>
                <author>Gabriel Weyer</author>
            </item>
        
    
        
            <item>
                <title>Why You Should Not Use Chrome Extensions</title>
                <link>https://gabrielweyer.net/2014/01/07/why-you-should-not-use-chrome-extensions/</link>
                <content:encoded>
                    <![CDATA[
                    <p>Google Chrome Extensions have been <a href="http://en.wikipedia.org/wiki/Google_Chrome#Extensions">launched</a> officially in January 2010. Their goal is to extend the browser by providing additional features, for example you could add a weather extension and then be able to see the weather’s forecast in your city in one click. Extensions have become widely popular and you’re now wondering what could be the issue with them.</p>

<h1 id="much-more-power-than-expected">Much more power than expected</h1>

<p>Google <a href="/assets/2014-01-07-why-you-should-not-use-chrome-extensions/ads-13.png">uses</a> a system of <a href="https://support.google.com/chrome_webstore/answer/186213?hl=en&amp;rd=1">permissions</a> to determine what an extension will be able to do once installed. Those permissions are divided into three alert levels: high, medium and low. So far, so good? Not really, even the low level allows an extension to harvest your browsing history and the content of your clipboard.</p>

<p>Extensions are built using JavaScript and HTML. Those are the exact same technologies used on websites. I’m sure you’re aware how modern websites refresh part of their content without reloading the whole page. Extensions can do this too: nothing is preventing a low level alert extension to detect that you’re pasting your email and password on Facebook in order to login. Then the extension can send the collected information to a remote server.</p>

<p>In this case the exploit is fairly limited, you need the user to be copying / pasting the email and password for this to work (the extension would also collect everything that the user is copying and pasting). Whats about the medium and high level alert? This is where the real fun start, at this level of trust extensions can do whatever they want!</p>

<p>A medium alert level extension can generate HTML elements on a page. It could perfectly hide a login form, replace it by it’s own, harvest your credentials and submit the hidden login form. A high alert level extension can do similar things but on your computer! This means that it could take your picture via your webcam, browse your hard drive looking for interesting files…</p>

<p>You would think that all of this is hypothetical and Google would certainly remove any malicious extension, but in this case you would be wrong.<!--more--></p>

<h1 id="technical-breakdown-of-a-malicious-extension">Technical breakdown of a malicious extension</h1>

<p><strong>Warning</strong>: this part is somehow technical.</p>

<p>On the 5th of December 2013 I noticed that ads started to appear on top of Google Image Search. I’ve never seen ads there before. It also had this strange sentence “Ads not from this site”. I was intrigued and it didn’t take me long to find the culprit: <a href="https://chrome.google.com/webstore/detail/awesome-screenshot-captur/alelhddbbhepgpmgidjdcjakblofbmce/details">Awesome Screenshot: Capture &amp; Annotate</a>.</p>

<p>Turns out a new version was published on the 5th of December and this is when it started to display ads. I wasn’t the only user to notice:</p>

<p><a href="/assets/2014-01-07-why-you-should-not-use-chrome-extensions/ads-13.png"><img src="/assets/2014-01-07-why-you-should-not-use-chrome-extensions/ads-13.png" alt="ads-1" /></a> <a href="/assets/2014-01-07-why-you-should-not-use-chrome-extensions/ads-23.png"><img src="/assets/2014-01-07-why-you-should-not-use-chrome-extensions/ads-23.png" alt="ads-2" /></a> <a href="/assets/2014-01-07-why-you-should-not-use-chrome-extensions/ads-32.png"><img src="/assets/2014-01-07-why-you-should-not-use-chrome-extensions/ads-32.png" alt="ads-3" /></a></p>

<p>After a couple of hours everything went back to normal: I enabled the extension again and noticed that it wasn’t displaying ads anymore. I decided to dig deeper and downloaded the source code of the extension.</p>

<p>Everything starts here: <code class="language-plaintext highlighter-rouge">\javascripts\content_script.js</code> [<a href="https://github.com/gabrielweyer/code-sample/blob/master/technical-blog/chrome-ext/src/3.5.7/javascripts/content_script.js#L763-L781">line:763-781</a>]</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/8248634.js"> </script>

<p>This code is commented. I suspect this is because they pushed a second version the same day (this file was the only one modified on the 5th of December). It’s very easy to understand what’s going on here: if the user is browsing a site owned by Google the code should call <code class="language-plaintext highlighter-rouge">addAD</code> (the function name in itself is rather explicit). The script will also reload the ads 1.5 seconds after the user has finished typing in the search bar.</p>

<p>The function <code class="language-plaintext highlighter-rouge">addAD</code> is located in the same file `\javascripts\content_script.js [<a href="https://github.com/gabrielweyer/code-sample/blob/master/technical-blog/chrome-ext/src/3.5.7/javascripts/content_script.js#L631-L668">line:631-668</a>]. The code is a bit too long to past here but it’s calling another function [<a href="https://github.com/gabrielweyer/code-sample/blob/master/technical-blog/chrome-ext/src/3.5.7/javascripts/content_script.js#L635">line:635</a>]</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/8248711.js"> </script>

<p>This function will retrieve the ads and create the markup [<a href="https://github.com/gabrielweyer/code-sample/blob/master/technical-blog/chrome-ext/src/3.5.7/javascripts/content_script.js#L644-L646">line:644-646</a>]</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/8248593.js"> </script>

<p>The best part is located here: <code class="language-plaintext highlighter-rouge">\javascripts\bg.js</code> [<a href="https://github.com/gabrielweyer/code-sample/blob/master/technical-blog/chrome-ext/src/3.5.7/javascripts/bg.js#L154-L184">line:154-184</a>]</p>

<p>First they’re doing a HTTP GET at: <a href="http://api.hostip.info/get_json.php">http://api.hostip.info/get_json.php</a> and getting JSON as a reply</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/8248818.js"> </script>

<p>The funny part is that I’m located in Melbourne and I was not using a proxy or a VPN at this time!</p>

<p>Then this line says it all [<a href="https://github.com/gabrielweyer/code-sample/blob/master/technical-blog/chrome-ext/src/3.5.7/javascripts/bg.js#L162">line:162</a>]</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/8248849.js"> </script>

<p>I find it really scary. These guys are obviously not very smart, they could just have replaced Google Ads by their own and keep exactly the same design. This way they could have stayed unnoticed for much longer. This also means (most likely) that there is nothing preventing extensions from harvesting passwords (either directly via JavaScript or by inserting DOM elements in the page). This extension has over a million users, the fact that they were not taken down indicates that Google needs to improve its security practices for extensions.</p>

<h1 id="why-hasnt-this-been-exploited-more">Why hasn’t this been exploited more?</h1>

<p>I suspect it has been used widely already. Recipe: create a popular extension (emulate a paying service for free, launch a football world cup tracker…), push an update that will sometimes be malicious. If the number of reports does not reach a certain threshold Google won’t investigate. Rinse and repeat.</p>

<p>In fact this same extension was used again but for a different attack on the 17th of December:</p>

<p><a href="/assets/2014-01-07-why-you-should-not-use-chrome-extensions/data-collection-1.png"><img src="/assets/2014-01-07-why-you-should-not-use-chrome-extensions/data-collection-1.png" alt="data-collection-1" /></a> <a href="/assets/2014-01-07-why-you-should-not-use-chrome-extensions/data-collection-2.png"><img src="/assets/2014-01-07-why-you-should-not-use-chrome-extensions/data-collection-2.png" alt="data-collection-2" /></a></p>

<p>There is no accountability: most of the companies publishing extensions are completely unknown. Even if Google was to act they could just create new extensions under another name.</p>

<h1 id="take-away">Take Away</h1>

<p>I stopped using Chrome extensions and I think you should too. The risks vastly overshadow the benefits. In fact I think it is safe to use Chrome Extensions in a couple of cases:</p>

<ul>
  <li>When they come from a reputable source (Google, Evernote, Dropbox…)</li>
  <li>When they’re part of a service you’re paying for (1Password for example)</li>
  <li>When they’re open source</li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2014/01/07/why-you-should-not-use-chrome-extensions/</guid>
                <description>
                    
                    Popular Chrome Extensions insert ads and send your browsing habits to 3rd parties.
                    
                </description>
                <pubDate>Tue, 07 Jan 2014 03:13:53 -0600</pubDate>
                <author>Gabriel Weyer</author>
            </item>
        
    
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A somewhat technical blog</title>
    <description>My name is Gabriel Weyer. I’m a software developer and currently based in Melbourne, Australia. I blog about technology.</description>
    <link>https://gabrielweyer.github.io//</link>
    <atom:link href="https://gabrielweyer.github.io//feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Singleton HTTP Client</title>
        <description>&lt;p&gt;Even though the &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; implements &lt;code class=&quot;highlighter-rouge&quot;&gt;IDisposable&lt;/code&gt; it is supposed to be used as a singleton as stated in the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=netcore-2.0#Remarks&quot;&gt;API reference&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; is intended to be instantiated once and re-used throughout the life of an application. Instantiating an &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; class for every request will exhaust the number of sockets available under heavy loads. This will result in &lt;code class=&quot;highlighter-rouge&quot;&gt;SocketException&lt;/code&gt; errors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The accepted best practice is to have one &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; per HTTP endpoint you’re interacting with. This will not only yield better performance it also allows to encapsulate endpoint specific logic (such as setting headers).&lt;/p&gt;

&lt;p&gt;Now the question is: how do you configure your &lt;code class=&quot;highlighter-rouge&quot;&gt;IoC&lt;/code&gt; container to resolve the expected &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; instance? This used to require a cumbersome registration but &lt;code class=&quot;highlighter-rouge&quot;&gt;.NET Core 2.1&lt;/code&gt; will ship with the &lt;a href=&quot;https://github.com/aspnet/HttpClientFactory&quot;&gt;HttpClientFactory&lt;/a&gt; making our life much easier.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;httpclientfactory&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.stevejgordon.co.uk/&quot;&gt;Steve Gordon&lt;/a&gt; has an excellent &lt;a href=&quot;https://www.stevejgordon.co.uk/httpclientfactory-named-typed-clients-aspnetcore&quot;&gt;post&lt;/a&gt; explaining what is &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt; and how it works.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt; aims to provide the following improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alleviate sockets exhaustion by reusing connection when possible&lt;/li&gt;
  &lt;li&gt;Alleviate stale &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS&lt;/code&gt; records (by default &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; caches &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS&lt;/code&gt; records for its lifetime)&lt;/li&gt;
  &lt;li&gt;Easily resolve an &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; instance linked to a specific HTTP endpoint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What if you can’t use &lt;code class=&quot;highlighter-rouge&quot;&gt;.NET Core&lt;/code&gt; or can’t update? Fear not, we can achieve tomorrow’s dream with today’s tools (most of it anyway).&lt;/p&gt;

&lt;h2 id=&quot;associate-an-httpclient-instance-with-the-service-using-it&quot;&gt;Associate an &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; instance with the service using it&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; instances communicating with a specific HTTP endpoint tend to have dedicated settings such as an &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization&lt;/code&gt; header, default request headers (&lt;code class=&quot;highlighter-rouge&quot;&gt;Accept&lt;/code&gt; for example), maybe a &lt;code class=&quot;highlighter-rouge&quot;&gt;HMAC&lt;/code&gt;… I tend to encapsulate those settings in a &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; to decouple the settings’s source from the consummer.&lt;/p&gt;

&lt;p&gt;Let’s imagine that we’re integrating with a fictitious company called &lt;em&gt;Contoso&lt;/em&gt;. The integration takes place via an HTTP API and our contact at Contoso gave us a bearer token that needs to be set on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;The first step is to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;POCO&lt;/code&gt; modelizing the settings:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContosoSettings&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BearerToken&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; makes writing tests harder. Developers tend to derive from &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpMessageHandler&lt;/code&gt; and provide an implementation allowing them to assert the requests issued by the &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt;. I prefer to introduce an interface called &lt;code class=&quot;highlighter-rouge&quot;&gt;IHttpClient&lt;/code&gt; exposing a single method to handle &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; traffic:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IHttpClient&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpResponseMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SendAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpRequestMessage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We then implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;ContosoHttpClient&lt;/code&gt; that will be dedicated to communicating with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Contoso&lt;/code&gt; API:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContosoHttpClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IHttpClient&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ContosoHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContosoSettings&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DefaultRequestHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Authorization&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AuthenticationHeaderValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bearer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BearerToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And finally we registers the &lt;code class=&quot;highlighter-rouge&quot;&gt;Type&lt;/code&gt;s in the &lt;code class=&quot;highlighter-rouge&quot;&gt;IoC&lt;/code&gt; container:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contosoHttpClientAutofacKeyName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ContosoHttpClient&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContosoHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contosoHttpClientAutofacKeyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SingleInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContosoClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WithParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ResolvedParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParameterType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResolveNamed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContosoHttpClientAutofacKeyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AsImplementedInterfaces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;InstancePerRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Abbreviated: resolve and register ContosoSettings (from Web.config, appsettings.json, CSV, volumen...)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This snippet is using &lt;code class=&quot;highlighter-rouge&quot;&gt;Autofac&lt;/code&gt; &lt;a href=&quot;http://autofaccn.readthedocs.io/en/latest/advanced/keyed-services.html#named-services&quot;&gt;named service&lt;/a&gt;. Using a &lt;code class=&quot;highlighter-rouge&quot;&gt;named service&lt;/code&gt; this way has several benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If someone registered another &lt;code class=&quot;highlighter-rouge&quot;&gt;IHttpClient&lt;/code&gt; that is supposed to be used everywhere else we will not override the registration for all the other services while still retrieving an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;ContosoHttpClient&lt;/code&gt; when resolving &lt;code class=&quot;highlighter-rouge&quot;&gt;IContosoClient&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;named service&lt;/code&gt; is an implementation details that only the &lt;code class=&quot;highlighter-rouge&quot;&gt;IoC&lt;/code&gt; container knows about.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;solve-stale-dns-records&quot;&gt;Solve stale DNS records&lt;/h2&gt;

&lt;p&gt;Let’s say you’re interacting with an API hosted at &lt;code class=&quot;highlighter-rouge&quot;&gt;https://api.contoso.com&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; will first have to resolve the domain name to an &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt; thanks to a &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS&lt;/code&gt; server. But what happens if the &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS&lt;/code&gt; record is updated and the domain name now resolves to another &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt;? If you are using a transient &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; you’ll be fine but if you’re using a singleton instance (as you should) &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt;s will start to shoot up in your monitoring system. Should we stop calling APIs, or maybe rewrite everything in &lt;code class=&quot;highlighter-rouge&quot;&gt;Go&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.net.servicepoint.connectionleasetimeout?view=netframework-4.7.1#System_Net_ServicePoint_ConnectionLeaseTimeout&quot;&gt;ConnectionLeaseTimeout&lt;/a&gt; property can solve this situation nicely for us:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;Int32&lt;/code&gt; that specifies the number of &lt;strong&gt;milliseconds&lt;/strong&gt; that an active &lt;code class=&quot;highlighter-rouge&quot;&gt;ServicePoint&lt;/code&gt; connection remains open. &lt;strong&gt;The default is &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;, which allows an active &lt;code class=&quot;highlighter-rouge&quot;&gt;ServicePoint&lt;/code&gt; connection to stay connected indefinitely&lt;/strong&gt;. Set this property to &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to force &lt;code class=&quot;highlighter-rouge&quot;&gt;ServicePoint&lt;/code&gt; connections to close after servicing a request.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is how you set it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiUri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://api.contoso.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServicePointManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindServicePoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apiUri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConnectionLeaseTimeout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the previous snippet I’m keeping the connection opened for a minute which seems like a good trade-off.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I haven’t looked at the implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt; yet but I suspect the end result will be fairly similar to what I demonstrated above. If you still have doubts about using a singleton &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; I recommend you to perf test it. At a previous customer I developped an API that was calling other HTTP endpoints, I increased the throughput by a factor of &lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt; by changing a single thing: I made the &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; a singleton rather than a per-request scope.&lt;/p&gt;

</description>
        <pubDate>Thu, 08 Feb 2018 20:34:06 +0000</pubDate>
        <link>https://gabrielweyer.github.io//2018/02/08/singleton-http-client/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2018/02/08/singleton-http-client/</guid>
      </item>
    
      <item>
        <title>Simple Routing for Elastic Beanstalk Worker tier</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Elastic Beanstalk&lt;/code&gt; offers both a &lt;code class=&quot;highlighter-rouge&quot;&gt;Web&lt;/code&gt; tier and a &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt; tier. This allows developers to build reasonably complex applications without having to maintain moving pieces. Offloading heavy-duty workloads to the worker in order to keep the web tier responsive is as easy as putting a message on a queue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/http-path.png&quot; alt=&quot;HTTP Path&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One annoyance that I have with &lt;code class=&quot;highlighter-rouge&quot;&gt;Beanstalk&lt;/code&gt; is that there is no way to direct a message to a specific endpoint, hence leaving a single endpoint the responsibility of distributing the messages to all their handlers and potentially leading to brittle code. But it doesn’t have to be that way.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; messages have &lt;a href=&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-attributes.html&quot;&gt;attributes&lt;/a&gt;, attributes can be set by the sender and are read by the receiver. The idea is to use a known attribute to attach routing metadata to the message.&lt;/p&gt;

&lt;h3 id=&quot;constants&quot;&gt;Constants&lt;/h3&gt;

&lt;p&gt;Constants are the base of any decently built &lt;code class=&quot;highlighter-rouge&quot;&gt;C#&lt;/code&gt; application. I did not want to depart from to this rule and hence added some constants:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RoutingConstants&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HeaderName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HeaderType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;String&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These constansts will be used to add routing metadata to the &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; message.&lt;/p&gt;

&lt;p&gt;We can then define our routes via some more constants:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WorkerConstants&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoSomeWorkTaskName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;do-some-work&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoSomeOtherWorkTaskName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;do-some-other-work&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: those two &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; will have to be referenced by the sender and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;sending-the-message&quot;&gt;Sending the message&lt;/h3&gt;

&lt;p&gt;The sender will most likely be the &lt;code class=&quot;highlighter-rouge&quot;&gt;Web&lt;/code&gt; tier but it could be any system being able to send a message to a &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; queue.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sendMessageRequest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SendMessageRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Abbreviated: set properties on sendMessageRequest, such as the MessageBody and the QueueUrl&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// We're using RoutingConstants.HeaderName as the MessageAttribute key&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// and WorkerConstants.DoSomeWorkTaskName as the MessageAttribute value&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sendMessageRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MessageAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RoutingConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HeaderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageAttributeValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WorkerConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoSomeWorkTaskName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RoutingConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HeaderType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Abbreviated: send the message&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;middleware&quot;&gt;Middleware&lt;/h3&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;, the routing is implemented via a &lt;code class=&quot;highlighter-rouge&quot;&gt;Middleware&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HeaderRoutingMiddleware&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Elastic Beanstalk prefixes the SQS messages properties' name with &quot;X-Aws-Sqsd-Attr-&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskHeaderName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;X-Aws-Sqsd-Attr-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RoutingConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HeaderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// We get the value of the routing header&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;StringValues&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TaskHeaderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// And set it as the path&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Single&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: don’t forget to add &lt;code class=&quot;highlighter-rouge&quot;&gt;HeaderRoutingMiddleware&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;IApplicationBuilder&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;controller&quot;&gt;Controller&lt;/h3&gt;

&lt;p&gt;The last piece of the puzzle is defining the expected route on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// This is important, we do not want a prefix in front of the action's route&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[Route(&quot;&quot;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Controller&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// The route has to match the value given to the MessageAttribute&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HttpPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkerConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoSomeWorkTaskName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SomeMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Abbreviated for clarity&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;simple-routing&quot;&gt;Simple routing&lt;/h2&gt;

&lt;p&gt;I used &lt;code class=&quot;highlighter-rouge&quot;&gt;Simple Routing&lt;/code&gt; in production over the last few months and am now confident that it does what it’s supposed to do. This is why I decided to release it under a &lt;code class=&quot;highlighter-rouge&quot;&gt;MIT&lt;/code&gt; license to allow others to benefit from my work.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Simple Routing&lt;/code&gt; is available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;On &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; as the package &lt;a href=&quot;https://www.nuget.org/packages/BeanstalkWorker.SimpleRouting/&quot;&gt;BeanstalkWorker.SimpleRouting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;GitHub&lt;/code&gt; &lt;a href=&quot;https://github.com/gabrielweyer/simple-routing/releases&quot;&gt;release&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;As &lt;a href=&quot;https://github.com/gabrielweyer/simple-routing&quot;&gt;source&lt;/a&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;Github&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;The implementation is so simple that you can just copy the classes into your own solution if that works better for you&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Simple Routing&lt;/code&gt; solution contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;SampleWeb&lt;/code&gt; app, you can either:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Send “work” - &lt;code class=&quot;highlighter-rouge&quot;&gt;Send/Work&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Send “nothing” - &lt;code class=&quot;highlighter-rouge&quot;&gt;Send/Nothing&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;send-messages&quot;&gt;Send messages&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;GET http://localhost:5000/Send/Work HTTP/1.1
Host: localhost:5000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/web-send-work.png&quot; alt=&quot;Send Work&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;GET http://localhost:5000/Send/Nothing HTTP/1.1
Host: localhost:5000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/web-send-nothing.png&quot; alt=&quot;Send Nothing&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;peek-at-the-messages&quot;&gt;Peek at the messages&lt;/h4&gt;

&lt;p&gt;Now let’s look at the messages in the &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; queue:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Work&lt;/code&gt; message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/message-work-body.png&quot; alt=&quot;Work Message Body&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/message-work-attributes.png&quot; alt=&quot;Work Message Attributes&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Nothing&lt;/code&gt; message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/message-nothing-body.png&quot; alt=&quot;Nothing Message Body&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/message-nothing-attributes.png&quot; alt=&quot;Nothing Message Attributes&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;handle-the-messages&quot;&gt;Handle the messages&lt;/h4&gt;

&lt;p&gt;Launch the &lt;code class=&quot;highlighter-rouge&quot;&gt;SampleWorker&lt;/code&gt; app. When running in &lt;code class=&quot;highlighter-rouge&quot;&gt;ElasticBeanstalk&lt;/code&gt; the &lt;a href=&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features-managing-env-tiers.html&quot;&gt;Sqsd daemon&lt;/a&gt; reads &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; messages from the &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; queue and &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; the content to your &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;. But we’re running the &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt; on our machine and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Sqsd daemon&lt;/code&gt; is not available. This is why I wrote &lt;code class=&quot;highlighter-rouge&quot;&gt;Beanstalk Seeder&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/gabrielweyer/beanstalk-seeder&quot;&gt;Beanstalk Seeder&lt;/a&gt; emulates the &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS Daemon&lt;/code&gt; surrounding an &lt;code class=&quot;highlighter-rouge&quot;&gt;Elastic Beanstalk&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker Tier&lt;/code&gt; so that you can replicate the interaction between a &lt;code class=&quot;highlighter-rouge&quot;&gt;Web Tier&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker Tier&lt;/code&gt; on your machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;handling-the-work-message&quot;&gt;Handling the &lt;code class=&quot;highlighter-rouge&quot;&gt;Work&lt;/code&gt; message&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Beanstalk Seeder&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/beanstalk-seeder-work.png&quot; alt=&quot;Work Message Beanstalk Seeder&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/worker-work.png&quot; alt=&quot;Work Message Worker&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;handling-the-nothing-message&quot;&gt;Handling the &lt;code class=&quot;highlighter-rouge&quot;&gt;Nothing&lt;/code&gt; message&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Beanstalk Seeder&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/beanstalk-seeder-nothing.png&quot; alt=&quot;Nothing Message Beanstalk Seeder&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/worker-nothing.png&quot; alt=&quot;Nothing Message Worker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I wrote a detailed guide in the &lt;a href=&quot;https://github.com/gabrielweyer/simple-routing&quot;&gt;GitHub repository&lt;/a&gt;. Give it a try and let me know if it works for you.&lt;/p&gt;

</description>
        <pubDate>Sun, 28 Jan 2018 20:24:33 +0000</pubDate>
        <link>https://gabrielweyer.github.io//2018/01/28/simple-routing-elastic-beanstalk-worker/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2018/01/28/simple-routing-elastic-beanstalk-worker/</guid>
      </item>
    
      <item>
        <title>Links Insights #1</title>
        <description>&lt;p&gt;Every now and then I stumble upon a brilliant post on Internet, I share some of those links on my &lt;a href=&quot;https://www.diigo.com/user/gabrielweyer&quot;&gt;Diigo profile&lt;/a&gt; but the format is very succinct. I decided to start a new experiment and instead write full blog posts about those links. The first reason is quite selfish as I would like to keep a record of what I thought was interesting and why, I also hope to empower the reader so that she can decide if she wants to read the full post as some of them are lengthy.&lt;/p&gt;

&lt;p&gt;I’m considering limiting each of those post to up to three links as to not require too much time from the reader.&lt;/p&gt;

&lt;p&gt;This is inspired by the excellent work that Chris Alcock and Michael Wolfenden are doing with respectively &lt;a href=&quot;http://blog.cwa.me.uk/&quot;&gt;The Morning Brew&lt;/a&gt; and &lt;a href=&quot;https://michael-wolfenden.github.io/&quot;&gt;The Wolf Report&lt;/a&gt;. Don’t be surprised if I end up &lt;del&gt;stealing&lt;/del&gt; borrowing some links from them.&lt;/p&gt;

&lt;p&gt;Without further ado let me get started with the first links.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-be-a-programmer-a-short-comprehensive-and-personal-summary&quot;&gt;How To Be a Programmer: A Short, Comprehensive, and Personal Summary&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Link&lt;/strong&gt;: &lt;a href=&quot;https://www.doc.ic.ac.uk/~susan/475/HowToBeAProgrammer.pdf&quot;&gt;https://www.doc.ic.ac.uk/~susan/475/HowToBeAProgrammer.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a 40 pages long PDF but contains some invaluable lessons especially if you’ve been in the field for only a few years.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A classic mistake is to use a hash table as a cache and forget to remove the references in the hash table. Since the reference remains, the referent is uncollectable but useless. This is called a memory leak.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a mistake I’ve seen across almost all companies I’ve consulted for. I never managed to understand why dev teams adopted this anti-pattern as it has only drawbacks and is not simpler to write than a barebone caching system.&lt;/p&gt;

&lt;p&gt;In the .NET word it’s often implemented via a &lt;code class=&quot;highlighter-rouge&quot;&gt;static private Dictionary&lt;/code&gt;. Developers tend to use objects as key without understanding the requirements around equality but the main issue is that there is rarely code to remove keys which then requires an app pool restart (in a web app) in order to get rid of the stale key! This is compounded by the fact that sessions are often stored in process too and will be wiped out by an app pool restart.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Caching is hard, only introduce caching if you need to (based on performance measurements and performance targets)&lt;/li&gt;
  &lt;li&gt;Use the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/performance/caching-in-net-framework-applications&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;System.Runtime.Caching&lt;/code&gt;&lt;/a&gt; namespace for in process caching&lt;/li&gt;
  &lt;li&gt;Cache data for the smallest amount of time you can get away with&lt;/li&gt;
  &lt;li&gt;Have an API allowing you to interact with your caching system&lt;/li&gt;
  &lt;li&gt;Consider using a distributed caching system (&lt;a href=&quot;https://redis.io/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Redis&lt;/code&gt;&lt;/a&gt; is great for this workload)&lt;/li&gt;
  &lt;li&gt;When using a distributed caching system, consider using a short lived in process cache&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Never, ever, rest any hopes on vapor. Vapor is any alleged software that has been promised but is not yet available.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This situation happened in one of my previous engagement. The feature we were developing was tightly integrated with a product being built by a startup. Their CEO flew down to our office, we listed the API endpoints we required and development started straight away. We even had a support engineer assigned to us!&lt;/p&gt;

&lt;p&gt;Two things started to happen:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Already working features would break suddenly. After getting some support it would turn out that they pushed a new release that broke the feature. They would then deploy a patch which would break another feature!&lt;/li&gt;
  &lt;li&gt;The core feature of this system was to poll third party services for created or modified entities. During our testing we noticed that entities were being missed frequently and we had to trigger the system manually for anything to happen. We raised those concerns and the startup promised to improve the reliability.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We were developing at a faster pace and started to mock more and more dependencies. The release date was approaching and we had no confidence the integration would work. The product we were working on had long release cycles and was deployed by our customers on their own infrastructure, a failure would have been catastrophic. It was finally decided to test the reliability of our provider, we also included one of their competitor. After a few days of collecting data the verdict came in and things weren’t looking good, even though the competitor captured 100% of the entities we created our provider missed almost 30% of them!&lt;/p&gt;

&lt;p&gt;The CTO decided to scrap the integration on the spot and we ended up throwing away half of the code base.&lt;/p&gt;

&lt;p&gt;What we did right was to investigate the unknowns early on in the project. Instead of building our infrastructure we developed a small proof of concept and were able to get a contrived end-to-end execution. The lesson that I learned is that you should define a SLA for your provider from day one and measure it.&lt;/p&gt;

&lt;h2 id=&quot;how-to-write-a-git-commit-message&quot;&gt;How to Write a Git Commit Message&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Link&lt;/strong&gt;: &lt;a href=&quot;https://chris.beams.io/posts/git-commit/&quot;&gt;https://chris.beams.io/posts/git-commit/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an amazing post, I’ve started to apply those rules a few months ago and my commit messages are so much better now.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Use the body to explain what and why vs. how&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://chris.beams.io/posts/git-commit/#why-not-how&quot;&gt;Giving context in the body&lt;/a&gt; is critical as often when fixing a bug I can see how it has been introduced but I have no idea why the change was made - even after reading the story associated with it! Please spend a few minutes explaining why and how a change was made, in 6 months or one year someone will be grateful. This someone might even be you!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Wrap the body at 72 characters&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I used to write my commit messages inline with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-m&lt;/code&gt; argument. After reading this &lt;a href=&quot;https://chris.beams.io/posts/git-commit/#wrap-72&quot;&gt;rule&lt;/a&gt; I realized I needed an editor. I started to use &lt;a href=&quot;https://notepad-plus-plus.org/&quot;&gt;Notepad++&lt;/a&gt; by configuring Git this way:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.editor &lt;span class=&quot;s2&quot;&gt;&quot;'C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;rogram Files (x86)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\N&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;otepad++&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;otepad++.exe' -multiInst -notabbar -nosession -noPlugin&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notepad++ accepts &lt;a href=&quot;https://docs.notepad-plus-plus.org/index.php/Command_Line_Switches&quot;&gt;command line switches&lt;/a&gt; but there is no switch to set the text width. Git has a setting enforcing the text width but it does not work with Notepad++. The good news is that Git can also use notepad and the text width will be enforced:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.editor notepad
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; format.commitMessageColumns 72&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But the text will be wrapped &lt;strong&gt;after&lt;/strong&gt; you save your commit message leading to a less than desirable result:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/links-insights-1/wrap-notepad.gif&quot;&gt;&lt;img src=&quot;/assets/links-insights-1/wrap-notepad.gif&quot; alt=&quot;wrap-notepad&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A better solution is to use vim instead:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.editor vim
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--unset&lt;/span&gt; format.commitMessageColumns&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/assets/links-insights-1/wrap-vim.gif&quot;&gt;&lt;img src=&quot;/assets/links-insights-1/wrap-vim.gif&quot; alt=&quot;wrap-vim&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I did not hit Enter while typing the body of this commit message, instead vim wrapped it for me automatically. If you want to learn more about configuring Git on Windows I wrote a &lt;a href=&quot;https://github.com/gabrielweyer/nuggets/blob/master/git/git.md&quot;&gt;tutorial&lt;/a&gt; to get you started.&lt;/p&gt;

</description>
        <pubDate>Sat, 27 Jan 2018 02:10:07 +0000</pubDate>
        <link>https://gabrielweyer.github.io//2018/01/27/links-insights-1/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2018/01/27/links-insights-1/</guid>
      </item>
    
      <item>
        <title>Capture network packets with netsh</title>
        <description>&lt;p&gt;Another day, another “interesting” issue at a customer. After deploying our product we were left with a partially working web application. The product has been developed over many years and is a mix of ASP Classic, Web Forms, MVC and Web API. In this case ASP Classic pages were broken and would throw an error.&lt;/p&gt;

&lt;h2 id=&quot;ensuring-asp-classic-is-configured-properly&quot;&gt;Ensuring ASP Classic is configured properly&lt;/h2&gt;

&lt;p&gt;The first step is to ensure that IIS has been configured to execute ASP Classic and this is done easily by adding a dummy ASP page to the web application. After deploying this page I was able to confirm that it was working as expected.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/5eb3198119bead02649c0fe11d733055.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/dummy-asp.png&quot; alt=&quot;dummy-asp&quot; /&gt;&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;enabling-failed-request-tracing&quot;&gt;Enabling failed request tracing&lt;/h2&gt;

&lt;p&gt;The features written in ASP Classic have been written many years ago and the developers didn’t consider logging as a key part of the development process. The end result being that when something goes wrong no logs get written by the application or to the event viewer.&lt;/p&gt;

&lt;p&gt;The second step is to turn on the “&lt;strong&gt;Failed Request Tracing Rules&lt;/strong&gt;“ and reload the failing page. Internet has a lot of tutorials around this but they’re all missing key steps, I’ll focus on those as you can find everything else easily.&lt;/p&gt;

&lt;p&gt;“Failed Request Tracing Rules” will not be available in the IIS Manager if you didn’t turn on the &lt;strong&gt;Tracing&lt;/strong&gt; feature in Windows Features:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/tracing.png&quot; alt=&quot;tracing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another thing is that multiple sites could be writing traces at the same time. Each site will be writing to a different sub folder suffixed with the site ID:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/site-id.gif&quot; alt=&quot;site-id&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally you can copy the log files back to your machine, don’t forget to copy the freb.xsl file too, you’ll then be able to open the XML files in Internet Explorer and look at a human readable representation of the log.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/invalid-authority.png&quot; alt=&quot;invalid-authority&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All ASP Classic pages are calling an API endpoint in order to get a token (long story short: don’t ask - the user is signing-in in an AngularJS app backed by Web API and is then able to use seamlessly the pages hosted on MVC, Web Forms and Classic ASP). What is strange in this situation is that Internet Explorer is marking the TLS certificate as valid, so does Chrome. Even worse: the same ASP Classic page hosted on my machine calling the token endpoint on the remote server is successful! The Windows Certificate Manager is displaying the same message for the root CA, intermediate CA and certificate: ”This certificate is OK.”.&lt;/p&gt;

&lt;p&gt;I then suspected the certificate might be using unsupported ciphers but it turned out that it wasn’t the case. I quickly wrote a C# Console application calling the same token endpoint - the HttpClient class is throwing meaningful errors - but to my dismay the C# code was able to call the endpoint successfully!&lt;/p&gt;

&lt;p&gt;Armed with the ErrorCode “80072f0d” and the Description “The certificate authority is invalid or incorrect” I scoured Internet for some potential solutions. Everything I could find was related to invalid and self-signed certificates.&lt;/p&gt;

&lt;h2 id=&quot;capturing-packets-on-a-windows-server&quot;&gt;Capturing packets on a Windows Server&lt;/h2&gt;

&lt;p&gt;When people think “packet capture” they always assume they need to install &lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt; (or another similar tool) whereas Windows Server is shipping with the ability to capture network packets with &lt;a href=&quot;https://technet.microsoft.com/en-us/library/dd878517(v=ws.10).aspx&quot;&gt;netsh&lt;/a&gt; since Windows Server 2008 R2. The advantage of this solution is that you don’t need to install anything on the machine. To see if it’s available, all you need to do is open a command prompt and type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-posh&quot; data-lang=&quot;posh&quot;&gt;netsh trace&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/netsh-trace.gif&quot; alt=&quot;netsh-trace&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we know that &lt;strong&gt;trace&lt;/strong&gt; is available we need to start capturing the packets and reproduce the problem. Launch an &lt;strong&gt;elevated&lt;/strong&gt; command prompt and type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-posh&quot; data-lang=&quot;posh&quot;&gt;netsh trace &lt;span class=&quot;nb&quot;&gt;start &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tracefile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\tmp\traces\classic.etl&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;internetclient &lt;span class=&quot;nv&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yes &lt;span class=&quot;nv&quot;&gt;maxsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;200 &lt;span class=&quot;nv&quot;&gt;filemode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;circular &lt;span class=&quot;nv&quot;&gt;overwrite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yes&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the path needs to exist beforehand.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/start-stop.gif&quot; alt=&quot;start-stop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Starting and stopping the trace is actually slower that what is demonstrated above but I didn’t want lo lose your attention! And of course you would need to reproduce the issue before issuing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-posh&quot; data-lang=&quot;posh&quot;&gt;netsh stop&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;microsoft-message-analyzer&quot;&gt;Microsoft Message Analyzer&lt;/h2&gt;

&lt;p&gt;We now need to analyze this trace and this is done with the &lt;a href=&quot;https://technet.microsoft.com/en-us/library/jj649776.aspx&quot;&gt;Microsoft Message&lt;/a&gt; &lt;a href=&quot;https://blogs.technet.microsoft.com/messageanalyzer/&quot;&gt;Analyzer&lt;/a&gt; (can be downloaded &lt;a href=&quot;https://www.microsoft.com/en-au/download/details.aspx?id=44226&quot;&gt;here&lt;/a&gt;). The Analyzer takes a long time to open the smallest trace but once the trace is loaded you can search quickly.&lt;/p&gt;

&lt;p&gt;We’ll first look for an HTTP CONNECT, use this filter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(HTTP.Method == &quot;CONNECT&quot;) And
(HTTP.Uri.Host == &quot;domain.name&quot;) And
(HTTP.Uri.Port == &quot;port&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/connect.png&quot; alt=&quot;connect.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see the CONNECT was successful. Let’s investigate the TLS handshake now, this is handled by the TLS module so all we need to do is filter on this module only:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;TLS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is what was captured when the C# application connected to the token endpoint:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/c-sharp-tls.png&quot; alt=&quot;c-sharp-tls&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is matching closely what is described in the &lt;a href=&quot;https://tools.ietf.org/html/rfc5246#page-36&quot;&gt;RFC 5246&lt;/a&gt; (TLS 1.2).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/full-handshake.png&quot; alt=&quot;full-handshake&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s now capture the traffic when the VB code is trying to call the token endpoint.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/vb-tls.png&quot; alt=&quot;vb-tls.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Great Scott! The server is sending &lt;code class=&quot;highlighter-rouge&quot;&gt;ServerHello&lt;/code&gt; as expected but the client doesn’t reply with &lt;code class=&quot;highlighter-rouge&quot;&gt;ClientKeyExchange&lt;/code&gt;. I then removed the filter and started to look at the messages below. My reasoning was that I should be finding some kind of error message soon after and here it was:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/browsing-messages.png&quot; alt=&quot;browsing-messages&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The error message was:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A certificate chain processed, but terminated in a root certificate which is not trusted by the trust provider. (0x800B0109)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As it turned out someone had messed up with the certificate store and removed the intermediate CA from the “Intermediate Certification Authorities”. As the root CA was still present in the “Trusted Root Certification Authorities” it was good enough for Internet Explorer and C# but it wasn’t for VB! I added the intermediate CA to the store and things started to work again.&lt;/p&gt;

</description>
        <pubDate>Sat, 16 Jul 2016 09:20:07 +0000</pubDate>
        <link>https://gabrielweyer.github.io//2016/07/16/capture-network-packets-with-netsh/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2016/07/16/capture-network-packets-with-netsh/</guid>
      </item>
    
      <item>
        <title>beIN SPORTS CONNECT</title>
        <description>&lt;p&gt;I like football, even with the time difference I try to watch at least the World Cup and the European Championship. I watched the last World Cup on &lt;a href=&quot;http://www.sbs.com.au/&quot;&gt;SBS&lt;/a&gt; but this time around they only managed to secure a handful of games. As they’re a public service it makes sense after all that they wouldn’t buy the rights for all the games. A quick search on Google indicated that &lt;a href=&quot;http://www.beinsportsconnect.com.au/home&quot;&gt;beIN SPORTS CONNECT&lt;/a&gt; is the way to go in Australia - I will refer to this service as beIN for the rest of this post.&lt;/p&gt;

&lt;h1 id=&quot;subscribing&quot;&gt;Subscribing&lt;/h1&gt;

&lt;p&gt;As the pricing seems reasonable I decided to go ahead. The page is loaded over HTTPS so we start well but to my surprise the form contains a &lt;strong&gt;password remainder&lt;/strong&gt; field. Password remainders are a bad practice as users tend to fill them with their password (when allowed) or with a hint that is an obvious give away.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;As I don’t know any of my password, a password reminder is useless to me so I always generate a strong unique random password for this field. After trying to submit the form I got the following error:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-06-13-bein-sports-connect/password-remainder.png&quot; alt=&quot;password-remainder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I don’t understand the benefits of restricting the characters I can use. On the contrary it seems to indicate this site is potentially vulnerable to &lt;a href=&quot;https://www.troyhunt.com/understanding-xss-input-sanitisation/&quot;&gt;XSS&lt;/a&gt;. I generate another reminder without “special” characters and get presented with another error:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-06-13-bein-sports-connect/invalid-format.png&quot; alt=&quot;invalid-format&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So my valid email address is in an “Incorrect format”. How convenient should they ever decide to sell my data to a third party without me being able to track it back to them.&lt;/p&gt;

&lt;p&gt;I start to have a bad feeling about the password requirements. After all the only one that is stated is that my password should be at least 6 characters. I decide to use “123456” and also use it as the password reminder. &lt;strong&gt;&amp;lt;clickbait&amp;gt;&lt;/strong&gt;You won’t believe what happens next!&lt;strong&gt;&amp;lt;/clickbait&amp;gt;&lt;/strong&gt;. Actually I’m sure you knew what would happen: the form happily accepted my password and let me reuse it in the reminder field. Well at least I “&lt;em&gt;can access the site&lt;/em&gt; &lt;strong&gt;securely&lt;/strong&gt;” (emphasis is mine).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-06-13-bein-sports-connect/123456.png&quot; alt=&quot;123456&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One last thing before we move on to the dessert. Does it seem normal to be loading so many third party JavaScript files on a registration page? They’re even loading ads and we know what malicious ads do to your browser and it’s not kind (malware installation, credentials theft…).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-06-13-bein-sports-connect/do-you-need-ads-on-signup.png&quot; alt=&quot;do-you-need-ads-on-signup.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;sign-inform-loaded-over-http&quot;&gt;Sign-in form loaded over HTTP&lt;/h1&gt;

&lt;p&gt;Yes you read that right. Even though the form is POSTing to HTTPS by then it is &lt;a href=&quot;https://www.troyhunt.com/your-login-form-posts-to-https-but-you/&quot;&gt;too late&lt;/a&gt;. An attacker could have already intercepted the initial HTTP response and pointed the form to the URL of his choosing.&lt;/p&gt;

&lt;p&gt;Sometimes websites still offer sign-in over HTTPS when you look for it but it doesn’t seem to be the case here.  &lt;a href=&quot;https://secure.beinsportsconnect.com.au/&quot;&gt;https://secure.beinsportsconnect.com.au/&lt;/a&gt; redirects to &lt;a href=&quot;http://www.beinsportsconnect.com.au/&quot;&gt;http://www.beinsportsconnect.com.au/&lt;/a&gt; and trying to access &lt;a href=&quot;https://www.beinsportsconnect.com.au/&quot;&gt;https://www.beinsportsconnect.com.au/&lt;/a&gt; results in something you should never see:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-06-13-bein-sports-connect/bein-loaded-over-https.png&quot; alt=&quot;bein-loaded-over-https.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;If you’re already using beIN or are planning on starting to use it at least generate a unique password so that when they get compromised attackers will not gain access to your account on other services.&lt;/p&gt;

&lt;p&gt;I understand going all HTTPS would require a tremendous amount of work but beIN could first take some other steps that would make a big difference:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Remove the password reminder altogether&lt;/li&gt;
  &lt;li&gt;Provide a dedicated HTTPS only sign-in page&lt;/li&gt;
  &lt;li&gt;Stop loading third-party ads on the sign-in page&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 13 Jun 2016 10:46:32 +0000</pubDate>
        <link>https://gabrielweyer.github.io//2016/06/13/bein-sports-connect/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2016/06/13/bein-sports-connect/</guid>
      </item>
    
      <item>
        <title>CodeCleanser</title>
        <description>&lt;p&gt;Recently I came up with an interesting issue at a customer. A governmental agency contacted us and informed us that due to a Windows update we could experience intermittent issue when trying to communicate with them. All I knew at this stage was that the issue would manifest itself when trying to upload a document and that the integration is done via DLLs that are wrapping a few web services.&lt;/p&gt;

&lt;p&gt;After &lt;a href=&quot;https://www.jetbrains.com/help/decompiler/2016.1/Generating_PDB_Files.html&quot;&gt;generating PDBs&lt;/a&gt; via &lt;a href=&quot;https://www.jetbrains.com/decompiler/&quot;&gt;dotPeek&lt;/a&gt; and adding them to the Visual Studio symbol cache directory I was able to debug through those third party DLLs and confirm that the issue was indeed located in one of them.&lt;/p&gt;

&lt;p&gt;Knowing the DLL is redistributed with the product, is in multiple production versions and that the source control’s history is pretty patchy, the question then become: &lt;strong&gt;if we were to get a new DLL could we use it for all the versions?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To answer this question we will have to assess the differences between the DLL in each version.&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;first-naive-attempt-checksum&quot;&gt;First naive attempt: checksum&lt;/h1&gt;

&lt;p&gt;Windows ships with a few ways to compute a checksum, &lt;a href=&quot;http://superuser.com/a/898377/128002&quot;&gt;CertUtil&lt;/a&gt; is one of them, PowerShell has a &lt;a href=&quot;https://technet.microsoft.com/en-us/library/dn520872.aspx&quot;&gt;Get-FileHash&lt;/a&gt; cmdlet and this is what I’ll use:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-posh&quot; data-lang=&quot;posh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;Get-FileHash&lt;/span&gt; &amp;lt;filepath&amp;gt; -Algorithm MD5&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For our purpose MD5 is good enough, if you want to ensure that a file hasn’t been tampered with you should be using SHA256 at least.&lt;/p&gt;

&lt;p&gt;Sadly the three checksums for the three versions were different. But it doesn’t mean the DLLs are semantically different. It could have been metadata, different .NET Framework versions…&lt;/p&gt;

&lt;p&gt;At this stage I could have used &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/f7dy01k1(v=vs.110).aspx&quot;&gt;Ildasm&lt;/a&gt; to try to diff the full source code in one file but according to my previous tries the output end up being different. For sake of completeness I tried again before writing this blog post.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-posh&quot; data-lang=&quot;posh&quot;&gt;ildasm &amp;lt;dll-filepath&amp;gt; /text /out&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;output-filepath&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This time is no exception, WinMerge indicates 348 differences! Some of them can be explained away:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2016-06-04-codecleanser/different-dot-net-version.png&quot;&gt;&lt;img src=&quot;/assets/2016-06-04-codecleanser/different-dot-net-version.png&quot; alt=&quot;different-dot-net-version&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The assemblies have been compiled using different version of the .NET Framework, which makes sense as many years separate those two versions.&lt;/p&gt;

&lt;p&gt;Next comes an interesting piece of information that explains why two builds of the same source code always result in two different DLLs:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2016-06-04-codecleanser/mvid-image-base.png&quot;&gt;&lt;img src=&quot;/assets/2016-06-04-codecleanser/mvid-image-base.png&quot; alt=&quot;mvid-image-base.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.module.moduleversionid(v=vs.110).aspx&quot;&gt;MVID&lt;/a&gt; changes at every single build, for our purpose we can safely ignore this difference, same goes for the Image base. The other differences are more worrying:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2016-06-04-codecleanser/different-attributes.png&quot;&gt;&lt;img src=&quot;/assets/2016-06-04-codecleanser/different-attributes.png&quot; alt=&quot;different-attributes.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looks like the Attributes are the same but in a different order. There are hundreds of such instances and as IL is harder to read than C# it’s time to move on to another strategy.&lt;/p&gt;

&lt;h1 id=&quot;plan-b-generate-a-project-via-dotpeek&quot;&gt;Plan B: generate a project via dotPeek&lt;/h1&gt;

&lt;p&gt;dotPeek can not only decompile IL to C#, it also can &lt;a href=&quot;https://www.jetbrains.com/help/decompiler/2016.1/Exporting_Assembly_to_Project.html&quot;&gt;generate a project from a DLL&lt;/a&gt;. Let’s give it a spin and close this case!&lt;/p&gt;

&lt;p&gt;According to WinMerge, every single file is different! Now I’m a sad panda :(, how could the C# differ even more than the IL? This is due to the fact that as a &lt;em&gt;convenience&lt;/em&gt;, dotPeek kindly outputs the MVID and the assembly location at the top of each file:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2016-06-04-codecleanser/dotpeek-mvid-assembly-location.png&quot;&gt;&lt;img src=&quot;/assets/2016-06-04-codecleanser/dotpeek-mvid-assembly-location.png&quot; alt=&quot;dotpeek-mvid-assembly-location&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our use case, this is rather inconvenient. Luckily WinMerge has a feature called &lt;a href=&quot;http://stackoverflow.com/a/22178182/57369&quot;&gt;LineFilters&lt;/a&gt; which allows to ignore lines based on Regular Expressions. Two filters later a lot of files are still different:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2016-06-04-codecleanser/win-merge.png&quot;&gt;&lt;img src=&quot;/assets/2016-06-04-codecleanser/win-merge.png&quot; alt=&quot;win-merge.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s now confirmed, some attributes are in a different order! dotPeek has an &lt;a href=&quot;https://youtrack.jetbrains.com/issue/DOTP-7063&quot;&gt;opened bug&lt;/a&gt; regarding this but it hasn’t been updated since October 2015 so we can assume it won’t be fixed anytime soon. By then I already spent 30 minutes on this task and being a consultant I can’t justify spending more time trying to find a (mostly) automated solution. I might be able to pull it off with a Regex but it might also turn to be a rabbit hole. According to the number of different files and hoping it would only be about attributes ordering it should take me less than an hour to go through the difference. It actually only took me 30 minutes and confirmed the assumption that only the order of the attributes was differing.&lt;/p&gt;

&lt;h1 id=&quot;enter-codecleanser&quot;&gt;Enter CodeCleanser&lt;/h1&gt;

&lt;p&gt;Fast forward two days, it’s Saturday morning and I’m wondering if I can use &lt;a href=&quot;https://github.com/dotnet/roslyn&quot;&gt;Roslyn&lt;/a&gt; to solve this problem.&lt;/p&gt;

&lt;p&gt;I had 3 objectives:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Get rid of the comments at the top of the file&lt;/li&gt;
  &lt;li&gt;Sort Attributes by alphabetical order&lt;/li&gt;
  &lt;li&gt;Wrap up before training&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The source code is available &lt;a href=&quot;https://github.com/gabrielweyer/CodeCleanser&quot;&gt;here&lt;/a&gt;, feel free to use it and adapt it to your own needs.&lt;/p&gt;

&lt;h2 id=&quot;get-rid-of-the-comments-at-the-top-of-the-file&quot;&gt;Get rid of the comments at the top of the file&lt;/h2&gt;

&lt;p&gt;Let’s start by what seems the easiest: removing the comments at the top of the files. What’s very nice with Roslyn is that you don’t need an actual file, you can pass a string as an argument which makes unit testing very easy. As I’m only planning on doing cosmetic changes and I only care about comparing the two DLLs I don’t need to operate at a project or solution level.&lt;/p&gt;

&lt;p&gt;Following the TDD principles I’ll first write a &lt;a href=&quot;https://github.com/gabrielweyer/CodeCleanser/blob/4b7b769bdf104461decc7db0f6ce46a890de4351/Tests/RemoveLeadingTriviaTests.cs#L8-L55&quot;&gt;test&lt;/a&gt;:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/b6aaa2c60ba20f8340d32edd4ff87265.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This test ensures that everything before the first using statement is removed. Let’s now look at the &lt;a href=&quot;https://github.com/gabrielweyer/CodeCleanser/blob/4b7b769bdf104461decc7db0f6ce46a890de4351/Logic/CodeCleaner.cs#L39-L47&quot;&gt;implementation&lt;/a&gt;:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/ac0976203a5315f16e1bac81963a6a8b.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The Roslyn documentation defines a &lt;a href=&quot;https://github.com/dotnet/roslyn/wiki/Roslyn%20Overview#syntax-trivia&quot;&gt;trivia&lt;/a&gt; as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Syntax trivia represent the parts of the source text that are largely insignificant for normal understanding of the code, such as whitespace, comments, and preprocessor directives.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All the code is doing is replace each leading trivia with an empty trivia. I’m sure there is a better way of doing this but this works well enough for my purpose.&lt;/p&gt;

&lt;h2 id=&quot;sort-attributes-by-alphabetical-order&quot;&gt;Sort Attributes by alphabetical order&lt;/h2&gt;

&lt;p&gt;Again we’ll start with a &lt;a href=&quot;https://github.com/gabrielweyer/CodeCleanser/blob/4b7b769bdf104461decc7db0f6ce46a890de4351/Tests/SortAttributesAlphabeticallyTests.cs#L8-L51&quot;&gt;test&lt;/a&gt;:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/786db1ecb44c689ce18532cda794f0f7.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;We’ll need to pack a bit more power this time. In my case the issue only happened on class, enum and property declarations, CSharpSyntaxRewriter seems to be a good candidate for what I want to achieve. The implementation can be found &lt;a href=&quot;https://github.com/gabrielweyer/CodeCleanser/blob/4b7b769bdf104461decc7db0f6ce46a890de4351/Logic/AttributesSorter.cs#L46-L66&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/2daec819f25eca2679174c08985b599e.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;I had to make sure the blank line preceding the first attribute didn’t get moved down and that’s why there is some logic around leading trivia (prompted by this &lt;a href=&quot;https://github.com/gabrielweyer/CodeCleanser/blob/4b7b769bdf104461decc7db0f6ce46a890de4351/Tests/SortAttributesAlphabeticallyTests.cs#L180-L219&quot;&gt;test&lt;/a&gt;). Initially I was storing the AttributeListSyntax in a dictionary using the first attribute name as a key, of course I forgot that you could have the same attribute multiple time on a single declaration. It prompted me to write this &lt;a href=&quot;https://github.com/gabrielweyer/CodeCleanser/blob/4b7b769bdf104461decc7db0f6ce46a890de4351/Tests/SortAttributesAlphabeticallyTests.cs#L53-L9&quot;&gt;test&lt;/a&gt;) and adapt my implementation. It took me a few tries to get it right and rather than having to replace the files after each attempt I created a local Git repository, committed the unmodified files and issued a git reset after each attempt.&lt;/p&gt;

&lt;p&gt;After running CodeCleanser on the three DLLs I was able to confirm they were identical.&lt;/p&gt;

&lt;h1 id=&quot;plot-twist&quot;&gt;Plot twist&lt;/h1&gt;

&lt;p&gt;I contacted the governmental agency and asked them if they could provide us with the new version of their DLL. To my surprise they told me that they’re distributing source code only. Sure enough after a few Git commands I discovered we had the code under source control all along! Funnily enough nobody knew about it and it wouldn’t have helped anyway as history only go two years back.&lt;/p&gt;

&lt;h1 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h1&gt;

&lt;p&gt;The main takeaway is that everything is immutable in Roslyn. I kept forgetting that Add and AddRange would return a new AttributeListSyntax instead of performing an in place Add. As those methods have not been marked as Pure, ReSharper would not warm me that I didn’t use the return type and I would end up with an empty AttributeListSyntax. After 10 seconds of debugging I would exclaim “I’m an idiot” every single time, never gets old! Roslyn has changed a lot between the different Release Candidates and many code sample from Internet won’t compile.&lt;/p&gt;

&lt;p&gt;During my research I found &lt;a href=&quot;https://roslynquoter.azurewebsites.net/&quot;&gt;https://roslynquoter.azurewebsites.net/&lt;/a&gt;, it takes C# as an input and writes out the Roslyn code that will generate it.&lt;/p&gt;

&lt;p&gt;I realize CodeCleanser doesn’t do much and the whole comparing process still requires some manual steps but I hope it can help someone else.&lt;/p&gt;

</description>
        <pubDate>Sat, 04 Jun 2016 00:41:48 +0000</pubDate>
        <link>https://gabrielweyer.github.io//2016/06/04/codecleanser/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2016/06/04/codecleanser/</guid>
      </item>
    
      <item>
        <title>Barnes and Noble: a tale of poor security practices</title>
        <description>&lt;p&gt;Being the happy owner of a Kindle I usually buy my ebooks on Amazon. They have a very large selection to choose from and normally sell all the latest releases. To my surprise they only had “&lt;a href=&quot;(http://us.macmillan.com/enigmaofchina/qiuxiaolong)&quot;&gt;Enigma of China&lt;/a&gt;” from Qiu Xialong in paperback and hardcover formats. &lt;a href=&quot;http://store.kobobooks.com/en-US/Search/Query?query=Enigma%20of%20China&amp;amp;dontModifyQuery=True&quot;&gt;Kobo&lt;/a&gt; didn’t have it at all but after searching for a while I found out that Barnes &amp;amp; Noble sold it as a &lt;a href=&quot;http://www.barnesandnoble.com/w/enigma-of-china-qiu-xiaolong/1114701902?ean=9781250025814&quot;&gt;NOOK Book&lt;/a&gt; for $10.&lt;/p&gt;

&lt;p&gt;So far, so good or so it seemed. It turned out that Barnes &amp;amp; Noble has such a lax approach of security that at the end I decided not to purchase from them. You’ll find below the reasons that motivated my decision.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;i-sign-in-and-registration-in-a-new-window&quot;&gt;I Sign in and registration in a new window&lt;/h2&gt;

&lt;p&gt;The first issue made itself apparent very quickly: when clicking on the “Sign in” link the browser will open a new window. This new window does not contain a toolbar, which means that users won’t be able to use some password managers (such as 1Password, the Chrome extension being accessible through a button in the toolbar).&lt;/p&gt;

&lt;p&gt;I know that you can work around it as the &lt;a href=&quot;https://www.barnesandnoble.com/signin&quot;&gt;Sign in&lt;/a&gt; page is also available directly on the website. You can also use the shortcut “Ctrl + &quot; within the new window in order to enter your credentials via 1Password but I don’t think that everybody is a power user. Basically opening a new window instead of loading a page creates extra-friction when using a password manager.&lt;/p&gt;

&lt;p&gt;Of course the registration page is also located in a new window and within this page things got even more interesting!&lt;/p&gt;

&lt;h2 id=&quot;ii-mixed-content-warning&quot;&gt;II Mixed content warning&lt;/h2&gt;

&lt;p&gt;As they’re loading a dedicated sign in page, you would expect Barnes &amp;amp; Noble to use SSL properly. As it turned out the source code contains a link to an HTTP iframe. Chrome (rightly so) blocks the content and displays a warning:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-12-07-barnes-and-noble-a-tale-of-poor-security-practices/barnes-and-noble-sign-in-mixed-content-warning.png&quot;&gt;&lt;img src=&quot;/assets/2014-12-07-barnes-and-noble-a-tale-of-poor-security-practices/barnes-and-noble-sign-in-mixed-content-warning.png&quot; alt=&quot;Sign in: mixed content warning&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most interesting part is that the tracking page is also available via &lt;a href=&quot;https://4476037.fls.doubleclick.net/activityi;cat=signi0;ord=1641192771;src=4476037;type=signi0?&quot;&gt;SSL&lt;/a&gt;. The sign in page being loaded only over SSL, the link could have been hardcoded as SSL too.&lt;/p&gt;

&lt;h2 id=&quot;iii-weak-password-policy&quot;&gt;III Weak password policy&lt;/h2&gt;

&lt;p&gt;So Barnes and Noble decided to limit the number of characters I can use in my password to 15. Not only this but they’re also preventing me from using any special characters. I’m not sure what “&lt;em&gt;numeric symbol&lt;/em&gt;” means, some special characters might be allowed but as a user I’ve no idea which one I can use.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-12-07-barnes-and-noble-a-tale-of-poor-security-practices/barnes-and-noble-password-policy.png&quot;&gt;&lt;img src=&quot;/assets/2014-12-07-barnes-and-noble-a-tale-of-poor-security-practices/barnes-and-noble-password-policy.png&quot; alt=&quot;Barnes &amp;amp; noble: password policy&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s quite strange that the security answer is limited to 15 characters, what if my favorite movie is “&lt;a href=&quot;http://www.imdb.com/title/tt0111161/&quot;&gt;The Shawshank Redemption&lt;/a&gt;)”? Security questions are a terrible practice anyway as people tend to use easily guessable answers (as you can see in the screenshot I get my password manager to generate one for me).&lt;/p&gt;

&lt;h2 id=&quot;iv-mixed-content-warning-on-payment-page&quot;&gt;IV Mixed content warning on payment page&lt;/h2&gt;

&lt;p&gt;Even the payment page comes with a shiny warning:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-12-07-barnes-and-noble-a-tale-of-poor-security-practices/barnes-and-noble-payment-mixed-content-warning.png&quot;&gt;&lt;img src=&quot;/assets/2014-12-07-barnes-and-noble-a-tale-of-poor-security-practices/barnes-and-noble-payment-mixed-content-warning.png&quot; alt=&quot;Barnes &amp;amp; Noble: payment mixed content warning&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is due to the fact that the search form is posting to an &lt;a href=&quot;http://www.barnesandnoble.com/s/Enigma-of-China?store=allproducts&amp;amp;keyword=Enigma+of+China&quot;&gt;HTTP endpoint&lt;/a&gt; even when the page is loaded over SSL.&lt;/p&gt;

&lt;p&gt;At this stage I decided to give up, buying this book is not worth taking the risk of exposing my credit card data.&lt;/p&gt;

&lt;h2 id=&quot;special-bonus-credit-card-number-used-in-the-drm&quot;&gt;Special bonus: credit card number used in the DRM&lt;/h2&gt;

&lt;p&gt;Barnes and Noble decided to protect its content via the highly controversial use of a &lt;a href=&quot;http://en.wikipedia.org/wiki/Digital_rights_management&quot;&gt;DRM&lt;/a&gt; system (Amazon has made the same choice). The goal is to prevent the consumer from sharing it’s purchase with any other user. Of course DRM don’t work and they’re only being a major annoyance to the people actually paying for content.&lt;/p&gt;

&lt;p&gt;What is unusual is that Barnes and Noble decided that it would use your &lt;strong&gt;credit card number&lt;/strong&gt; in order to sign the DRM. This means that this data is included with your ebooks and could potentially be extracted.&lt;/p&gt;

&lt;h2 id=&quot;how-could-barnes--noble-address-those-issues&quot;&gt;How could Barnes &amp;amp; Noble address those issues?&lt;/h2&gt;

&lt;p&gt;Instead of opening a new window for sign in and registration the site should merely link to a new page. As a matter of fact they already have them in place: &lt;a href=&quot;https://www.barnesandnoble.com/signin&quot;&gt;sign in&lt;/a&gt; and &lt;a href=&quot;https://www.barnesandnoble.com/register&quot;&gt;registration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;They should also link to the SSL URL of the DoubleClick script on their sign in and registration page.&lt;/p&gt;

&lt;p&gt;Passwords should not be restricted in terms of character set or length. If you really want to have an upper limit it should be set to something ridiculously high (such as 100 characters). In fact they should instead enforce stronger passwords (combination of letters, numbers and symbols).&lt;/p&gt;

&lt;p&gt;The payment should be on a page of its own and not use the same layout (I don’t think that users need to be able to look for a book while entering their credit card details).&lt;/p&gt;

&lt;p&gt;And please stop encoding my credit card number into the books I’m buying from you. If you’re afraid I’ll remove your precious DRM and share the book on Internet there is nothing preventing you to use a unique string linked to my account.&lt;/p&gt;

&lt;p&gt;Some of those points are extremely easy to address (new page for sign in and registration, SSL URL for the tracking script), others will certainly be more challenging but are nevertheless necessary.&lt;/p&gt;

</description>
        <pubDate>Sun, 07 Dec 2014 06:16:14 +0000</pubDate>
        <link>https://gabrielweyer.github.io//2014/12/07/barnes-and-noble-a-tale-of-poor-security-practices/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2014/12/07/barnes-and-noble-a-tale-of-poor-security-practices/</guid>
      </item>
    
      <item>
        <title>The Good, the Bad and the Ugly of password practices</title>
        <description>&lt;p&gt;Internet has taken a preponderant place in our lives and most of us regularly purchase goods on Internet or use Internet banking. The access to the services we use is protected by a password and humans are not good at managing passwords:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Most of us will reuse the same password on many services (combine this with the fact that people also use the same email address to log in into said services and you get an explosive mix when security is breached on one &lt;a href=&quot;http://www.geekosystem.com/gawker-hack-acai-spam-twitter/&quot;&gt;service&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Most of us will use weak passwords, basically as weak as the service will allow. Not only our passwords are weak they’re also extremely &lt;a href=&quot;https://www.duosecurity.com/blog/brief-analysis-of-the-gawker-password-dump&quot;&gt;predictable&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To address those issues you need to use &lt;strong&gt;strong unique&lt;/strong&gt; passwords. By &lt;strong&gt;strong&lt;/strong&gt; I mean that your passwords should be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;long (let’s say at least 25 characters)&lt;/li&gt;
  &lt;li&gt;a mix of lower / upper case letters, digits and symbols&lt;/li&gt;
  &lt;li&gt;randomly generated (by a random generator not by you typing random keys on your keyboard)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By &lt;strong&gt;unique&lt;/strong&gt; I mean that you should &lt;em&gt;never&lt;/em&gt; reuse a password. You should set a different password on each service. As we tend to use many services and tend to log in from multiple devices (home and work computers, smartphones, tablets..) it makes it impossible to remember all those strong passwords.&lt;/p&gt;

&lt;p&gt;Google has &lt;a href=&quot;https://www.youtube.com/watch?v=0RCsHJfHL_4&quot;&gt;recommended&lt;/a&gt; the use of sentence and substitution, something even stronger has been advocated by &lt;a href=&quot;http://xkcd.com/936/&quot;&gt;xkcd&lt;/a&gt;. But this doesn’t work. I use over a hundred different services, how could I remember a hundred different sentences? Common substitutions (the one you will use) are also well documented and will be attempted by the attackers to guess your password. Other experts have advised to &lt;a href=&quot;https://medium.com/cyber-security/9ed56d483eb&quot;&gt;get rid of passwords&lt;/a&gt; altogether, but this opinion is unconventional to say the least.&lt;/p&gt;

&lt;p&gt;Want it or not we’re stuck with passwords for the  predictable future. Luckily there is a solution: it’s called a password manager. With a password manager you’ll only need to remember one password (the master password), all the other ones will be entered automatically for you in the login forms. I use &lt;a href=&quot;https://agilebits.com/onepassword&quot;&gt;1Password&lt;/a&gt;, but there are other products on the market: &lt;a href=&quot;https://lastpass.com/&quot;&gt;LastPass&lt;/a&gt;, &lt;a href=&quot;http://keepass.info/&quot;&gt;KeePass&lt;/a&gt;, &lt;a href=&quot;http://www.roboform.com/&quot;&gt;RoboForm&lt;/a&gt;… Most of those products are not free but I’m sure you’ll prefer to drop a few dozens dollars every few years instead of seeing your online (and sometimes offline) life ruined.&lt;/p&gt;

&lt;p&gt;Now that I’ve addressed password best practices on the users’ side it’s time to mention the other side. The services that you use should do everything they can in order to protect your password. There is a &lt;a href=&quot;http://www.troyhunt.com/2011/06/owasp-top-10-for-net-developers-part-7.html&quot;&gt;lot&lt;/a&gt; to say in this area but I decided to address the features that are easily observable:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;passwords requirements: services shouldn’t restrict the length of our passwords (at least not smaller than a few dozens characters) or the characters’ set that we can use (this would reduce the entropy)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.troyhunt.com/2013/05/your-login-form-posts-to-https-but-you.html&quot;&gt;proper use of HTTPS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.troyhunt.com/2012/05/everything-you-ever-wanted-to-know.html&quot;&gt;reset password feature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Due to the &lt;a href=&quot;http://heartbleed.com/&quot;&gt;Heartbleed&lt;/a&gt; vulnerability I decided to change some of my passwords recently. To my surprise many well known services impose some strong restrictions on the passwords users can set. Shall we get started? The offenders are ordered from worst ones to the most benign ones.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-ugly&quot;&gt;The ugly&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Use at your own risk. Most of those services do not use HTTPS properly or force you to choose passwords that are easily guessable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.airfrance.fr/cgi-bin/AF/FR/en/common/home/home/HomePageAction.do&quot;&gt;Air France&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not only Air France is loading the login form over HTTP, the password policy they enforce is a 4 digits PIN!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.caisse-epargne.fr/particuliers/ile-de-france/accueil.aspx&quot;&gt;Caisse d’Epargne&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the biggest French bank, forcing its users to use a 5 digits PIN as a password (and the login is the account number which is a semi-public information).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://weibo.com/&quot;&gt;Weibo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The service logs users in over HTTP and limiting the password length to 16 characters.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://doodle.com/en/&quot;&gt;Doodle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The service logs users in over HTTP! According to &lt;a href=&quot;http://en.blog.doodle.com/2014/04/10/important-security-news-from-doodle/&quot;&gt;them&lt;/a&gt;, they updated their system to patch the vulnerability. Of course as they don’t use HTTPS they were never vulnerable to this specific vulnerability in the first place.&lt;/p&gt;

&lt;h2 id=&quot;the-bad&quot;&gt;The bad&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Use with caution. Those services are not getting security, they’re exposing your passwords in clear via email.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://uberstrike.com/&quot;&gt;UberStrike&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The service is currently using an expired certificate. When changing your password you’ll receive an email containing your new password in clear (and stating “We’ve reset your UberStrike password” [&lt;em&gt;sic&lt;/em&gt;]).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-04-27-the-good-the-bad-and-the-ugly-of-password-practices/uberstrike-change-password.png&quot;&gt;&lt;img src=&quot;/assets/2014-04-27-the-good-the-bad-and-the-ugly-of-password-practices/uberstrike-change-password.png&quot; alt=&quot;uberstrike-change-password&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ielts.britishcouncil.org/CandidateLogin.aspx&quot;&gt;IELTS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The service does not allow you to change your password. This password is in fact your reference number that you need to use in every communication with IELTS’ staff.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.astrill.com/&quot;&gt;Astrill&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Astrill provide VPN services and allow (among other things) to access blocked websites from Mainland China. A VPN also prevents attackers from listening to your traffic. This service is mainly about security and so you would expect them to have pretty good practices in terms of passwords. It turns out that if you’re not currently a paying customer you can’t change your password. Even worse the support staff does not have the ability to delete your account and will instead send you a new password in clear via email (you can read the full conversation &lt;a href=&quot;/assets/2014-04-27-the-good-the-bad-and-the-ugly-of-password-practices/astrill-change-password.png&quot;&gt;here&lt;/a&gt;)!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-04-27-the-good-the-bad-and-the-ugly-of-password-practices/astrill-reset-password1.png&quot;&gt;&lt;img src=&quot;/assets/2014-04-27-the-good-the-bad-and-the-ugly-of-password-practices/astrill-reset-password1.png&quot; alt=&quot;astrill-reset-password&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://depot-marque.inpi.fr/index.html&quot;&gt;INPI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the French department in charge of registering patents and trademarks. When creating an account they’re kind enough to send you your password via email in clear. At least they’re deleting inactive accounts after three months.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-04-27-the-good-the-bad-and-the-ugly-of-password-practices/inpi-create-account.png&quot;&gt;&lt;img src=&quot;/assets/2014-04-27-the-good-the-bad-and-the-ugly-of-password-practices/inpi-create-account.png&quot; alt=&quot;inpi-create-account&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-almost-good&quot;&gt;The (almost) good&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;In this category you’ll find the offenders that almost got it right. But their policies are not good enough to get them off the hook. It’s all related to the maximal length of passwords and the allowed symbols.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://us.battle.net/en/&quot;&gt;Battle.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your password must be between 8–16 characters in length. Your password may only contain alphabetic characters (A–Z), numeric characters (0–9), and punctuation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Blizzard has been battling accounts hijacking for years. A better password policy would certainly help protect the accounts of their users.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.free.fr/adsl/index.html&quot;&gt;Free&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your password can’t be longer than 16 characters. Characters are restricted to a-z, A-Z, 0-9, #$,;.:*@[]()?+=-_%&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mymyki.com.au/NTSWebPortal/Common/getmyki/GetMykiOption.aspx?menu=Get%20myki&quot;&gt;Myki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your password can’t be longer than 15 characters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.optus.com.au/&quot;&gt;Optus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your password can’t be longer than 15 characters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.commbank.com.au/&quot;&gt;Commonwealth Bank&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;8 and 16 characters long. can contain most characters except &amp;lt;&amp;gt;^`{}~=&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The 16 characters limit is completely unacceptable coming from a bank!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.microsoft.com/en-au/default.aspx&quot;&gt;Microsoft&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your password can’t be longer than 16 characters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the biggest company present in this list and it’s quite disappointing coming from an enterprise software company. Microsoft accounts are also used by businesses to access Azure, MSDN…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.originenergy.com.au/&quot;&gt;Origin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The energy company in Australia (not the gaming service operated by EA).&lt;/p&gt;

&lt;p&gt;Not only you can’t use symbols but also the password length is limited to 20 characters. Origin only allows you to change your password once per 24 hours, I’ve no idea why this is the case on how it can make the service more secure.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.voyages-sncf.com/en/&quot;&gt;SNCF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Password must only contain numbers and/or letters. The length should not be bigger than 25 characters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.renren.com/&quot;&gt;RenRen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RenRen is limiting the password length to 20 characters.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.viadeo.com/&quot;&gt;Viadeo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your password can’t be longer than 20 characters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://btguard.com/&quot;&gt;BTGuard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The service prevents you from using symbols altogether:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Password must only contain numbers and/or letters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://my.gov.au/&quot;&gt;myGov&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This website allows Australians to manage their social benefits (medicare, Centrelink, child support…). The service has a pretty good policy but restricts you from using certain symbols:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can strengthen your password by including a mixture of upper and lower case letters, numbers, and the following special characters: !, @, #, $, %, ^, &amp;amp;, *.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://wordpress.com/&quot;&gt;WordPress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;ERROR: Passwords may not contain the character “\”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a minor violation as WordPress is only preventing us from using a single symbol and this is why the service sits at the last position of this list.&lt;/p&gt;

</description>
        <pubDate>Sun, 27 Apr 2014 09:17:31 +0000</pubDate>
        <link>https://gabrielweyer.github.io//2014/04/27/the-good-the-bad-and-the-ugly-of-password-practices/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2014/04/27/the-good-the-bad-and-the-ugly-of-password-practices/</guid>
      </item>
    
      <item>
        <title>Why You Should Not Use Chrome Extensions</title>
        <description>&lt;p&gt;Google Chrome Extensions have been &lt;a href=&quot;http://en.wikipedia.org/wiki/Google_Chrome#Extensions&quot;&gt;launched&lt;/a&gt; officially in January 2010. Their goal is to extend the browser by providing additional features, for example you could add a weather extension and then be able to see the weather’s forecast in your city in one click. Extensions have become widely popular and you’re now wondering what could be the issue with them.&lt;/p&gt;

&lt;h1 id=&quot;much-more-power-than-expected&quot;&gt;Much more power than expected&lt;/h1&gt;

&lt;p&gt;Google &lt;a href=&quot;/assets/2014-01-07-why-you-should-not-use-chrome-extensions/ads-13.png&quot;&gt;uses&lt;/a&gt; a system of &lt;a href=&quot;https://support.google.com/chrome_webstore/answer/186213?hl=en&amp;amp;rd=1&quot;&gt;permissions&lt;/a&gt; to determine what an extension will be able to do once installed. Those permissions are divided into three alert levels: high, medium and low. So far, so good? Not really, even the low level allows an extension to harvest your browsing history and the content of your clipboard.&lt;/p&gt;

&lt;p&gt;Extensions are built using JavaScript and HTML. Those are the exact same technologies used on websites. I’m sure you’re aware how modern websites refresh part of their content without reloading the whole page. Extensions can do this too: nothing is preventing a low level alert extension to detect that you’re pasting your email and password on Facebook in order to login. Then the extension can send the collected information to a remote server.&lt;/p&gt;

&lt;p&gt;In this case the exploit is fairly limited, you need the user to be copying / pasting the email and password for this to work (the extension would also collect everything that the user is copying and pasting). Whats about the medium and high level alert? This is where the real fun start, at this level of trust extensions can do whatever they want!&lt;/p&gt;

&lt;p&gt;A medium alert level extension can generate HTML elements on a page. It could perfectly hide a login form, replace it by it’s own, harvest your credentials and submit the hidden login form. A high alert level extension can do similar things but on your computer! This means that it could take your picture via your webcam, browse your hard drive looking for interesting files…&lt;/p&gt;

&lt;p&gt;You would think that all of this is hypothetical and Google would certainly remove any malicious extension, but in this case you would be wrong.&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;technical-breakdown-of-a-malicious-extension&quot;&gt;Technical breakdown of a malicious extension&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: this part is somehow technical.&lt;/p&gt;

&lt;p&gt;On the 5th of December 2013 I noticed that ads started to appear on top of Google Image Search. I’ve never seen ads there before. It also had this strange sentence “Ads not from this site”. I was intrigued and it didn’t take me long to find the culprit: &lt;a href=&quot;https://chrome.google.com/webstore/detail/awesome-screenshot-captur/alelhddbbhepgpmgidjdcjakblofbmce/details&quot;&gt;Awesome Screenshot: Capture &amp;amp; Annotate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Turns out a new version was published on the 5th of December and this is when it started to display ads. I wasn’t the only user to notice:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-01-07-why-you-should-not-use-chrome-extensions/ads-13.png&quot;&gt;&lt;img src=&quot;/assets/2014-01-07-why-you-should-not-use-chrome-extensions/ads-13.png&quot; alt=&quot;ads-1&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;/assets/2014-01-07-why-you-should-not-use-chrome-extensions/ads-23.png&quot;&gt;&lt;img src=&quot;/assets/2014-01-07-why-you-should-not-use-chrome-extensions/ads-23.png&quot; alt=&quot;ads-2&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;/assets/2014-01-07-why-you-should-not-use-chrome-extensions/ads-32.png&quot;&gt;&lt;img src=&quot;/assets/2014-01-07-why-you-should-not-use-chrome-extensions/ads-32.png&quot; alt=&quot;ads-3&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After a couple of hours everything went back to normal: I enabled the extension again and noticed that it wasn’t displaying ads anymore. I decided to dig deeper and downloaded the source code of the extension.&lt;/p&gt;

&lt;p&gt;Everything starts here: &lt;code class=&quot;highlighter-rouge&quot;&gt;\javascripts\content_script.js&lt;/code&gt; [&lt;a href=&quot;https://github.com/gabrielweyer/code-sample/blob/master/technical-blog/chrome-ext/src/3.5.7/javascripts/content_script.js#L763-L781&quot;&gt;line:763-781&lt;/a&gt;]&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/8248634.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This code is commented. I suspect this is because they pushed a second version the same day (this file was the only one modified on the 5th of December). It’s very easy to understand what’s going on here: if the user is browsing a site owned by Google the code should call &lt;code class=&quot;highlighter-rouge&quot;&gt;addAD&lt;/code&gt; (the function name in itself is rather explicit). The script will also reload the ads 1.5 seconds after the user has finished typing in the search bar.&lt;/p&gt;

&lt;p&gt;The function &lt;code class=&quot;highlighter-rouge&quot;&gt;addAD&lt;/code&gt; is located in the same file `\javascripts\content_script.js [&lt;a href=&quot;https://github.com/gabrielweyer/code-sample/blob/master/technical-blog/chrome-ext/src/3.5.7/javascripts/content_script.js#L631-L668&quot;&gt;line:631-668&lt;/a&gt;]. The code is a bit too long to past here but it’s calling another function [&lt;a href=&quot;https://github.com/gabrielweyer/code-sample/blob/master/technical-blog/chrome-ext/src/3.5.7/javascripts/content_script.js#L635&quot;&gt;line:635&lt;/a&gt;]&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/8248711.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This function will retrieve the ads and create the markup [&lt;a href=&quot;https://github.com/gabrielweyer/code-sample/blob/master/technical-blog/chrome-ext/src/3.5.7/javascripts/content_script.js#L644-L646&quot;&gt;line:644-646&lt;/a&gt;]&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/8248593.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The best part is located here: &lt;code class=&quot;highlighter-rouge&quot;&gt;\javascripts\bg.js&lt;/code&gt; [&lt;a href=&quot;https://github.com/gabrielweyer/code-sample/blob/master/technical-blog/chrome-ext/src/3.5.7/javascripts/bg.js#L154-L184&quot;&gt;line:154-184&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;First they’re doing a HTTP GET at: &lt;a href=&quot;http://api.hostip.info/get_json.php&quot;&gt;http://api.hostip.info/get_json.php&lt;/a&gt; and getting JSON as a reply&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/8248818.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The funny part is that I’m located in Melbourne and I was not using a proxy or a VPN at this time!&lt;/p&gt;

&lt;p&gt;Then this line says it all [&lt;a href=&quot;https://github.com/gabrielweyer/code-sample/blob/master/technical-blog/chrome-ext/src/3.5.7/javascripts/bg.js#L162&quot;&gt;line:162&lt;/a&gt;]&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/8248849.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;I find it really scary. These guys are obviously not very smart, they could just have replaced Google Ads by their own and keep exactly the same design. This way they could have stayed unnoticed for much longer. This also means (most likely) that there is nothing preventing extensions from harvesting passwords (either directly via JavaScript or by inserting DOM elements in the page). This extension has over a million users, the fact that they were not taken down indicates that Google needs to improve its security practices for extensions.&lt;/p&gt;

&lt;h1 id=&quot;why-hasnt-this-been-exploited-more&quot;&gt;Why hasn’t this been exploited more?&lt;/h1&gt;

&lt;p&gt;I suspect it has been used widely already. Recipe: create a popular extension (emulate a paying service for free, launch a football world cup tracker…), push an update that will sometimes be malicious. If the number of reports does not reach a certain threshold Google won’t investigate. Rinse and repeat.&lt;/p&gt;

&lt;p&gt;In fact this same extension was used again but for a different attack on the 17th of December:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-01-07-why-you-should-not-use-chrome-extensions/data-collection-1.png&quot;&gt;&lt;img src=&quot;/assets/2014-01-07-why-you-should-not-use-chrome-extensions/data-collection-1.png&quot; alt=&quot;data-collection-1&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;/assets/2014-01-07-why-you-should-not-use-chrome-extensions/data-collection-2.png&quot;&gt;&lt;img src=&quot;/assets/2014-01-07-why-you-should-not-use-chrome-extensions/data-collection-2.png&quot; alt=&quot;data-collection-2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is no accountability: most of the companies publishing extensions are completely unknown. Even if Google was to act they could just create new extensions under another name.&lt;/p&gt;

&lt;h1 id=&quot;take-away&quot;&gt;Take Away&lt;/h1&gt;

&lt;p&gt;I stopped using Chrome extensions and I think you should too. The risks vastly overshadow the benefits. In fact I think it is safe to use Chrome Extensions in a couple of cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When they come from a reputable source (Google, Evernote, Dropbox…)&lt;/li&gt;
  &lt;li&gt;When they’re part of a service you’re paying for (1Password for example)&lt;/li&gt;
  &lt;li&gt;When they’re open source&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 07 Jan 2014 09:13:53 +0000</pubDate>
        <link>https://gabrielweyer.github.io//2014/01/07/why-you-should-not-use-chrome-extensions/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2014/01/07/why-you-should-not-use-chrome-extensions/</guid>
      </item>
    
  </channel>
</rss>

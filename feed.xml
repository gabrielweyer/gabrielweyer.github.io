<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A somewhat technical blog</title>
    <description>My name is Gabriel Weyer. I’m a software developer and currently based in Melbourne, Australia. I blog about technology.</description>
    <link>https://gabrielweyer.github.io//</link>
    <atom:link href="https://gabrielweyer.github.io//feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Azure VM pricing</title>
        <description>&lt;p&gt;I was recently faced with an interesting problem. A company wanted to cost the migration of thousands of &lt;code class=&quot;highlighter-rouge&quot;&gt;VMs&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Azure&lt;/code&gt; using a &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/architecture/cloud-adoption/digital-estate/5-rs-of-rationalization#rehost&quot;&gt;lift and shift&lt;/a&gt; approach (also known as rehost). Due to the short deadline, we were not able to get our hands on detailed data. All we were provided with was a machine name, &lt;code class=&quot;highlighter-rouge&quot;&gt;CPU&lt;/code&gt; cores count, &lt;code class=&quot;highlighter-rouge&quot;&gt;RAM&lt;/code&gt; and a description field that was sometimes populated. Utilisation, storage and network usage were notably missing. We knew we couldn’t cost the migration accurately due to these unknowns, but we had enough data to cost the &lt;code class=&quot;highlighter-rouge&quot;&gt;VMs&lt;/code&gt; themselves as we had access to &lt;code class=&quot;highlighter-rouge&quot;&gt;CPU&lt;/code&gt; cores count and &lt;code class=&quot;highlighter-rouge&quot;&gt;RAM&lt;/code&gt;. I must also add that the &lt;code class=&quot;highlighter-rouge&quot;&gt;VMs&lt;/code&gt; varied greatly in their hardware specifications.&lt;/p&gt;

&lt;p&gt;Microsoft offers a &lt;a href=&quot;https://azure.microsoft.com/en-us/pricing/calculator/?service=virtual-machines&quot;&gt;pricing calculator&lt;/a&gt; but it only supports manual input which disqualified it for our use case. A few &lt;code class=&quot;highlighter-rouge&quot;&gt;Microsoft&lt;/code&gt; employees wrote web applications automating the pricing of &lt;code class=&quot;highlighter-rouge&quot;&gt;VMs&lt;/code&gt; by importing &lt;code class=&quot;highlighter-rouge&quot;&gt;Excel&lt;/code&gt; spreadsheets or &lt;code class=&quot;highlighter-rouge&quot;&gt;CSV&lt;/code&gt; files. The ones I tried only offered &lt;code class=&quot;highlighter-rouge&quot;&gt;USD&lt;/code&gt; as a currency and choked for anything bigger than a few hundred &lt;code class=&quot;highlighter-rouge&quot;&gt;VMs&lt;/code&gt;. The output file was using a &lt;code class=&quot;highlighter-rouge&quot;&gt;en-us&lt;/code&gt; culture so it had to be post-processed before being open in &lt;code class=&quot;highlighter-rouge&quot;&gt;Excel&lt;/code&gt;. I didn’t have the time to review and select a commercial solution (&lt;a href=&quot;https://azure.microsoft.com/en-us/services/azure-migrate/&quot;&gt;Azure Migrate&lt;/a&gt; requires to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;VM&lt;/code&gt; on-premises which was not possible). At the end of the day I came up with a semi-automated process that did the trick, but I felt that not much work would be required to empower teams to price &lt;code class=&quot;highlighter-rouge&quot;&gt;VMs&lt;/code&gt;.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Support multiple currencies&lt;/li&gt;
  &lt;li&gt;Support multiple cultures&lt;/li&gt;
  &lt;li&gt;Ability to automate refreshing of the pricing&lt;/li&gt;
  &lt;li&gt;Timeboxed to a weekend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: you can find the code on &lt;a href=&quot;https://github.com/gabrielweyer/azure-vm-pricing#readme&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-i-came-up-with&quot;&gt;What I came up with&lt;/h2&gt;

&lt;p&gt;My first goal was to retrieve the pricing from &lt;code class=&quot;highlighter-rouge&quot;&gt;Azure&lt;/code&gt;. I initially considered the &lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/azure/reference/mt219005(v=azure.100)&quot;&gt;Resource RateCard&lt;/a&gt; (part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Billing API&lt;/code&gt;) but this banner didn’t fill me with confidence:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/azure-vm-pricing/resource-ratecard.png&quot; alt=&quot;Resource RateCard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Billing API&lt;/code&gt; requires authentication and parameters to be passed in, which would have increased the complexity of the solution. I knew one place would have mostly up-to-date pricing: the &lt;a href=&quot;https://azure.microsoft.com/en-au/pricing/details/virtual-machines/windows/&quot;&gt;Virtual Machines Pricing&lt;/a&gt; page. This page displays all the available instances for a specific region. It is also possible to select a culture, currency and operating system. There is one problem though: the data is available as &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt; markup instead of an &lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;puppeteer&quot;&gt;Puppeteer&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://pptr.dev/&quot;&gt;Puppeteer&lt;/a&gt; allows you to control &lt;code class=&quot;highlighter-rouge&quot;&gt;Chrome&lt;/code&gt; or as the project puts it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It feels more natural to write a crawler in &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; is the language of the web after all). According to my limited &lt;a href=&quot;https://github.com/gabrielweyer/ui-tests&quot;&gt;experience&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Puppeteer&lt;/code&gt; is also significantly faster than &lt;code class=&quot;highlighter-rouge&quot;&gt;Selenium Web Driver&lt;/code&gt;. I didn’t bother creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; package so you’ll have to clone the &lt;a href=&quot;https://github.com/gabrielweyer/azure-vm-pricing#parser&quot;&gt;repository&lt;/a&gt; and follow the instructions. This is the kind of output you can expect from the tool:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;instance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;B1S&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;vCpu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ram&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;payAsYouGo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.028&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;oneYearReserved&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;threeYearReserved&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.014&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;threeYearReservedWithAzureHybridBenefit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.009&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Many&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;more&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;instances&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I made the assumption that a single culture and currency will be used through a pricing session and this is why I only encoded the region and operating system in the &lt;a href=&quot;https://github.com/gabrielweyer/azure-vm-pricing#parser-output&quot;&gt;generated file names&lt;/a&gt;. Calling this tool can easily be automated as it doesn’t require any configuration and generate files on disk. You could run it at regular intervals and publish the artefacts.&lt;/p&gt;

&lt;p&gt;Once we’ve got our hands on the pricing, all we need to do is size the &lt;code class=&quot;highlighter-rouge&quot;&gt;VMs&lt;/code&gt; and cost them.&lt;/p&gt;

&lt;h3 id=&quot;coster&quot;&gt;Coster&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Coster&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;.NET Core&lt;/code&gt; console application. Again, I didn’t bother pushing a &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; package so you’ll have to build from &lt;a href=&quot;https://github.com/gabrielweyer/azure-vm-pricing#coster&quot;&gt;source&lt;/a&gt;. You’ll need the pricing files generated by the &lt;code class=&quot;highlighter-rouge&quot;&gt;Parser&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Coster&lt;/code&gt; is expecting a &lt;code class=&quot;highlighter-rouge&quot;&gt;CSV&lt;/code&gt; file with the following format:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csv&quot; data-lang=&quot;csv&quot;&gt;Region,Name,CPU,RAM,Operating System
australia-southeast,SuperName,8,64,windows&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once done, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Coster&lt;/code&gt; will write a &lt;code class=&quot;highlighter-rouge&quot;&gt;CSV&lt;/code&gt; file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csv&quot; data-lang=&quot;csv&quot;&gt;Region,Name,Operating System,Instance,CPU,RAM,Pay as You Go,One Year Reserved,Three Year Reserved,Three Year Reserved with Azure Hybrid Benefit
australia-southeast,SuperName,windows,E8 v3,8,64,1.006,0.74334,0.60803,0.24003&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Let me know if you’re using these tools and I’ll tidy up and publish packages on &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt;. I can’t say I’ve tested it extensively so be ready for some rough edges!&lt;/p&gt;

</description>
        <pubDate>Wed, 06 Feb 2019 16:25:27 -0600</pubDate>
        <link>https://gabrielweyer.github.io//2019/02/06/azure-vm-pricing/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2019/02/06/azure-vm-pricing/</guid>
      </item>
    
      <item>
        <title>Advanced .NET Debugging #2</title>
        <description>&lt;p&gt;I’m continuing to read the excellent &lt;a href=&quot;https://www.goodreads.com/book/show/7306509-advanced-net-debugging&quot;&gt;Advanced .NET Debugging&lt;/a&gt; by Mario Hewardt. Last time I looked at &lt;a href=&quot;/2018/04/06/advanced-dotnet-debugging-1/&quot;&gt;finding the entry point of a native image&lt;/a&gt;. This time around I’ll be investigating the launch of a &lt;strong&gt;managed&lt;/strong&gt; image by &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;A hex viewer
    &lt;ul&gt;
      &lt;li&gt;I used the &lt;a href=&quot;https://peclrviewer.azurewebsites.net/&quot;&gt;PE CLR Viewer&lt;/a&gt; (&lt;strong&gt;disclaimer&lt;/strong&gt;: I created this truly ugly looking website)&lt;!--more--&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;In the section &lt;strong&gt;Loading .NET Assemblies&lt;/strong&gt; Mario explains how &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows&lt;/code&gt; is loading a managed image. He’s leveraging &lt;a href=&quot;https://docs.microsoft.com/en-us/cpp/build/reference/dumpbin-reference&quot;&gt;dumpbin.exe&lt;/a&gt; which requires a &lt;code class=&quot;highlighter-rouge&quot;&gt;Visual Studio&lt;/code&gt; installation &lt;strong&gt;with&lt;/strong&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;C++&lt;/code&gt; workload. This has two issues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;C++&lt;/code&gt; workload requires a few &lt;code class=&quot;highlighter-rouge&quot;&gt;GB&lt;/code&gt; of hard drive&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dumpbin&lt;/code&gt; presents a high-level view of the different headers, hence it’s not a good teaching tool as it abstracts the process of reading the bytes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I decided to try a different approach. I’ve compiled a &lt;strong&gt;x86&lt;/strong&gt; managed image which you can download &lt;a href=&quot;https://gabrielweyer.blob.core.windows.net/blog-samples/advanced-dotnet-debugging-2/net461-x86.exe&quot;&gt;here&lt;/a&gt;. You can then visualise it using the &lt;a href=&quot;https://peclrviewer.azurewebsites.net/&quot;&gt;PE CLR Viewer&lt;/a&gt; and follow me down the rabbit hole.&lt;/p&gt;

&lt;h2 id=&quot;finding-the-addressofentrypoint&quot;&gt;Finding the &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressOfEntryPoint&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;I recommend you first read the &lt;a href=&quot;/2018/04/06/advanced-dotnet-debugging-1/&quot;&gt;previous post&lt;/a&gt; in this series as it explains core concepts such as &lt;a href=&quot;/2018/04/06/advanced-dotnet-debugging-1/#endianness&quot;&gt;endianness&lt;/a&gt; and &lt;a href=&quot;/2018/04/06/advanced-dotnet-debugging-1/#relative-virtual-address&quot;&gt;Relative Virtual Address&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Last time I highlighted a formula to compute the &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressOfEntryPoint&lt;/code&gt; file offset:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Signature file offset + &lt;code class=&quot;highlighter-rouge&quot;&gt;0x28&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressOfEntryPoint&lt;/code&gt; file offset&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;signature file offset&lt;/code&gt; is always at file offset &lt;code class=&quot;highlighter-rouge&quot;&gt;0x3C&lt;/code&gt;. As seen below it has for value &lt;code class=&quot;highlighter-rouge&quot;&gt;0x80&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/advanced-dotnet-debugging-2/signature-file-offset.png&quot; alt=&quot;Signature file offset&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we have the &lt;code class=&quot;highlighter-rouge&quot;&gt;signature file offset&lt;/code&gt;, we can compute the &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressOfEntryPoint&lt;/code&gt; file offset:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x80&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;0x28&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;0xA8&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/advanced-dotnet-debugging-2/address-of-entry-point.png&quot; alt=&quot;AddressOfEntryPoint&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As seen above, &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressOfEntryPoint&lt;/code&gt; has for value &lt;code class=&quot;highlighter-rouge&quot;&gt;0x2716&lt;/code&gt;. But wait we’re not done, the &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressOfEntryPoint&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;RVA&lt;/code&gt; which we need to convert to a file offset.&lt;/p&gt;

&lt;h2 id=&quot;converting-the-entry-point-rva-to-a-file-offset&quot;&gt;Converting the entry point &lt;code class=&quot;highlighter-rouge&quot;&gt;RVA&lt;/code&gt; to a file offset&lt;/h2&gt;

&lt;p&gt;The entry point is located in the &lt;strong&gt;.text&lt;/strong&gt; section (the &lt;strong&gt;.text&lt;/strong&gt; section contains executable code), so we’ll need to locate the &lt;strong&gt;.text&lt;/strong&gt; section first and this is where the &lt;strong&gt;section headers&lt;/strong&gt; come into play. The &lt;strong&gt;section headers&lt;/strong&gt; is a conversion table between &lt;code class=&quot;highlighter-rouge&quot;&gt;RVA&lt;/code&gt; and file offset for the different sections:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/advanced-dotnet-debugging-2/text-section-header.png&quot; alt=&quot;.text section header&quot; /&gt;&lt;/p&gt;

&lt;p&gt;According to the screenshot above the &lt;strong&gt;.text&lt;/strong&gt; section has a base &lt;code class=&quot;highlighter-rouge&quot;&gt;RVA&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;0x2000&lt;/code&gt; and is located at file offset &lt;code class=&quot;highlighter-rouge&quot;&gt;0x200&lt;/code&gt;. Those two pieces of information will allow us to convert the entry point &lt;code class=&quot;highlighter-rouge&quot;&gt;RVA&lt;/code&gt; into an entry point file offset:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Entry point &lt;code class=&quot;highlighter-rouge&quot;&gt;RVA&lt;/code&gt; - .text base &lt;code class=&quot;highlighter-rouge&quot;&gt;RVA&lt;/code&gt; + .text file offset = entry point file offset&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s replace the placeholders with the values we obtained previously:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x2716&lt;/code&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;0x2000&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;0x200&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;0x916&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The entry point has for file offset &lt;code class=&quot;highlighter-rouge&quot;&gt;0x916&lt;/code&gt;. But as we’ll see in the next section, this is yet another level of indirection.&lt;/p&gt;

&lt;h2 id=&quot;jumping-into-the-import-address-table&quot;&gt;Jumping into the Import Address Table&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/advanced-dotnet-debugging-2/jump.png&quot; alt=&quot;JMP&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Apparently the first part (&lt;code class=&quot;highlighter-rouge&quot;&gt;FF25&lt;/code&gt;) is the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/x86-instructions#control_flow&quot;&gt;x86 instruction&lt;/a&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;JMP&lt;/code&gt; which instruct the computer to jump to an address (the second part):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JMP 402000&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x402000&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;VA&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;Virtual Address&lt;/code&gt;) based on the &lt;strong&gt;image base&lt;/strong&gt; which has a value of &lt;code class=&quot;highlighter-rouge&quot;&gt;0x400000&lt;/code&gt; (as seen in the &lt;strong&gt;NT specific fields header&lt;/strong&gt; section):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/advanced-dotnet-debugging-2/image-base.png&quot; alt=&quot;Image Base&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Armed with this knowledge we can convert the &lt;code class=&quot;highlighter-rouge&quot;&gt;VA&lt;/code&gt; to a &lt;code class=&quot;highlighter-rouge&quot;&gt;RVA&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;VA&lt;/code&gt; - image base &lt;code class=&quot;highlighter-rouge&quot;&gt;VA&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;RVA&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s replace the placeholders with the values we obtained previously:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x402000&lt;/code&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;0x400000&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;0x2000&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we look at the &lt;strong&gt;Data directories&lt;/strong&gt; section, we can see than the &lt;strong&gt;Import Address Table&lt;/strong&gt; is located at &lt;code class=&quot;highlighter-rouge&quot;&gt;RVA&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;0x2000&lt;/code&gt;. The &lt;strong&gt;Import Address Table&lt;/strong&gt; is the first section of the &lt;strong&gt;.text&lt;/strong&gt; section.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/advanced-dotnet-debugging-2/import-address-table-rva.png&quot; alt=&quot;Import Address Table RVA&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;jumping-out-of-the-import-address-table&quot;&gt;Jumping out of the Import Address Table&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/advanced-dotnet-debugging-2/import-address-table.png&quot; alt=&quot;Import Address Table&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;RVA&lt;/code&gt; located at file offset &lt;code class=&quot;highlighter-rouge&quot;&gt;0x200&lt;/code&gt; is: &lt;code class=&quot;highlighter-rouge&quot;&gt;0x26F8&lt;/code&gt;. Like a mad rabbit, we continue jumping around. We can reuse the formula to convert a &lt;code class=&quot;highlighter-rouge&quot;&gt;RVA&lt;/code&gt; to a file offset:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x26F8&lt;/code&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;0x2000&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;0x200&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;0x8F8&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now I have good news, &lt;code class=&quot;highlighter-rouge&quot;&gt;0x8F8&lt;/code&gt; is our final destination. Let’s inspect it more closely:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/advanced-dotnet-debugging-2/real-entry-point.png&quot; alt=&quot;Real entry point&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We skip the leading &lt;code class=&quot;highlighter-rouge&quot;&gt;NUL&lt;/code&gt; bytes, the other bytes are &lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt; characters. The first section is the function name &lt;code class=&quot;highlighter-rouge&quot;&gt;_CorExeMain&lt;/code&gt; and - coming after a &lt;code class=&quot;highlighter-rouge&quot;&gt;NUL&lt;/code&gt; byte - the second section is the name of the executable: &lt;code class=&quot;highlighter-rouge&quot;&gt;mscoree.dll&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As it turns out &lt;code class=&quot;highlighter-rouge&quot;&gt;mscoree.dll&lt;/code&gt; is located in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows&lt;/code&gt; directory:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/advanced-dotnet-debugging-2/mscoree.png&quot; alt=&quot;mscoree&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I’ve demonstrated how to find the entry point of a &lt;strong&gt;x86&lt;/strong&gt; managed image but in reality &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows&lt;/code&gt; knows how to execute a managed image just by looking at the &lt;strong&gt;CLI header&lt;/strong&gt;. In the case of &lt;strong&gt;x64&lt;/strong&gt; managed image the entry point is not even present!&lt;/p&gt;

</description>
        <pubDate>Fri, 18 May 2018 20:58:34 -0500</pubDate>
        <link>https://gabrielweyer.github.io//2018/05/18/advanced-dotnet-debugging-2/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2018/05/18/advanced-dotnet-debugging-2/</guid>
      </item>
    
      <item>
        <title>WinDbg #2 - The blocked async</title>
        <description>&lt;p&gt;Today’s exercise is not an exercise! The investigation I’m about to describe was triggered by a production outage affecting multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt;s - albeit not at the same time - at a customer. For obvious reasons I’ll not be able to share the code and will have to alter / obfuscate some of the commands’ results. I still think this is a valuable exercise as it is a classic example of an easy to make mistake leading to a catastrophic result.&lt;/p&gt;

&lt;p&gt;The other interesting point is that I had no idea what the issue was so I’ll not be following a script as I did in the first instalment.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-symptoms&quot;&gt;The symptoms&lt;/h2&gt;

&lt;p&gt;A week prior we had another production outage. One of our &lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt; became unresponsive, requests would sit in &lt;code class=&quot;highlighter-rouge&quot;&gt;Chrome&lt;/code&gt; waiting for minutes for the server to reply. Logs did not yield anything interesting and according to &lt;a href=&quot;https://newrelic.com/&quot;&gt;New Relic&lt;/a&gt; we had a quasiperfect &lt;a href=&quot;https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/apdex-measuring-user-satisfaction&quot;&gt;Apdex&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The working theory was that requests were failing early in the pipeline so that our logging did not pick anything&lt;/li&gt;
  &lt;li&gt;According to &lt;code class=&quot;highlighter-rouge&quot;&gt;New Relic&lt;/code&gt; our traffic plummeted during the outage. So basically, &lt;code class=&quot;highlighter-rouge&quot;&gt;New Relic&lt;/code&gt; was not capturing any of the failing requests and the dashboards were all green!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this stage I recommended to capture a memory dump before restarting the web app. The later happened but the former did not. The app recycled and started to serve production traffic again but we were left with few clues. Afterwards the operation team engaged Microsoft and learned than the thread count spiked during the outage.&lt;/p&gt;

&lt;p&gt;I then wrote a guide explaining how to write a memory dump and we instructed the operation team to capture a memory dump before recycling the app if the outage were to happen again.&lt;/p&gt;

&lt;p&gt;We were left with two clues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unresponsive web app&lt;/li&gt;
  &lt;li&gt;High thread count&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We had released a new version of this &lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt; a week before the outage. The release included a fix that I did for an intermittent &lt;code class=&quot;highlighter-rouge&quot;&gt;500&lt;/code&gt; error that our testers and front-end teams experienced. The patch involved modifying the lifetime of some classes involved in the logging system. The Pull Request had been approved after a heated discussion and as soon as news of the outage broke, fingers were pointed at my fix.&lt;/p&gt;

&lt;h2 id=&quot;draw-of-luck&quot;&gt;Draw of luck&lt;/h2&gt;

&lt;p&gt;Come Friday morning, I’m sipping my Dirty Chai while absently looking at &lt;code class=&quot;highlighter-rouge&quot;&gt;Slack&lt;/code&gt;. Suddenly a message catches my attention:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/windbg-2/unresponsive-again.png&quot; alt=&quot;Unresponsive again&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the same &lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt; that went down last week! My heart beats slightly faster while I fire up the &lt;code class=&quot;highlighter-rouge&quot;&gt;Azure&lt;/code&gt; portal. And sure enough the thread count is far too high for the current dev traffic this API is serving:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/windbg-2/oh-my-thread-count.png&quot; alt=&quot;Oh my thread count&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I write a memory dump, slurp the end of my Dirty Chai and go to work thinking I’ll allocate some &lt;code class=&quot;highlighter-rouge&quot;&gt;WinDbg&lt;/code&gt; time during the week-end.&lt;/p&gt;

&lt;h2 id=&quot;were-down-again&quot;&gt;We’re down again&lt;/h2&gt;

&lt;p&gt;A few hours later another &lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt; experiences a significant outage. The symptoms are eerily similar. I was waiting for another of my &lt;code class=&quot;highlighter-rouge&quot;&gt;PR&lt;/code&gt; to get approved but the process is being delayed as our build server is &lt;a href=&quot;https://githubengineering.com/crypto-deprecation-notice/&quot;&gt;down&lt;/a&gt;. I don’t have access to the memory dump that was written in production during the outage but it’s likely the outages have a common cause; hence I decide to take my frustration out on the memory dump I wrote in the morning.&lt;/p&gt;

&lt;h2 id=&quot;investigation&quot;&gt;Investigation&lt;/h2&gt;

&lt;h3 id=&quot;threads-all-the-things&quot;&gt;Threads all the things&lt;/h3&gt;

&lt;p&gt;The first question I had was: &lt;strong&gt;why do we have so many threads and what are they doing&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;I’ll start with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Threads&lt;/code&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands&quot;&gt;SOS command&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Displays all managed threads in the process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The first column is the thread &lt;code class=&quot;highlighter-rouge&quot;&gt;ID&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !threads
ThreadCount:      145
UnstartedThread:  0
BackgroundThread: 133
PendingThread:    0
DeadThread:       12
Hosted Runtime:   no
                                                                         Lock
       ID OSID ThreadOBJ    State GC Mode     GC Alloc Context  Domain   Count Apt Exception
   4    1 4420 05db3d78     28220 Preemptive  00000000:00000000 04e8e548 0     Ukn
  22    2 c3ac 05dc9200     2b220 Preemptive  00000000:00000000 04e8e548 0     MTA (Finalizer)
  23    3 108fc 05e0f738   102a220 Preemptive  00000000:00000000 04e8e548 0     MTA (Threadpool Worker)
  25    4 10ddc 05e1c0f0     21220 Preemptive  00000000:00000000 04e8e548 0     Ukn
  26    7 9010 05eb8e90   1020220 Preemptive  00000000:00000000 04e8e548 0     Ukn (Threadpool Worker)
#
# Abbreviated
#
 144  127 ed88 23f294b0   1029220 Preemptive  0E65ACE0:00000000 04e8e548 0     MTA (Threadpool Worker)
 145  141 ba3c 2407e100   3029220 Preemptive  0E61BF28:00000000 20e69ac0 0     MTA (Threadpool Worker)
 146  140 9cfc 23f20428   1029220 Preemptive  0A524AFC:00000000 04e8e548 0     MTA (Threadpool Worker)
 147  131 194f8 20f753a8   3029220 Preemptive  00000000:00000000 20e69ac0 0     MTA (Threadpool Worker)
 148  144 f4a8 23f20970   1029220 Preemptive  064DFA28:00000000 04e8e548 0     MTA (Threadpool Worker)
 149  145 9028 20f758f0     20220 Preemptive  06443CB8:00000000 04e8e548 0     Ukn
 150  143 16520 23f299f8   1029220 Preemptive  1253C4A8:00000000 04e8e548 0     MTA (Threadpool Worker)
 151  146 13db0 23f20eb8     20220 Preemptive  0E61FB98:00000000 04e8e548 0     Ukn&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I then pick a few threads to see what they’re doing. To achieve this I’ll combine two different commands:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/-e--thread-specific-command-&quot;&gt;Thread-Specific Command&lt;/a&gt;: The &lt;code class=&quot;highlighter-rouge&quot;&gt;~e&lt;/code&gt; command executes one or more commands for a specific thread&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~&amp;lt;thread-ID&amp;gt;e &amp;lt;command&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands&quot;&gt;CLRStack&lt;/a&gt;: Provides a stack trace of managed code only&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;thread-143&quot;&gt;Thread 143&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; ~143e !CLRStack
OS Thread Id: 0xb9ac (143)
Child SP       IP Call Site
2a8bd110 7712eb2c [GCFrame: 2a8bd110]
2a8bd2b8 7712eb2c [GCFrame: 2a8bd2b8]
2a8bd268 7712eb2c [HelperMethodFrame: 2a8bd268] System.Threading.Monitor.ReliableEnter(System.Object, Boolean ByRef)
2a8bd2f8 21ab107d Autofac.Core.Lifetime.LifetimeScope.GetOrCreateAndShare(System.Guid, System.Func`1)
2a8bd344 21ab0f15 Autofac.Core.Resolving.InstanceLookup.Execute()
2a8bd370 21ab0a16 Autofac.Core.Resolving.ResolveOperation.GetOrCreateInstance(Autofac.Core.ISharingLifetimeScope, Autofac.Core.IComponentRegistration, System.Collections.Generic.IEnumerable`1)
2a8bd390 21ab20e1 Autofac.Core.Resolving.InstanceLookup.ResolveComponent(Autofac.Core.IComponentRegistration, System.Collections.Generic.IEnumerable`1)
# Abbreviated&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So thread &lt;code class=&quot;highlighter-rouge&quot;&gt;143&lt;/code&gt; is trying to acquire a lock: &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Threading.Monitor.ReliableEnter(System.Object, Boolean ByRef)&lt;/code&gt;. Let’s look at another thread.&lt;/p&gt;

&lt;h4 id=&quot;thread-136&quot;&gt;Thread 136&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; ~136e !CLRStack
OS Thread Id: 0x17e4 (136)
Child SP       IP Call Site
2b07d610 7712eb2c [GCFrame: 2b07d610]
2b07d7bc 7712eb2c [GCFrame: 2b07d7bc]
2b07d76c 7712eb2c [HelperMethodFrame: 2b07d76c] System.Threading.Monitor.ReliableEnter(System.Object, Boolean ByRef)
2b07d7fc 21ab107d Autofac.Core.Lifetime.LifetimeScope.GetOrCreateAndShare(System.Guid, System.Func`1)
2b07d848 21ab0f15 Autofac.Core.Resolving.InstanceLookup.Execute()
2b07d874 21ab0a16 Autofac.Core.Resolving.ResolveOperation.GetOrCreateInstance(Autofac.Core.ISharingLifetimeScope, Autofac.Core.IComponentRegistration, System.Collections.Generic.IEnumerable`1)
2b07d894 21ab20e1 Autofac.Core.Resolving.InstanceLookup.ResolveComponent(Autofac.Core.IComponentRegistration, System.Collections.Generic.IEnumerable`1)
# Abbreviated&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Thread &lt;code class=&quot;highlighter-rouge&quot;&gt;136&lt;/code&gt; is also trying to acquire a lock.&lt;/p&gt;

&lt;h4 id=&quot;thread-123&quot;&gt;Thread 123&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; ~123e !CLRStack
OS Thread Id: 0x4ce4 (123)
Child SP       IP Call Site
3d14d850 7712eb2c [GCFrame: 3d14d850]
3d14d9fc 7712eb2c [GCFrame: 3d14d9fc]
3d14d9ac 7712eb2c [HelperMethodFrame: 3d14d9ac] System.Threading.Monitor.ReliableEnter(System.Object, Boolean ByRef)
3d14da3c 21ab107d Autofac.Core.Lifetime.LifetimeScope.GetOrCreateAndShare(System.Guid, System.Func`1)
3d14da88 21ab0f15 Autofac.Core.Resolving.InstanceLookup.Execute()
3d14dab4 21ab0a16 Autofac.Core.Resolving.ResolveOperation.GetOrCreateInstance(Autofac.Core.ISharingLifetimeScope, Autofac.Core.IComponentRegistration, System.Collections.Generic.IEnumerable`1)
3d14dad4 21ab20e1 Autofac.Core.Resolving.InstanceLookup.ResolveComponent(Autofac.Core.IComponentRegistration, System.Collections.Generic.IEnumerable`1)
# Abbreviated&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Thread &lt;code class=&quot;highlighter-rouge&quot;&gt;123&lt;/code&gt; is also trying to acquire a lock. By now &lt;strong&gt;it’s safe to assume than many threads are trying to acquire a lock. How many of them exactly? And more importantly: which naughty thread is holding on the lock?&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;who-is-holding-on-the-lock&quot;&gt;Who is holding on the lock?&lt;/h3&gt;

&lt;p&gt;Time to use another &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands&quot;&gt;SOS command&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;SyncBlk&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !syncblk
Index         SyncBlock MonitorHeld Recursion Owning Thread Info          SyncBlock Owner
   52 20ee3118          229         2 20fc6ba0 9628  42   0a13ee8c System.Object
-----------------------------
Total           279
CCW             4
RCW             3
ComClassFactory 0
Free            206&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Thread &lt;code class=&quot;highlighter-rouge&quot;&gt;ID&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;42&lt;/code&gt; is holding the lock. The third column (&lt;code class=&quot;highlighter-rouge&quot;&gt;MonitorHeld&lt;/code&gt;) indicates how many threads are trying to acquire the same lock. In this case it is &lt;code class=&quot;highlighter-rouge&quot;&gt;114&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;(229 - 1) / 2&lt;/code&gt;). You can read more about how I computed this number in this &lt;a href=&quot;https://stackoverflow.com/a/2203085/57369&quot;&gt;Stack Overflow answer&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-is-thread-42-doing&quot;&gt;What is thread 42 doing?&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; ~42e !CLRStack
OS Thread Id: 0x9628 (42)
Child SP       IP Call Site
293bd178 7712eb2c [GCFrame: 293bd178]
293bd228 7712eb2c [HelperMethodFrame_1OBJ: 293bd228] System.Threading.Monitor.ObjWait(Boolean, Int32, System.Object)
293bd2b4 707bc273 System.Threading.Monitor.Wait(System.Object, Int32, Boolean) [f:\dd\ndp\clr\src\BCL\system\threading\monitor.cs @ 203]
293bd2c4 7084ca14 System.Threading.Monitor.Wait(System.Object, Int32) [f:\dd\ndp\clr\src\BCL\system\threading\monitor.cs @ 213]
293bd2c8 707ccb56 System.Threading.ManualResetEventSlim.Wait(Int32, System.Threading.CancellationToken)
293bd31c 707c785c System.Threading.Tasks.Task.SpinThenBlockingWait(Int32, System.Threading.CancellationToken) [f:\dd\ndp\clr\src\BCL\system\threading\Tasks\Task.cs @ 3320]
293bd35c 70868aed System.Threading.Tasks.Task.InternalWait(Int32, System.Threading.CancellationToken) [f:\dd\ndp\clr\src\BCL\system\threading\Tasks\Task.cs @ 3259]
293bd3c0 707c58ca System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task) [f:\dd\ndp\clr\src\BCL\system\runtime\compilerservices\TaskAwaiter.cs @ 148]
293bd3cc 1f4e5fd3 Contoso.AzureKeyVaultClient.GetSecretByName(System.String)
293bd3d8 1f4e5d80 Contoso.SecureAppSettings.GetOrFail(System.String)
293bd3f0 1f4e5ccb Contoso.CachableSecureAppSettings.GetOrFail(System.String)
293bd404 218b4f94 Contoso.SomeSecureSettings..ctor(Contoso.ISecureSettings)
293bd418 20af91eb DynamicClass.lambda_method(System.Runtime.CompilerServices.Closure, System.Object[])
293bd424 21ab1ef5 Autofac.Core.Activators.Reflection.ConstructorParameterBinding.Instantiate()&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last line executed in our code was:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Contoso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AzureKeyVaultClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetSecretByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Despite its name it seems to be executing &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; code and even more troubling it looks like we’re blocking. I have enough information to locate the source and find the following method:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetSecretByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secretName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetSecretByNameAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secretName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAwaiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sure enough we’re blocking on an &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; method. I’ll let Stephen Cleary explains what’s wrong but it can be summed up as: &lt;a href=&quot;http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html&quot;&gt;Don’t Block on Async Code&lt;/a&gt; (seriously read the blog post).&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;There are two alternatives:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Resolve the secret on application startup. At this stage we’re single threaded and there is no request context so we can block without risking a deadlock. It isn’t pretty and will slow down the application startup but it works.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A nicer option would be to resolve the secret when needed (lazy initialization). By then we’ll be in an &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; method and we will be able to call the &lt;code class=&quot;highlighter-rouge&quot;&gt;Async&lt;/code&gt; overload.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Once again &lt;code class=&quot;highlighter-rouge&quot;&gt;WinDbg&lt;/code&gt; has delivered the goods. I write up my findings and communicate them to my colleagues. It’s 4:30 PM and the build server is still not fixed, I decide to call it a day.&lt;/p&gt;

</description>
        <pubDate>Fri, 04 May 2018 17:59:01 -0500</pubDate>
        <link>https://gabrielweyer.github.io//2018/05/04/windbg-2-blocked-async/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2018/05/04/windbg-2-blocked-async/</guid>
      </item>
    
      <item>
        <title>Cake build</title>
        <description>&lt;p&gt;&lt;strong&gt;5th of Jan 2019&lt;/strong&gt;: a lot has been happening since I initially wrote this post. &lt;code class=&quot;highlighter-rouge&quot;&gt;Azure DevOps&lt;/code&gt; released a free tier for open source projects, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Cake&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;GitVersion&lt;/code&gt; contributors have been hard at work to take advantage of the latest features of &lt;code class=&quot;highlighter-rouge&quot;&gt;.NET Core&lt;/code&gt;. So much things have changed that I decided to update this post to reflect the current state of affairs (inclusion of &lt;code class=&quot;highlighter-rouge&quot;&gt;Azure DevOps&lt;/code&gt;, upgrade to &lt;code class=&quot;highlighter-rouge&quot;&gt;.NET Core 2.2&lt;/code&gt;, utilisation of &lt;code class=&quot;highlighter-rouge&quot;&gt;.NET Core global tools&lt;/code&gt; and removing the &lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&lt;/code&gt; requirement on &lt;code class=&quot;highlighter-rouge&quot;&gt;Unix&lt;/code&gt; platforms).&lt;/p&gt;

&lt;p&gt;As a developer I’m amazed by the number of free tools and services available. I wanted to create an end-to-end demo of a &lt;code class=&quot;highlighter-rouge&quot;&gt;CI/CD&lt;/code&gt; pipeline that would include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2018/04/21/cake-build/#configuration&quot;&gt;Trigger a build on commit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2018/04/21/cake-build/#semantic-versioning&quot;&gt;Use semantic versioning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2018/04/21/cake-build/#run-the-tests&quot;&gt;Run tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2018/04/21/cake-build/#publish-the-test-results&quot;&gt;Publish test results&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2018/04/21/cake-build/#create-nuget-packages&quot;&gt;Create NuGet packages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2018/04/21/cake-build/#publish-the-nuget-packages&quot;&gt;Publish the NuGet packages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2018/04/21/cake-build/#create-a-github-release&quot;&gt;Create a GitHub release&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For my purpose I wanted anonymous users to have access to a read-only view. I initially selected &lt;a href=&quot;https://www.appveyor.com/&quot;&gt;AppVeyor&lt;/a&gt; as it seems to be the most popular choice for &lt;code class=&quot;highlighter-rouge&quot;&gt;.NET&lt;/code&gt; open-source projects. But while browsing around I discovered than projects were often using more than one platform. &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt; and &lt;a href=&quot;https://circleci.com/&quot;&gt;CircleCI&lt;/a&gt; seemed to be the two other prevailing options. Since the initial version of this post, &lt;a href=&quot;https://azure.microsoft.com/en-au/services/devops/&quot;&gt;Azure DevOps&lt;/a&gt; has released a free and unlimited plan for open source projects. I decided to leverage the four platforms so that I could highlight their pros and cons.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;The code is hosted on the &lt;code class=&quot;highlighter-rouge&quot;&gt;GitHub&lt;/code&gt; repository &lt;a href=&quot;https://github.com/gabrielweyer/cake-build&quot;&gt;Cake build&lt;/a&gt;. It’s named &lt;a href=&quot;https://cakebuild.net/&quot;&gt;Cake&lt;/a&gt; after my favourite build automation system and the project is using &lt;code class=&quot;highlighter-rouge&quot;&gt;Cake&lt;/code&gt; as its build system.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AppVeyor&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Azure DevOps&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CircleCI&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Travis CI&lt;/code&gt; all use &lt;a href=&quot;http://yaml.org/&quot;&gt;YAML&lt;/a&gt; configuration files. This means that your build steps are living in the same space than your code and this presents several benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Any developer can modify the build&lt;/li&gt;
  &lt;li&gt;The project is self-contained
    &lt;ul&gt;
      &lt;li&gt;Developers don’t have to search where the build is located&lt;/li&gt;
      &lt;li&gt;It doesn’t matter if something terrible happens to the build server&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ability to run the build locally on some platforms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m sure you’ll be as surprised as I was when I realised how simple the &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt; files are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AppVeyor&lt;/code&gt;: &lt;a href=&quot;https://github.com/gabrielweyer/cake-build/blob/master/appveyor.yml&quot;&gt;appveyor.yml&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Azure DevOps&lt;/code&gt;: &lt;a href=&quot;https://github.com/gabrielweyer/cake-build/blob/master/azure-pipelines.yml&quot;&gt;azure-pipelines.yml&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CircleCI&lt;/code&gt;: &lt;a href=&quot;https://github.com/gabrielweyer/cake-build/blob/master/.circleci/config.yml&quot;&gt;.circleci/config.yml&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Travis CI&lt;/code&gt;: &lt;a href=&quot;https://github.com/gabrielweyer/cake-build/blob/master/.travis.yml&quot;&gt;.travis.yml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The code&lt;/h2&gt;

&lt;p&gt;The project is useless. What is important is that it describes a real-life scenario:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The solution contains two projects which will be packed as &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; packages
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Logic&lt;/code&gt; project references a &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; package from &lt;a href=&quot;https://www.nuget.org/&quot;&gt;nuget.org&lt;/a&gt; via a &lt;code class=&quot;highlighter-rouge&quot;&gt;PackageReference&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet pack&lt;/code&gt; will turn this into a package reference.&lt;/li&gt;
      &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;SuperLogic&lt;/code&gt; project depends on &lt;code class=&quot;highlighter-rouge&quot;&gt;Logic&lt;/code&gt; and when packing, this project reference will be turned into a &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; package reference (handled out of the box by &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet pack&lt;/code&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The projects target both &lt;code class=&quot;highlighter-rouge&quot;&gt;nestandard2.0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;net461&lt;/code&gt; so they can also be used with the &lt;code class=&quot;highlighter-rouge&quot;&gt;.NET Framework&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;net461&lt;/code&gt; and above)
    &lt;ul&gt;
      &lt;li&gt;The resulting &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; packages should contain &lt;code class=&quot;highlighter-rouge&quot;&gt;DLL&lt;/code&gt;s for both frameworks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The projects reference a third project that should be embedded as a &lt;code class=&quot;highlighter-rouge&quot;&gt;DLL&lt;/code&gt; rather than being referenced as a &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; package
    &lt;ul&gt;
      &lt;li&gt;This is not yet supported by the new tooling but can be &lt;a href=&quot;#create-nuget-packages&quot;&gt;achieved&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cake&quot;&gt;Cake&lt;/h2&gt;

&lt;h3 id=&quot;mono&quot;&gt;Mono&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&lt;/code&gt; is not required any more when building on &lt;code class=&quot;highlighter-rouge&quot;&gt;Linux&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;macOS&lt;/code&gt;. This is a massive achievement from the &lt;a href=&quot;https://github.com/cake-build/cake/graphs/contributors&quot;&gt;Cake&lt;/a&gt; and &lt;a href=&quot;https://github.com/GitTools/GitVersion/graphs/contributors&quot;&gt;GitVersion&lt;/a&gt; contributors. The build step installing &lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&lt;/code&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;CircleCI&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Travis CI&lt;/code&gt; never took less than &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; minutes and would sometimes take over &lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt; minutes on &lt;code class=&quot;highlighter-rouge&quot;&gt;Travis CI&lt;/code&gt;! As a result the build script has been simplified and is doing less platform specific handling.&lt;/p&gt;

&lt;h3 id=&quot;pinning-cake-version&quot;&gt;Pinning &lt;code class=&quot;highlighter-rouge&quot;&gt;Cake&lt;/code&gt; version&lt;/h3&gt;

&lt;p&gt;Pinning the version of &lt;code class=&quot;highlighter-rouge&quot;&gt;Cake&lt;/code&gt; guarantees you’ll be using the same version of &lt;code class=&quot;highlighter-rouge&quot;&gt;Cake&lt;/code&gt; on your machine and on the build servers. This is enforced via the bootstrap scripts for developers’ machines (&lt;a href=&quot;https://github.com/gabrielweyer/cake-build/blob/master/bootstrap.ps1&quot;&gt;bootstrap.ps1&lt;/a&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows&lt;/code&gt;, &lt;a href=&quot;https://github.com/gabrielweyer/cake-build/blob/master/bootstrap.sh&quot;&gt;bootstrap.sh&lt;/a&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;Unix&lt;/code&gt;) and in the &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt; files for the build servers.&lt;/p&gt;

&lt;h2 id=&quot;semantic-versioning&quot;&gt;Semantic versioning&lt;/h2&gt;

&lt;p&gt;As I’m releasing packages I decided to use &lt;a href=&quot;https://semver.org/&quot;&gt;semantic versioning&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Consider a version format of &lt;code class=&quot;highlighter-rouge&quot;&gt;X.Y.Z&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;Major.Minor.Patch&lt;/code&gt;). Bug fixes not affecting the API increment the &lt;strong&gt;patch&lt;/strong&gt; version, backwards compatible API additions/changes increment the &lt;strong&gt;minor&lt;/strong&gt; version, and backwards incompatible API changes increment the &lt;strong&gt;major&lt;/strong&gt; version.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Semantic versioning allows the consumers of your binaries to assess the effort to upgrade to a newer version. Semantic versioning should not be used blindly for all kinds of projects. It makes a lot of sense for a &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; package but it doesn’t for a product or an &lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt; for example.&lt;/p&gt;

&lt;h3 id=&quot;versioning-in-net&quot;&gt;Versioning in &lt;code class=&quot;highlighter-rouge&quot;&gt;.NET&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;.NET&lt;/code&gt; we use four properties to handle versioning:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AssemblyVersion&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;AssemblyFileVersion&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AssemblyInformationalVersion&lt;/code&gt; to version assemblies&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PackageVersion&lt;/code&gt; to version a &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; package&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;versioning-an-assembly&quot;&gt;Versioning an assembly&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/65062&quot;&gt;These&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/a/802038&quot;&gt;two&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;StackOverflow&lt;/code&gt; are great at explaining how to version an assembly.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AssemblyVersion&lt;/code&gt;: the only version the &lt;code class=&quot;highlighter-rouge&quot;&gt;CLR&lt;/code&gt; cares about (if you use &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/app-domains/strong-named-assemblies&quot;&gt;strong named assemblies&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Curiously enough the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/app-domains/assembly-versioning#assembly-version-number&quot;&gt;official documentation&lt;/a&gt; is sparse on the &lt;a href=&quot;https://blogs.msdn.microsoft.com/msbuild/2007/01/03/why-are-build-numbers-limited-to-65535/&quot;&gt;topic&lt;/a&gt; but this what I came up with after doing some reading:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AssemblyVersion&lt;/code&gt; can be defined as &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;major-version&amp;gt;.&amp;lt;minor-version&amp;gt;.&amp;lt;build-number&amp;gt;.&amp;lt;revision&amp;gt;&lt;/code&gt; where each of the four segment is a &lt;code class=&quot;highlighter-rouge&quot;&gt;16-bit&lt;/code&gt; unsigned number.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AssemblyInformationalVersion&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; that attaches additional version information to an assembly for informational purposes only. Corresponds to the product’s marketing literature, packaging, or product name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AssemblyInformationalVersion&lt;/code&gt; is well &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/app-domains/assembly-versioning#assembly-informational-version&quot;&gt;documented&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AssemblyFileVersion&lt;/code&gt;: intended to uniquely identify a build of the individual assembly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Developers tend to auto-increment this on each build. I prefer it linked to a &lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;tag&lt;/code&gt; to be able to reproduce a build. I also use the same &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;AssemblyInformationalVersion&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AssemblyFileVersion&lt;/code&gt; (I’m a bad person I know).&lt;/p&gt;

&lt;h4 id=&quot;versioning-a-nuget-package&quot;&gt;Versioning a &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; package&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PackageVersion&lt;/code&gt;: A specific package is always referred to using its package identifier and an exact version number&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; package versioning is described &lt;a href=&quot;https://docs.microsoft.com/en-us/nuget/reference/package-versioning&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;gitversion&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GitVersion&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;I’ve implemented semantic versioning using &lt;a href=&quot;https://github.com/GitTools/GitVersion&quot;&gt;GitVersion&lt;/a&gt;. I recommend using &lt;a href=&quot;https://guides.github.com/introduction/flow/&quot;&gt;GitHub Flow&lt;/a&gt; when working on a simple package. In my experience &lt;a href=&quot;https://trunkbaseddevelopment.com/&quot;&gt;Trunk Based Development&lt;/a&gt; tends to lead to lower code quality. Developers push early and often thinking they will fix it later but we all know than in software development later means never.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GitVersion&lt;/code&gt; produces an output that will allow you to handle even the trickiest situations:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Major&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Minor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Patch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PreReleaseTag&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;region-endpoint.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PreReleaseTagWithDash&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-region-endpoint.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PreReleaseLabel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;region-endpoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PreReleaseNumber&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BuildMetaData&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BuildMetaDataPadded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FullBuildMetaData&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Branch.features/region-endpoint.Sha.1f05a4bb4ebda8b293fbd139063ce3af22b1935a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MajorMinorPatch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SemVer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.3-region-endpoint.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;LegacySemVer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.3-region-endpoint2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;LegacySemVerPadded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.3-region-endpoint0002&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AssemblySemVer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.3.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FullSemVer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.3-region-endpoint.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;InformationalVersion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.3-region-endpoint.2+Branch.features/region-endpoint.Sha.1f05a4bb4ebda8b293fbd139063ce3af22b1935a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BranchName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;features/region-endpoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sha&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1f05a4bb4ebda8b293fbd139063ce3af22b1935a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NuGetVersionV2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.3-region-endpoint0002&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NuGetVersion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.3-region-endpoint0002&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CommitsSinceVersionSource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CommitsSinceVersionSourcePadded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0002&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CommitDate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2018-01-31&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In my case I’m using:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AssemblySemVer&lt;/code&gt; as the &lt;code class=&quot;highlighter-rouge&quot;&gt;AssemblyVersion&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NuGetVersion&lt;/code&gt; as the &lt;code class=&quot;highlighter-rouge&quot;&gt;AssemblyInformationalVersion&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;AssemblyFileVersion&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;PackageVersion&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to handle rebasing and &lt;code class=&quot;highlighter-rouge&quot;&gt;Pull Request&lt;/code&gt;s you’ll have to use a more complex versioning strategy (keep in mind that &lt;code class=&quot;highlighter-rouge&quot;&gt;GitHub&lt;/code&gt; &lt;a href=&quot;https://help.github.com/articles/about-pull-requests/&quot;&gt;does not support rebasing&lt;/a&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;Pull Request&lt;/code&gt;s).&lt;/p&gt;

&lt;p&gt;As an aside &lt;code class=&quot;highlighter-rouge&quot;&gt;Cake&lt;/code&gt; allows you to &lt;a href=&quot;https://cakebuild.net/api/Cake.AppVeyor/AppVeyorBuild/069D8D3F&quot;&gt;set&lt;/a&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;AppVeyor&lt;/code&gt; build number.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/cake-build/app-veyor-version.png&quot; alt=&quot;AppVeyor version&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;run-the-tests&quot;&gt;Run the tests&lt;/h2&gt;

&lt;p&gt;As &lt;code class=&quot;highlighter-rouge&quot;&gt;Travis CI&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CircleCI&lt;/code&gt; are running on &lt;code class=&quot;highlighter-rouge&quot;&gt;Linux&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;macOS&lt;/code&gt; they don’t support testing against &lt;code class=&quot;highlighter-rouge&quot;&gt;net461&lt;/code&gt;. Luckily the framework can be enforced using an argument: &lt;code class=&quot;highlighter-rouge&quot;&gt;-framework netcoreapp2.0&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;publish-the-test-results&quot;&gt;Publish the test results&lt;/h2&gt;

&lt;h3 id=&quot;circleci&quot;&gt;CircleCI&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CircleCI&lt;/code&gt; has a few quirks when it comes to testing.&lt;/p&gt;

&lt;p&gt;First it only support the &lt;a href=&quot;http://llg.cubic.org/docs/junit/&quot;&gt;JUnit format&lt;/a&gt; so I had to write a &lt;a href=&quot;https://github.com/gabrielweyer/xunit-to-junit&quot;&gt;transform&lt;/a&gt; to be able to publish the test results. Then you must place your test results within a folder named after the test framework you are using if you want &lt;code class=&quot;highlighter-rouge&quot;&gt;CircleCI&lt;/code&gt; to identify your test framework.&lt;/p&gt;

&lt;p&gt;When the tests run successfully &lt;code class=&quot;highlighter-rouge&quot;&gt;CirceCI&lt;/code&gt; will only display the slowest test:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/cake-build/circle-ci-slowest-test.png&quot; alt=&quot;Circle CI slowest test&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I don’t understand the use case, I would prefer the list of tests and timing and the ability to sort them client-side.&lt;/p&gt;

&lt;p&gt;The output for failed tests is not ideal but it might be due to the way I transform the test results:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/cake-build/circle-ci-failed-test.png&quot; alt=&quot;Circle CI failed test&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I decided not to invest more time on this as &lt;code class=&quot;highlighter-rouge&quot;&gt;CircleCI&lt;/code&gt; has zero documentation around publishing test results.&lt;/p&gt;

&lt;h3 id=&quot;appveyor&quot;&gt;AppVeyor&lt;/h3&gt;

&lt;p&gt;Again, the integration between &lt;code class=&quot;highlighter-rouge&quot;&gt;Cake&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AppVeyor&lt;/code&gt; shines in this area as &lt;code class=&quot;highlighter-rouge&quot;&gt;Cake&lt;/code&gt; will automatically publish the test results for you (I wondered why I had duplicate test results until I &lt;a href=&quot;https://en.wikipedia.org/wiki/RTFM&quot;&gt;RTFM&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AppVeyor&lt;/code&gt; displays all the tests but you must hover to see the framework used:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/cake-build/app-veyor-test-success.png&quot; alt=&quot;AppVeyor framework&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Failed tests come with a nice formatting and a &lt;code class=&quot;highlighter-rouge&quot;&gt;StackTrace&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/cake-build/app-veyor-failed-test.png&quot; alt=&quot;AppVeyor failed test&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;travis-ci&quot;&gt;Travis CI&lt;/h3&gt;

&lt;p&gt;What about &lt;code class=&quot;highlighter-rouge&quot;&gt;Travis CI&lt;/code&gt; you may ask. It turns out &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Travis CI&lt;/code&gt; doesn’t parse test results&lt;/strong&gt;! All you can rely on is the build log, luckily for us &lt;code class=&quot;highlighter-rouge&quot;&gt;xUnit&lt;/code&gt; is awesome:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Contoso.Hello.HelloTests.EvenMoreUselessTests.WhenDoWork_ThenSomeSweetJson [FAIL]
  Assert.Equal() Failure
                  ↓ (pos 6)
  Expected: Some JASON (maybe): &quot;Hello&quot;
  Actual:   Some JSON (maybe): &quot;Hello&quot;
                  ↑ (pos 6)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;create-nuget-packages&quot;&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; packages&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.NET Core&lt;/code&gt; is leveraging the new &lt;code class=&quot;highlighter-rouge&quot;&gt;*.csproj&lt;/code&gt; system and this means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No more &lt;code class=&quot;highlighter-rouge&quot;&gt;packages.config&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;No more &lt;code class=&quot;highlighter-rouge&quot;&gt;*.nuspec&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;No more tears&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The references (projects and packages) and the package configuration are both contained in the &lt;code class=&quot;highlighter-rouge&quot;&gt;*.csproj&lt;/code&gt; making it the single source of truth!&lt;/p&gt;

&lt;h3 id=&quot;referencing-a-project-without-turning-it-into-a-package-reference&quot;&gt;Referencing a project without turning it into a package reference&lt;/h3&gt;

&lt;p&gt;Sometimes you want to include a &lt;code class=&quot;highlighter-rouge&quot;&gt;DLL&lt;/code&gt; in a &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; package rather than add it as a package reference.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;SuperLogic&lt;/code&gt; project depends on the &lt;code class=&quot;highlighter-rouge&quot;&gt;ExtraLogic&lt;/code&gt; project but we don’t want to ship &lt;code class=&quot;highlighter-rouge&quot;&gt;ExtraLogic&lt;/code&gt; as a package. Instead we want to include &lt;code class=&quot;highlighter-rouge&quot;&gt;Contoso.Hello.ExtraLogic.dll&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;SuperLogic&lt;/code&gt; package directly. Currently this is not supported out of the box but the team is &lt;a href=&quot;https://github.com/NuGet/Home/issues/6285&quot;&gt;tracking it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Luckily &lt;a href=&quot;https://github.com/NuGet/Home/issues/3891&quot;&gt;this issue&lt;/a&gt; provides a workaround. All the modifications will take place in &lt;code class=&quot;highlighter-rouge&quot;&gt;SuperLogic.csproj&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/code&gt; section add the following line:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;TargetsForTfmSpecificBuildOutput&amp;gt;&lt;/span&gt;$(TargetsForTfmSpecificBuildOutput);IncludeReferencedProjectInPackage&lt;span class=&quot;nt&quot;&gt;&amp;lt;/TargetsForTfmSpecificBuildOutput&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Prevent the project to be added as a package reference by making &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/core/tools/csproj#includeassets-excludeassets-and-privateassets&quot;&gt;all assets private&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ProjectReference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Include=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;..\ExtraLogic\ExtraLogic.csproj&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;PrivateAssets&amp;gt;&lt;/span&gt;all&lt;span class=&quot;nt&quot;&gt;&amp;lt;/PrivateAssets&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ProjectReference&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Finally add the target responsible of copying the &lt;code class=&quot;highlighter-rouge&quot;&gt;DLL&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Target&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IncludeReferencedProjectInPackage&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;BuildOutputInPackage&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Include=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$(OutputPath)Contoso.Hello.ExtraLogic.dll&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The result is the following &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; package:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/cake-build/package-version.png&quot; alt=&quot;Package version&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the assemblies have been versioned as expected:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;na&quot;&gt;[assembly: AssemblyFileVersion(&quot;1.0.5-fix-typos0003&quot;)]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[assembly: AssemblyInformationalVersion(&quot;1.0.5-fix-typos0003&quot;)]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[assembly: AssemblyVersion(&quot;1.0.5.0&quot;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: you can also use the new &lt;code class=&quot;highlighter-rouge&quot;&gt;*.csproj&lt;/code&gt; system for &lt;code class=&quot;highlighter-rouge&quot;&gt;.NET Framework&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; packages. You don’t need to target &lt;code class=&quot;highlighter-rouge&quot;&gt;.NET Core&lt;/code&gt; to take advantage of it.&lt;/p&gt;

&lt;h2 id=&quot;publish-the-nuget-packages&quot;&gt;Publish the &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; packages&lt;/h2&gt;

&lt;p&gt;On any branches starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;features/&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; packages will be published to a pre-release feed. If the branch is &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; it’ll be published to the production feed. This is handled by &lt;code class=&quot;highlighter-rouge&quot;&gt;AppVeyor&lt;/code&gt; in this &lt;a href=&quot;https://github.com/gabrielweyer/cake-build/blob/18ffcf3dfb591519353680f81653c86b8f3966d9/appveyor.yml#L52-L73&quot;&gt;section&lt;/a&gt; of the configuration.&lt;/p&gt;

&lt;p&gt;As this is a demo project both feeds are hosted by &lt;code class=&quot;highlighter-rouge&quot;&gt;MyGet&lt;/code&gt;. For my other projects I use &lt;code class=&quot;highlighter-rouge&quot;&gt;MyGet&lt;/code&gt; to host my &lt;a href=&quot;https://www.myget.org/feed/Packages/gabrielweyer-pre-release&quot;&gt;pre-release feed&lt;/a&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; for my &lt;a href=&quot;https://www.nuget.org/profiles/gabrielweyer&quot;&gt;production feed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When publishing the packages, I’m also publishing the associated &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ee416588(v=vs.85).aspx&quot;&gt;symbols&lt;/a&gt; to allow consumers to debug through my packages.&lt;/p&gt;

&lt;p&gt;Strangely enough &lt;code class=&quot;highlighter-rouge&quot;&gt;Travis CI&lt;/code&gt; does not support artifacts out of the box. You must provide an &lt;code class=&quot;highlighter-rouge&quot;&gt;S3&lt;/code&gt; account if you wish to save your build artifacts.&lt;/p&gt;

&lt;h2 id=&quot;create-a-github-release&quot;&gt;Create a GitHub release&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AppVeyor&lt;/code&gt; also creates &lt;code class=&quot;highlighter-rouge&quot;&gt;GitHub&lt;/code&gt; &lt;a href=&quot;https://github.com/gabrielweyer/cake-build/blob/b707a64cf8218092942accfa5b1f570487f34f4e/appveyor.yml#L24-L47&quot;&gt;releases&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-about-azure-devops&quot;&gt;What about Azure DevOps&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Azure DevOps&lt;/code&gt; is the only product that supports &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Linux&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;macOS&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Microsoft&lt;/code&gt; has been iterating relentlessly and the &lt;code class=&quot;highlighter-rouge&quot;&gt;GitHub&lt;/code&gt; acquisition will likely lead to a tighter integration between the two services.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Azure DevOps&lt;/code&gt; has the most powerful tests results tab:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/cake-build/azure-devops-tests.png&quot; alt=&quot;Azure DevOps Tests&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One thing I’ve noticed is that builds seem to be slower on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hosted Ubuntu 1604&lt;/code&gt; agents than on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hosted VS2017&lt;/code&gt; agents.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is one possible workflow only. I’ve glossed over many details and taken some shortcuts (for example there is no support for &lt;code class=&quot;highlighter-rouge&quot;&gt;PR&lt;/code&gt; builds).&lt;/p&gt;

&lt;p&gt;Those are the key takeaways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Do &lt;strong&gt;upfront planning on how you want to handle versioning&lt;/strong&gt;. This is the hardest part and the one that will be the hardest to fix later on. Read the &lt;a href=&quot;http://gitversion.readthedocs.io/en/latest/&quot;&gt;GitVersion documentation&lt;/a&gt; carefully before making any decision.&lt;/li&gt;
  &lt;li&gt;Do what works for your team. If you didn’t have any issues with auto-incrementing your builds, keep doing so. There is no point bringing additional complexity to fix a problem you don’t have.&lt;/li&gt;
  &lt;li&gt;Don’t assume you’ll be running on &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;Visual Studio Enterprise&lt;/code&gt; installed. Adding cross-platform or other &lt;code class=&quot;highlighter-rouge&quot;&gt;IDE&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;Rider&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Code&lt;/code&gt;…) support from the start will make your life easier down the track.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 21 Apr 2018 18:57:02 -0500</pubDate>
        <link>https://gabrielweyer.github.io//2018/04/21/cake-build/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2018/04/21/cake-build/</guid>
      </item>
    
      <item>
        <title>Advanced .NET Debugging #1</title>
        <description>&lt;p&gt;After eyeing it for a while I finally decided to buy &lt;a href=&quot;https://www.goodreads.com/book/show/7306509-advanced-net-debugging&quot;&gt;Advanced .NET Debugging&lt;/a&gt; by Mario Hewardt. I’ve been studying &lt;code class=&quot;highlighter-rouge&quot;&gt;WinDbg&lt;/code&gt; for some time and consider myself somewhere between beginner and intermediate level. To my dismay I got stuck on the first excercise! Luckily I didn’t give up and finally stumbled on a blog post that unblocked me. This series has for goal to make &lt;a href=&quot;https://www.goodreads.com/book/show/7306509-advanced-net-debugging&quot;&gt;Advanced .NET Debugging&lt;/a&gt; more accessible to people - quite like me - that haven’t grasped all the concepts yet.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;A hex viewer
    &lt;ul&gt;
      &lt;li&gt;I used the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=slevesque.vscode-hexdump&quot;&gt;hexdump for VSCode&lt;/a&gt; Visual Studio Code extension&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gabrielweyer/nuggets/blob/master/windbg/README.md#download-and-install-windbg&quot;&gt;WinDbg&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Windows&lt;!--more--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;In the section &lt;strong&gt;Loading Native Images&lt;/strong&gt;, Mario explains how Windows is loading a native image using &lt;code class=&quot;highlighter-rouge&quot;&gt;Notepad.exe&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;%SystemRoot%\notepad.exe&lt;/code&gt;) as an example. As the first step, Mario instructs the reader to:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;go to file offset &lt;code class=&quot;highlighter-rouge&quot;&gt;0x108&lt;/code&gt; where you will find the &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressOfEntryPoint&lt;/code&gt; field&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The book was written a few years ago and back then Mario was running &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows Vista&lt;/code&gt; (most likely in &lt;code class=&quot;highlighter-rouge&quot;&gt;32-bit&lt;/code&gt; too). If you look at the same file offset in &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows 10 64-bit&lt;/code&gt; you’ll be disapointed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/advanced-dotnet-debugging-1/no-address-of-entry-point.png&quot; alt=&quot;No AddressOfEntryPoint&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK, there are quite a few things to unpack in this screenshot.&lt;/p&gt;

&lt;h3 id=&quot;hexadecimal&quot;&gt;Hexadecimal&lt;/h3&gt;

&lt;p&gt;Each white cell represents a &lt;code class=&quot;highlighter-rouge&quot;&gt;byte&lt;/code&gt;. A &lt;code class=&quot;highlighter-rouge&quot;&gt;byte&lt;/code&gt; has 256 different values (from &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;255&lt;/code&gt;). If we want to represent the value &lt;code class=&quot;highlighter-rouge&quot;&gt;255&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;base 2&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;binary&lt;/code&gt;), we would need 8 characters: &lt;code class=&quot;highlighter-rouge&quot;&gt;11111111&lt;/code&gt;. The same value in &lt;code class=&quot;highlighter-rouge&quot;&gt;base 10&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;decimal&lt;/code&gt;) still requires 3 characters: &lt;code class=&quot;highlighter-rouge&quot;&gt;255&lt;/code&gt;. In &lt;code class=&quot;highlighter-rouge&quot;&gt;base 16&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;hexadecimal&lt;/code&gt;) we only need 2 characters: &lt;code class=&quot;highlighter-rouge&quot;&gt;FF&lt;/code&gt;. Hence &lt;code class=&quot;highlighter-rouge&quot;&gt;hexadecimal&lt;/code&gt; strikes a good balance between brevity and not being too remote from the decimal base we human-beings use. You can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows 10&lt;/code&gt; calculator in &lt;code class=&quot;highlighter-rouge&quot;&gt;Programmer&lt;/code&gt; mode to convert between &lt;code class=&quot;highlighter-rouge&quot;&gt;hexadecimal&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;decimal&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/advanced-dotnet-debugging-1/win-10-calc.png&quot; alt=&quot;Convert between hex and dec&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;file-offset&quot;&gt;File offset&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;byte&lt;/code&gt;s are displayed from left to right and top to bottom. They are accessed via a &lt;strong&gt;file offset&lt;/strong&gt;, represented by the blue numbers. The left column represents the 7 most significant digits while the top row represents the least significant digit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/advanced-dotnet-debugging-1/file-offset.png&quot; alt=&quot;File offset&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The cell on the third row (&lt;code class=&quot;highlighter-rouge&quot;&gt;00000020&lt;/code&gt;) and last column (&lt;code class=&quot;highlighter-rouge&quot;&gt;0F&lt;/code&gt;) has a &lt;strong&gt;file offset&lt;/strong&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;0000002F&lt;/code&gt;. &lt;strong&gt;File offset&lt;/strong&gt;s are 4 &lt;code class=&quot;highlighter-rouge&quot;&gt;byte&lt;/code&gt;s long, so every time we’ll be looking for an offset or an address we know it’ll be encoded over 4 &lt;code class=&quot;highlighter-rouge&quot;&gt;byte&lt;/code&gt;s.&lt;/p&gt;

&lt;h3 id=&quot;endianness&quot;&gt;Endianness&lt;/h3&gt;

&lt;p&gt;Windows is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;little-endian&lt;/a&gt; system. This means than the least significant &lt;code class=&quot;highlighter-rouge&quot;&gt;byte&lt;/code&gt;s will appear &lt;strong&gt;before&lt;/strong&gt; the most significant ones. So if you were to find the following value: &lt;code class=&quot;highlighter-rouge&quot;&gt;E0 93 01 00&lt;/code&gt;, the address would be &lt;code class=&quot;highlighter-rouge&quot;&gt;00 01 93 E0&lt;/code&gt; - only the &lt;code class=&quot;highlighter-rouge&quot;&gt;byte&lt;/code&gt; order is inverted, not the order within a &lt;code class=&quot;highlighter-rouge&quot;&gt;byte&lt;/code&gt; - which would commonly be written as &lt;code class=&quot;highlighter-rouge&quot;&gt;0x193E0&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;0x&lt;/code&gt; denotes a hex notation and the leading &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;s are dropped as they are not significant).&lt;/p&gt;

&lt;h2 id=&quot;figuring-out-the-file-offset-of-addressofentrypoint&quot;&gt;Figuring out the file offset of &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressOfEntryPoint&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Now that we know how to read the &lt;code class=&quot;highlighter-rouge&quot;&gt;hex&lt;/code&gt; dump, we’re still left with the same problem: there is no address where it’s supposed to be. This is when I started to browse the Internet trying to understand where &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressOfEntryPoint&lt;/code&gt; was supposed to be located. My quest initially took me to the &lt;a href=&quot;https://msdn.microsoft.com/library/windows/desktop/ms680547(v=vs.85).aspx&quot;&gt;PE Format specification&lt;/a&gt;, after reading it for a while I ended up being more confused than I initially was. The situation was dire and I needed some hope, and hope did appear in the person of Simon Cooper and his brilliant post &lt;a href=&quot;https://www.red-gate.com/simple-talk/blogs/anatomy-of-a-net-assembly-pe-headers/&quot;&gt;Anatomy of a .NET Assembly – PE Headers&lt;/a&gt;. This illustration details the required steps to find the value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressOfEntryPoint&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/advanced-dotnet-debugging-1/address-of-entry-point.png&quot; alt=&quot;AddressOfEntryPoint&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thanks to Simon’s detailed write-up I was able to figure out the file offset of the &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressOfEntryPoint&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;0x120&lt;/code&gt;), I also found its value: &lt;code class=&quot;highlighter-rouge&quot;&gt;0x193E0&lt;/code&gt;. You can use the below formula to compute the &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressOfEntryPoint&lt;/code&gt; file offset based of the signature file offset:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Signature file offset + &lt;code class=&quot;highlighter-rouge&quot;&gt;0x28&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressOfEntryPoint&lt;/code&gt; file offset&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we look back at the screenshot above we can see than the signature file offset was &lt;code class=&quot;highlighter-rouge&quot;&gt;0xF8&lt;/code&gt;. Hence &lt;code class=&quot;highlighter-rouge&quot;&gt;0xF8&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;0x28&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;0x120&lt;/code&gt;, which is exactly what we found without using the formula.&lt;/p&gt;

&lt;h2 id=&quot;relative-virtual-address&quot;&gt;Relative virtual address&lt;/h2&gt;

&lt;p&gt;But we’re now faced with another issue, the address entry point (&lt;code class=&quot;highlighter-rouge&quot;&gt;0x193E0&lt;/code&gt;) resolves to some kind of wasteland:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/advanced-dotnet-debugging-1/wasteland.png&quot; alt=&quot;That can't be the entry point!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Portable Executable format has the concept of &lt;strong&gt;Relative Virtual Address&lt;/strong&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;RVA&lt;/code&gt;) which it defines like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In an image file, the address of an item after it is loaded into memory, with the base address of the image file subtracted from it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As it turns out the &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressOfEntryPoint&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; a file offset, it is actually a &lt;code class=&quot;highlighter-rouge&quot;&gt;RVA&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So we need to &lt;em&gt;load Notepad in memory&lt;/em&gt; which equates to running it. But we also need to be able to see the &lt;code class=&quot;highlighter-rouge&quot;&gt;base address&lt;/code&gt; of the image which is not something than the &lt;code class=&quot;highlighter-rouge&quot;&gt;Task Manager&lt;/code&gt; or any other basic tool will be able to provide us. To see this value we need a debugger. Open &lt;code class=&quot;highlighter-rouge&quot;&gt;Notepad.exe&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;%SystemRoot%\notepad.exe&lt;/code&gt;) using &lt;a href=&quot;https://github.com/gabrielweyer/nuggets/blob/master/windbg/README.md#store&quot;&gt;WinDbg Preview&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/advanced-dotnet-debugging-1/open-notepad-windbg-preview.gif&quot; alt=&quot;Opening Notepad with WinDbg Preview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Type the command &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/lm--list-loaded-modules-&quot;&gt;List Loaded Modules&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; lm
start             end                 module name
00007ff6`f92f0000 00007ff6`f9331000   notepad    (deferred)
00007ffd`09ce0000 00007ffd`09f49000   COMCTL32   (deferred)
00007ffd`0abb0000 00007ffd`0ad7c000   urlmon     (deferred)
// Abbreviated&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The value we’re interested in is &lt;code class=&quot;highlighter-rouge&quot;&gt;00007ff6`f92f0000&lt;/code&gt;, this is the &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; (i.e. the &lt;code class=&quot;highlighter-rouge&quot;&gt;base address&lt;/code&gt;) of the &lt;code class=&quot;highlighter-rouge&quot;&gt;notepad&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;Armed with this information we’ll be able to look at the instructions located at the &lt;code class=&quot;highlighter-rouge&quot;&gt;RVA&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;0x193E0&lt;/code&gt; by using the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/u--unassemble-&quot;&gt;Unassemble&lt;/a&gt; command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; u 00007ff6`f92f0000+0x193E0
notepad!WinMainCRTStartup:
00007ff6`f93093e0 4883ec28        sub     rsp,28h
00007ff6`f93093e4 e8c7070000      call    notepad!_security_init_cookie (00007ff6`f9309bb0)
00007ff6`f93093e9 4883c428        add     rsp,28h
00007ff6`f93093ed e902000000      jmp     notepad!__mainCRTStartup (00007ff6`f93093f4)
00007ff6`f93093f2 cc              int     3
00007ff6`f93093f3 cc              int     3
notepad!__mainCRTStartup:
00007ff6`f93093f4 48895c2408      mov     qword ptr [rsp+8],rbx
00007ff6`f93093f9 48897c2410      mov     qword ptr [rsp+10h],rdi&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Bingo!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this post clarified how to find the entry point of a native Windows executable.&lt;/p&gt;

</description>
        <pubDate>Fri, 06 Apr 2018 22:17:02 -0500</pubDate>
        <link>https://gabrielweyer.github.io//2018/04/06/advanced-dotnet-debugging-1/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2018/04/06/advanced-dotnet-debugging-1/</guid>
      </item>
    
      <item>
        <title>Testing anti-patterns #1</title>
        <description>&lt;p&gt;I often ask candidates to define a good unit test. This is the starting point of a conversation around testing strategies and delivering value. Over the years I’ve heard opinions ranging from &lt;code class=&quot;highlighter-rouge&quot;&gt;the 100% coverage&lt;/code&gt;, passing by &lt;code class=&quot;highlighter-rouge&quot;&gt;testing is for testers&lt;/code&gt;, all the way to &lt;code class=&quot;highlighter-rouge&quot;&gt;we don't do automated testing&lt;/code&gt;. If the notion of a &lt;em&gt;good test&lt;/em&gt; can be subjective, it is easier to identify a &lt;strong&gt;bad&lt;/strong&gt; test. Bloggers have written about this topic at length but I thought I would try paraphrasing the same content hoping nobody would notice.&lt;/p&gt;

&lt;p&gt;I must admit I have written - quite - a few bad tests myself and that’s fine. We all make mistakes, how we handle those mistakes is what help us grow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s important to understand why the mistake happened and put in place measures to prevent the same mistake from happening again&lt;/li&gt;
  &lt;li&gt;Equally we should challenge existing practices, they might be there for a good reason but they might instead be there for a &lt;strong&gt;bad&lt;/strong&gt; reason&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;Here are a few anti-patterns I’ve noticed over the years:&lt;/p&gt;

&lt;h2 id=&quot;ignored-or-commented-test&quot;&gt;Ignored or commented test&lt;/h2&gt;

&lt;p&gt;Have you ever seen this?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;na&quot;&gt;[Ignore]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[TestMethod]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Luckily only &lt;code class=&quot;highlighter-rouge&quot;&gt;MSTest&lt;/code&gt; allows to ignore a test without providing a message, both &lt;code class=&quot;highlighter-rouge&quot;&gt;xUnit&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;NUnit&lt;/code&gt; require the developer to provide a message. What’s worse is that the message of the commit ignoring the test often reads &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;fixed&quot; test YOLO LMAO&lt;/code&gt; and you’re left wondering what deep philosophical message lies hidden behind those mundane words.&lt;/p&gt;

&lt;p&gt;In the case of a &lt;em&gt;commented test&lt;/em&gt; the solution is simple: &lt;strong&gt;delete&lt;/strong&gt; it. Regarding &lt;em&gt;ignored tests&lt;/em&gt;, have a quick read through and run them. If you can’t get them to pass, &lt;strong&gt;delete&lt;/strong&gt; them too. Ignored / commented tests will only confuse future developers. You should treat your test code the same way you treat your production code: if a piece of code has no use anymore it should go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ask yourself&lt;/strong&gt;: why am I ignoring this test, what conditions should be met to enable it again? Then write a &lt;strong&gt;descriptive&lt;/strong&gt; ignore message.&lt;/p&gt;

&lt;h2 id=&quot;non-thread-safe&quot;&gt;Non-thread-safe&lt;/h2&gt;

&lt;p&gt;The first thing that is wrong with this test is that it’s recording log messages so that they can be asserted at a later stage (see &lt;a href=&quot;#asserting-log-messages&quot;&gt;below&lt;/a&gt; for the log anti-pattern):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;When&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But this was not the only issue with this statement. After making an unrelated change this test failed. I ran it again on its own and it passed, so this test was failing intermittently and I was also getting different &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Type&lt;/code&gt;s! The &lt;code class=&quot;highlighter-rouge&quot;&gt;NullReferenceException&lt;/code&gt; wasn’t meaningful but I also got an &lt;code class=&quot;highlighter-rouge&quot;&gt;IndexOutOfRangeException&lt;/code&gt; when adding an element to the &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It turned out the code under test was multi-threaded and multiple threads were trying to add to the &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; at the same time. The &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=netframework-4.7.1#Thread_Safety&quot;&gt;.NET API browser&lt;/a&gt; makes it clear than &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; is not thread-safe:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Any instance members are not guaranteed to be thread safe. […] &lt;strong&gt;To ensure thread safety, lock the collection during a read or write operation&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this instance the solution was to lock the &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; when adding to it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;When&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;());&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Ask yourself&lt;/strong&gt;: most of the code we write is not performance critical, do you need to create multiple threads?&lt;/p&gt;

&lt;h2 id=&quot;failure-without-enough-context&quot;&gt;Failure without enough context&lt;/h2&gt;

&lt;p&gt;There is nothing more frustrating than having a build failing on the build server and be faced by this kind of log:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Assert.True() Failure
Expected: True
Actual:   False&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From there things only get worse, when you look at the actual assert you discover it’s asserting multiple things at the same time and you’ve no idea which one went wrong:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you need to compare objects you can use an assertion library such as &lt;a href=&quot;http://fluentassertions.com/&quot;&gt;Fluent Assertions&lt;/a&gt; or &lt;a href=&quot;https://github.com/shouldly/shouldly&quot;&gt;Shouldly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ask yourself&lt;/strong&gt;: if I make this test break, would I have enough context based on &lt;strong&gt;only&lt;/strong&gt; the logs to understand what went wrong?&lt;/p&gt;

&lt;h2 id=&quot;asserting-log-messages&quot;&gt;Asserting log messages&lt;/h2&gt;

&lt;p&gt;Please don’t do this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Received&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Super important log&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Logging is an implementation detail, asserting log messages is over-specifying.&lt;/p&gt;

&lt;p&gt;On the other hand, if recording that something happened is critical from a business point of view you don’t want to use logging for this purpose as developers should be able to modify logging as they see fit.&lt;/p&gt;

&lt;p&gt;Tracking business events can be achieved in different ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Via your &lt;code class=&quot;highlighter-rouge&quot;&gt;APM&lt;/code&gt; service, both &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/application-insights/app-insights-api-custom-events-metrics#trackevent&quot;&gt;Application Insights&lt;/a&gt; and &lt;a href=&quot;https://docs.newrelic.com/docs/insights/insights-data-sources/custom-data/insert-custom-events-new-relic-apm-agents&quot;&gt;New Relic&lt;/a&gt; can track custom events&lt;/li&gt;
  &lt;li&gt;Via a service bus. Your code could be instrumented to emit messages and any interested service can subscribe to them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Ask yourself&lt;/strong&gt;: is this the best way of doing this? Read the documentation of the systems you’re currently using, you’ll quite often discover features you had no idea existed.&lt;/p&gt;

&lt;h2 id=&quot;nullreferenceexception-in-constructor&quot;&gt;NullReferenceException in constructor&lt;/h2&gt;

&lt;p&gt;Don’t assert than your constructors are throwing a &lt;code class=&quot;highlighter-rouge&quot;&gt;NullReferenceException&lt;/code&gt; when being passed a &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;. Your &lt;code class=&quot;highlighter-rouge&quot;&gt;IoC&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;container&lt;/code&gt; will throw an &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt; anyway when trying to resolve the dependencies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ask yourself&lt;/strong&gt;: do I need to test third-party libraries?&lt;/p&gt;

&lt;h2 id=&quot;sanity-check&quot;&gt;Sanity check&lt;/h2&gt;

&lt;p&gt;Quite often when starting a new project, developers will create a &lt;em&gt;sanity check&lt;/em&gt; test. This is a test that &lt;strong&gt;should&lt;/strong&gt; pass and if it were to fail it would mean that things are terribly wrong. An example of such a test is this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ve never seen this kind of test fail. Moreover, this test does not have any value as it doesn’t give me any confidence that the code is behaving the way it is supposed to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ask yourself&lt;/strong&gt;: Can I break this test by altering the correctness of the production code?&lt;/p&gt;

</description>
        <pubDate>Sat, 24 Mar 2018 01:36:53 -0500</pubDate>
        <link>https://gabrielweyer.github.io//2018/03/24/testing-anti-patterns-1/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2018/03/24/testing-anti-patterns-1/</guid>
      </item>
    
      <item>
        <title>WinDbg #1 - The static root</title>
        <description>&lt;p&gt;This new series is an attempt to improve my &lt;code class=&quot;highlighter-rouge&quot;&gt;WinDbg&lt;/code&gt; skills. The concept is to create faulty applications and troubleshoot the issue using &lt;code class=&quot;highlighter-rouge&quot;&gt;WinDbg&lt;/code&gt; pretending that I have no prior knowledge of the code.&lt;/p&gt;

&lt;p&gt;I’ll be using my &lt;a href=&quot;https://github.com/gabrielweyer/nuggets/blob/master/windbg/README.md&quot;&gt;WinDbg guide&lt;/a&gt; as I can never remember the commands! I’m hoping than through those challenges I’ll get to improve the guide. Today’s exercise is inspired by the excellent blog post &lt;a href=&quot;https://blogs.microsoft.co.il/sasha/2012/02/07/pinpointing-a-static-gc-root-with-sos/&quot;&gt;Pinpointing a Static GC Root with SOS&lt;/a&gt;. The post only contains a few commands but I must admit that it took me hours to achieve the same result.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The code&lt;/h2&gt;

&lt;p&gt;The application is available on &lt;a href=&quot;https://github.com/gabrielweyer/blog-samples/tree/master/windbg-static&quot;&gt;GitHub&lt;/a&gt;. Clone it, I’ll wait.&lt;/p&gt;

&lt;p&gt;It is an &lt;code class=&quot;highlighter-rouge&quot;&gt;ASP.NET Core 2.0&lt;/code&gt; project:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compile the solution with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Release&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Configuration&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Launch the &lt;code class=&quot;highlighter-rouge&quot;&gt;SampleApi&lt;/code&gt; project, it should start on port &lt;code class=&quot;highlighter-rouge&quot;&gt;5000&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;Kestrel&lt;/code&gt; will make the next part easier&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Launch &lt;code class=&quot;highlighter-rouge&quot;&gt;Process Explorer&lt;/code&gt;. If you don’t have this gem drop everything you’re doing and &lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer&quot;&gt;download&lt;/a&gt; it now! Click on the &lt;strong&gt;crosshair&lt;/strong&gt;, mouse hover the process you want to target and release the button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/windbg-1/find-process.gif&quot; alt=&quot;Find process&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Working Set&lt;/code&gt; is sitting just under &lt;code class=&quot;highlighter-rouge&quot;&gt;44 MB&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Issue &lt;code class=&quot;highlighter-rouge&quot;&gt;20&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; requests to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:5000/feed/me&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’re as lazy as me you can leverage &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install-win10&quot;&gt;Windows Subsystem for Linux&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1 20&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;curl &lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:5000/feed/me&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/windbg-1/hungry-process.png&quot; alt=&quot;Hungry process&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Working Set&lt;/code&gt; is now sitting just under &lt;code class=&quot;highlighter-rouge&quot;&gt;262 MB&lt;/code&gt;. That’s an increase of roughly &lt;code class=&quot;highlighter-rouge&quot;&gt;10 MB&lt;/code&gt; per request.&lt;/p&gt;

&lt;h2 id=&quot;capture-a-full-memory-dump&quot;&gt;Capture a full memory dump&lt;/h2&gt;

&lt;p&gt;The easiest option in this case is to leverage &lt;code class=&quot;highlighter-rouge&quot;&gt;Process Explorer&lt;/code&gt; as we already have it opened. Right-click on &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet.exe&lt;/code&gt; and select &lt;code class=&quot;highlighter-rouge&quot;&gt;Create Full Dump...&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/windbg-1/create-full-dump.png&quot; alt=&quot;Create Full Dump&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;install-and-configure-windbg&quot;&gt;Install and configure &lt;code class=&quot;highlighter-rouge&quot;&gt;WinDbg&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Follow these instructions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gabrielweyer/nuggets/blob/master/windbg/README.md#download-and-install-windbg&quot;&gt;Download and install WinDbg&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gabrielweyer/nuggets/blob/master/windbg/README.md#configure-the-symbols&quot;&gt;Configure the symbols&lt;/a&gt;:&lt;/li&gt;
  &lt;li&gt;Right-click on &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet.exe&lt;/code&gt; and select &lt;code class=&quot;highlighter-rouge&quot;&gt;Properties&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/windbg-1/properties.png&quot; alt=&quot;Properties&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Copy the path of the directory where &lt;code class=&quot;highlighter-rouge&quot;&gt;SampleApi.dll&lt;/code&gt; is located (in my case it is &lt;code class=&quot;highlighter-rouge&quot;&gt;E:/code/me/blog-samples/windbg-static/src/SampleApi/bin/Release/netcoreapp2.0/&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/windbg-1/command-line.png&quot; alt=&quot;Binaries path&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Copy the content of this directory into your symbols directory (in my case I configured &lt;code class=&quot;highlighter-rouge&quot;&gt;sympath&lt;/code&gt; to include &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\symbols\local\&lt;/code&gt;):&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/windbg-1/symbols-directory.png&quot; alt=&quot;Symbols directory&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gabrielweyer/nuggets/blob/master/windbg/README.md#open-a-memory-dump&quot;&gt;Open the memory dump&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gabrielweyer/nuggets/blob/master/windbg/README.md#net-core&quot;&gt;Load the SOS extension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we’re in business!&lt;/p&gt;

&lt;h2 id=&quot;identifying-the-most-problematic-type--instance&quot;&gt;Identifying the most problematic &lt;code class=&quot;highlighter-rouge&quot;&gt;Type&lt;/code&gt; / instance&lt;/h2&gt;

&lt;p&gt;We’ll start with the &lt;code class=&quot;highlighter-rouge&quot;&gt;DumpHeap&lt;/code&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands&quot;&gt;command&lt;/a&gt; from the &lt;code class=&quot;highlighter-rouge&quot;&gt;SOS&lt;/code&gt; extension.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Displays information about the garbage-collected heap […]. The &lt;code class=&quot;highlighter-rouge&quot;&gt;-stat&lt;/code&gt; option restricts the output to the statistical type summary.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead of listing every single object present in the heap(s), this will group them by &lt;code class=&quot;highlighter-rouge&quot;&gt;Class Name&lt;/code&gt; and provide us with an instance &lt;code class=&quot;highlighter-rouge&quot;&gt;Count&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TotalSize&lt;/code&gt; taken (in &lt;code class=&quot;highlighter-rouge&quot;&gt;bytes&lt;/code&gt;). Let’s run it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !dumpheap -stat
Statistics:
              MT    Count    TotalSize Class Name
00007ffb0f6cec68        1           24 System.Collections.Generic.GenericEqualityComparer`1[[System.Int32, System.Private.CoreLib]]
00007ffb0f6cb200        1           24 System.Collections.Generic.GenericEqualityComparer`1[[System.Int64, System.Private.CoreLib]]
00007ffb0f6be130        1           24 System.Collections.Generic.GenericComparer`1[[System.Int32, System.Private.CoreLib]]
// Abbreviated
00007ffb0f632ca8       97       151456 System.Object[]
00007ffac6364330        8       262336 Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.LibuvThread+Work[]
00007ffac6158558    30346       971072 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.DateHeaderValueManager+DateHeaderValues
00007ffac638df58    30345      1942080 System.Collections.Concurrent.ConcurrentDictionary`2+&amp;lt;GetEnumerator&amp;gt;d__38[[System.Int64, System.Private.CoreLib],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.FrameConnectionReference, Microsoft.AspNetCore.Server.Kestrel.Core]]
00007ffb0f633050    30475      2148742 System.Byte[]
00007ffb0f667be8    32554      2795084 System.String
00000190177eb6e0     2837     16874148      Free
00007ffb0f634158      158    251802384 System.Int32[]
Total 137415 objects&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It looks like we have a winner! There are &lt;code class=&quot;highlighter-rouge&quot;&gt;158&lt;/code&gt; instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Int32[]&lt;/code&gt; for a &lt;code class=&quot;highlighter-rouge&quot;&gt;TotalSize&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;251802384 bytes&lt;/code&gt;. As we have only &lt;code class=&quot;highlighter-rouge&quot;&gt;158&lt;/code&gt; instances it’s likely we have a few big instances, let’s list the ones that are bigger than &lt;code class=&quot;highlighter-rouge&quot;&gt;1000 bytes&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !dumpheap -type System.Int32[] -min 1000
         Address               MT     Size
0000019019413cf0 00007ffb0f634158     4120
0000019019414d08 00007ffb0f634158     8216
0000019019416d20 00007ffb0f634158    16408
000001901941ad38 00007ffb0f634158    32792
0000019019422d50 00007ffb0f634158    65560
000001941a364df0 00007ffb0f634158 33554456
000001941c364e28 00007ffb0f634158 134217752
0000019439341038 00007ffb0f634158 16777240
0000019449341038 00007ffb0f634158 67108888

Statistics:
              MT    Count    TotalSize Class Name
00007ffb0f634158        9    251785432 System.Int32[]
Total 9 objects&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As it turns out one instance is &lt;code class=&quot;highlighter-rouge&quot;&gt;134217752 bytes&lt;/code&gt; which is roughly &lt;code class=&quot;highlighter-rouge&quot;&gt;134 MB&lt;/code&gt;. I suggest we start investigating this one.&lt;/p&gt;

&lt;h2 id=&quot;determine-what-is-keeping-our-instance-alive&quot;&gt;Determine what is keeping our instance alive&lt;/h2&gt;

&lt;p&gt;We’ll use another &lt;code class=&quot;highlighter-rouge&quot;&gt;SOS&lt;/code&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands&quot;&gt;command&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;GCRoot&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Displays information about references (or roots) to an object at the specified address.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !gcroot 000001941c364e28
HandleTable:
    00000190176115f8 (pinned handle)
    -&amp;gt; 0000019419341038 System.Object[]
    -&amp;gt; 0000019019412bf0 System.Collections.Generic.List`1[[System.Int32, System.Private.CoreLib]]
    -&amp;gt; 000001941c364e28 System.Int32[]

Found 1 unique roots (run '!GCRoot -all' to see all roots).&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This reads bottom to top, our &lt;code class=&quot;highlighter-rouge&quot;&gt;Int32[]&lt;/code&gt; is referenced by a &lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;Int32&amp;gt;&lt;/code&gt;. This makes sense as &lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; is &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=netframework-4.7.1#Remarks&quot;&gt;using an array&lt;/a&gt; internally:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; is the generic equivalent of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;. It implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;IList&amp;lt;T&amp;gt;&lt;/code&gt; generic &lt;code class=&quot;highlighter-rouge&quot;&gt;interface&lt;/code&gt; by &lt;strong&gt;using an array&lt;/strong&gt; whose size is dynamically increased as required.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In turn this &lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;Int32&amp;gt;&lt;/code&gt; is referenced by a &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Object[]&lt;/code&gt;. I was hoping to get the name of one of my &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; but I’ll have to dig deeper, let’s take a closer look at this array of object.&lt;/p&gt;

&lt;p&gt;For this we’ll rely on the &lt;code class=&quot;highlighter-rouge&quot;&gt;DumpObj&lt;/code&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands&quot;&gt;command&lt;/a&gt; from the &lt;code class=&quot;highlighter-rouge&quot;&gt;SOS&lt;/code&gt; extension.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !do 0000019419341038
Name:        System.Object[]
MethodTable: 00007ffb0f632ca8
EEClass:     00007ffb0edf2a00
Size:        8184(0x1ff8) bytes
Array:       Rank 1, Number of elements 1020, Type CLASS (Print Array)
Fields:
None&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;According to Sasha Goldshtein &lt;a href=&quot;https://blogs.microsoft.co.il/sasha/2012/02/07/pinpointing-a-static-gc-root-with-sos/&quot;&gt;post&lt;/a&gt; this is how the &lt;code class=&quot;highlighter-rouge&quot;&gt;CLR&lt;/code&gt; stores &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; fields:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;array&lt;/code&gt; is ubiquitous, it would seem that all &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; root references stem from it. Indeed (and this is a &lt;code class=&quot;highlighter-rouge&quot;&gt;CLR&lt;/code&gt; implementation detail), &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; fields are stored in this array and their retention as far as the &lt;code class=&quot;highlighter-rouge&quot;&gt;GC&lt;/code&gt; is concerned is through it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s now determine where in the array is our &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; referenced. We’ll use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Search Memory&lt;/code&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/s--search-memory-&quot;&gt;command&lt;/a&gt; which is the first &lt;code class=&quot;highlighter-rouge&quot;&gt;WinDbg&lt;/code&gt; command we used today!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-q&lt;/code&gt;: we’re looking for a &lt;code class=&quot;highlighter-rouge&quot;&gt;QWORD&lt;/code&gt; (the address is &lt;code class=&quot;highlighter-rouge&quot;&gt;64 bit&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt;: this is a &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/address-and-address-range-syntax#span-idaddressrangesspanspan-idaddressrangesspanaddress-ranges&quot;&gt;Range&lt;/a&gt;, we’re starting to search at the address &lt;code class=&quot;highlighter-rouge&quot;&gt;0000019419341038&lt;/code&gt; (the beginning of the array) and we search the whole array (&lt;code class=&quot;highlighter-rouge&quot;&gt;1ff8&lt;/code&gt; is the size of the array as indicated in the previous command output)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0000019019412bf0&lt;/code&gt; is the address of the &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; s -q 0000019419341038 L1ff8 0000019019412bf0
00000194`19342830  00000190`19412bf0 00000191`19397798&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sadly the lead stops there. We know this is a &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; field but we don’t know which &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; it belongs to.&lt;/p&gt;

&lt;h2 id=&quot;fishing-with-dynamite&quot;&gt;Fishing with dynamite&lt;/h2&gt;

&lt;p&gt;There is one last thing we can try, we could look for references to &lt;code class=&quot;highlighter-rouge&quot;&gt;0000019419342830&lt;/code&gt; in memory. This section is completely stolen from Sasha’s excellent &lt;a href=&quot;https://blogs.microsoft.co.il/sasha/2012/02/07/pinpointing-a-static-gc-root-with-sos/&quot;&gt;post&lt;/a&gt; as I never did something like this before.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;SOS&lt;/code&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands&quot;&gt;command&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;DumpDomain&lt;/code&gt; comes in handy:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Enumerates each &lt;code class=&quot;highlighter-rouge&quot;&gt;Assembly&lt;/code&gt; object that is loaded within the specified &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDomain&lt;/code&gt; object address.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !dumpdomain
--------------------------------------
System Domain:      00007ffb25d15800
LowFrequencyHeap:   00007ffb25d15d80
HighFrequencyHeap:  00007ffb25d15e10
StubHeap:           00007ffb25d15ea0
Stage:              OPEN
Name:               None
--------------------------------------
Shared Domain:      00007ffb25d15220
LowFrequencyHeap:   00007ffb25d15d80
HighFrequencyHeap:  00007ffb25d15e10
StubHeap:           00007ffb25d15ea0
Stage:              OPEN
Name:               None
Assembly:           0000019017796330 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.5\System.Private.CoreLib.dll]
ClassLoader:        00000190176b33f0
  Module Name
00007ffb0ed11000            C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.5\System.Private.CoreLib.dll

--------------------------------------
Domain 1:           00000190178511a0
LowFrequencyHeap:   00000190178519a0
HighFrequencyHeap:  0000019017851a30
StubHeap:           0000019017851ac0
Stage:              OPEN
SecurityDescriptor: 0000019017859320
Name:               clrhost
Assembly:           0000019017796330 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.5\System.Private.CoreLib.dll]
ClassLoader:        00000190176b33f0
SecurityDescriptor: 000001901774c9a0
  Module Name
00007ffb0ed11000            C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.5\System.Private.CoreLib.dll

Assembly:           0000019017796410 [E:\code\me\blog-samples\windbg-static\src\SampleApi\bin\Release\netcoreapp2.0\SampleApi.dll]
ClassLoader:        0000019017834490
SecurityDescriptor: 00000190177851c0
  Module Name
00007ffac5d04d38            E:\code\me\blog-samples\windbg-static\src\SampleApi\bin\Release\netcoreapp2.0\SampleApi.dll

Assembly:           0000019017786bb0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.5\System.Runtime.dll]
ClassLoader:        0000019017834ee0
SecurityDescriptor: 0000019017784680
  Module Name
00007ffac5d05588            C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.5\System.Runtime.dll

// Abbreviated

Assembly:           0000019019319d90 [C:\Program Files\dotnet\store\x64\netcoreapp2.0\microsoft.aspnetcore.webutilities\2.0.1\lib\netstandard2.0\Microsoft.AspNetCore.WebUtilities.dll]
ClassLoader:        0000019463d80530
SecurityDescriptor: 0000019463dae9c0
  Module Name
00007ffac6549270            C:\Program Files\dotnet\store\x64\netcoreapp2.0\microsoft.aspnetcore.webutilities\2.0.1\lib\netstandard2.0\Microsoft.AspNetCore.WebUtilities.dll&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SampleApi.dll&lt;/code&gt; is located at &lt;code class=&quot;highlighter-rouge&quot;&gt;00007ffac5d04d38&lt;/code&gt; so it does make sense to start searching at &lt;code class=&quot;highlighter-rouge&quot;&gt;00007ffa00000000&lt;/code&gt;. Remember the &lt;code class=&quot;highlighter-rouge&quot;&gt;Search Memory&lt;/code&gt; command we used above? We’ll put it to good use again:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt;: this is a &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/address-and-address-range-syntax#span-idaddressrangesspanspan-idaddressrangesspanaddress-ranges&quot;&gt;Range&lt;/a&gt;, we’re starting to search at the address &lt;code class=&quot;highlighter-rouge&quot;&gt;00007ffa00000000&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;As we’re searching for a &lt;code class=&quot;highlighter-rouge&quot;&gt;QWORD&lt;/code&gt; the unit is &lt;code class=&quot;highlighter-rouge&quot;&gt;8 bytes&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;64 bit&lt;/code&gt;), so we’re looking ahead for &lt;code class=&quot;highlighter-rouge&quot;&gt;40000000 * 8 = 320 MB&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; s -q 00007ffa00000000 L?00000000`40000000 0000019419342830
00007ffa`c5d05370  00000194`19342830 00000000`00000001&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Bingo! Wow I didn’t think it would be that easy. We have a reference! Let’s use the &lt;code class=&quot;highlighter-rouge&quot;&gt;WinDbg&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Unassemble&lt;/code&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/u--unassemble-&quot;&gt;command&lt;/a&gt; to look at the instructions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !u 00007ffa`c5d05370
Unmanaged code
00007ffa`c5d05370 3028            xor     byte ptr [rax],ch
00007ffa`c5d05372 3419            xor     al,19h
00007ffa`c5d05374 94              xchg    eax,esp
00007ffa`c5d05375 0100            add     dword ptr [rax],eax
00007ffa`c5d05377 0001            add     byte ptr [rcx],al
00007ffa`c5d05379 0000            add     byte ptr [rax],al
00007ffa`c5d0537b 0000            add     byte ptr [rax],al
00007ffa`c5d0537d 0000            add     byte ptr [rax],al
00007ffa`c5d0537f 0000            add     byte ptr [rax],al
00007ffa`c5d05381 0000            add     byte ptr [rax],al&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Looks like I might have celebrated prematurely. Let’s extend the range:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; s -q 00007ffa00000000 L?00000000`80000000 0000019419342830
00007ffa`c5d05370  00000194`19342830 00000000`00000001&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Same result!&lt;/p&gt;

&lt;p&gt;Again, this is where Sasha comes to the rescue:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The problem is that we might miss unaligned references to that address, which may occur if it is hardcoded into some instruction (e.g. a &lt;code class=&quot;highlighter-rouge&quot;&gt;MOV&lt;/code&gt;). So instead we should be looking for the individual byte sequence, and remember that we are on a little-endian architecture&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The command is the same than the previous one except for two differences:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This time we’re searching for bytes &lt;code class=&quot;highlighter-rouge&quot;&gt;-b&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;As we’re on a little-endian architecture, &lt;code class=&quot;highlighter-rouge&quot;&gt;0000019419342830&lt;/code&gt; turn into &lt;code class=&quot;highlighter-rouge&quot;&gt;30 28 34 19 94 01 00 00&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; s -b 00007ffa00000000 L?00000000`320000000 30 28 34 19 94 01 00 00
00007ffa`c5d05370  30 28 34 19 94 01 00 00-01 00 00 00 00 00 00 00  0(4.............
00007ffa`c63902ac  30 28 34 19 94 01 00 00-48 8b 31 b9 01 00 00 00  0(4.....H.1.....
00007ffa`c6501b6e  30 28 34 19 94 01 00 00-48 8b 55 f8 e8 81 0b 44  0(4.....H.U....D&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ve already unassembled the first address, let’s look at the two other ones:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !u 00007ffa`c63902ac
Normal JIT generated code
DynamicClass.lambda_method(System.Runtime.CompilerServices.Closure, System.Object, System.Object[])
Begin 00007ffac6390270, size 71
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390270 56              push    rsi
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390271 4883ec20        sub     rsp,20h
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390275 488bf2          mov     rsi,rdx
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390278 4885f6          test    rsi,rsi
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c639027b 7417            je      00007ffa`c6390294
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c639027d 48b910d53cc6fa7f0000 mov rcx,7FFAC63CD510h (MT: SampleApi.Controllers.FeedController)
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390287 48390e          cmp     qword ptr [rsi],rcx
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c639028a 7408            je      00007ffa`c6390294
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c639028c e88f225b5f      call    coreclr!JIT_ChkCastClassSpecial (00007ffb`25942520)
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390291 488bf0          mov     rsi,rax
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390294 8b0e            mov     ecx,dword ptr [rsi]
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390296 48b95053d0c5fa7f0000 mov rcx,7FFAC5D05350h
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902a0 ba03000000      mov     edx,3
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902a5 e8a6515b5f      call    coreclr!JIT_GetSharedNonGCStaticBase_SingleAppDomain (00007ffb`25945450)
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902aa 48b93028341994010000 mov rcx,19419342830h
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902b4 488b31          mov     rsi,qword ptr [rcx]
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902b7 b901000000      mov     ecx,1
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902bc ba40420f00      mov     edx,0F4240h
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902c1 e8a213adff      call    00007ffa`c5e61668 (System.Linq.Enumerable.Range(Int32, Int32), mdToken: 0000000006000090)
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902c6 4c8bc0          mov     r8,rax
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902c9 8b5618          mov     edx,dword ptr [rsi+18h]
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902cc 488bce          mov     rcx,rsi
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902cf 48b8c0d6330ffb7f0000 mov rax,offset System_Private_CoreLib+0x62d6c0 (00007ffb`0f33d6c0)
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902d9 4883c420        add     rsp,20h
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902dd 5e              pop     rsi
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902de 48ffe0          jmp     rax&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s much nicer, there is a reference to one of my class: &lt;code class=&quot;highlighter-rouge&quot;&gt;SampleApi.Controllers.FeedController&lt;/code&gt;. What about the other address:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !u 00007ffa`c6501b6e
Normal JIT generated code
SampleApi.Controllers.FeedController..cctor()
Begin 00007ffac6501b40, size 46

E:\code\me\blog-samples\windbg-static\src\SampleApi\Controllers\FeedController.cs @ 10:
00007ffa`c6501b40 55              push    rbp
00007ffa`c6501b41 4883ec30        sub     rsp,30h
00007ffa`c6501b45 488d6c2430      lea     rbp,[rsp+30h]
00007ffa`c6501b4a 33c0            xor     eax,eax
00007ffa`c6501b4c 488945f8        mov     qword ptr [rbp-8],rax
00007ffa`c6501b50 48b9885d670ffb7f0000 mov rcx,offset System_Private_CoreLib+0x965d88 (00007ffb`0f675d88) (MT: System.Collections.Generic.List`1[[System.Int32, System.Private.CoreLib]])
00007ffa`c6501b5a e89127445f      call    coreclr!JIT_TrialAllocSFastMP_InlineGetThread (00007ffb`259442f0)
00007ffa`c6501b5f 488945f8        mov     qword ptr [rbp-8],rax
00007ffa`c6501b63 488b4df8        mov     rcx,qword ptr [rbp-8]
00007ffa`c6501b67 e874cde348      call    System_Private_CoreLib+0x62e8e0 (00007ffb`0f33e8e0) (System.Collections.Generic.List`1[[System.Int32, System.Private.CoreLib]]..ctor(), mdToken: 00000000060038ae)
00007ffa`c6501b6c 48b93028341994010000 mov rcx,19419342830h
00007ffa`c6501b76 488b55f8        mov     rdx,qword ptr [rbp-8]
00007ffa`c6501b7a e8810b445f      call    coreclr!JIT_CheckedWriteBarrier (00007ffb`25942700)
00007ffa`c6501b7f 90              nop
00007ffa`c6501b80 488d6500        lea     rsp,[rbp]
00007ffa`c6501b84 5d              pop     rbp
00007ffa`c6501b85 c3              ret&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This goes a step farther as it references the static constructor of &lt;code class=&quot;highlighter-rouge&quot;&gt;FeedController&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;SampleApi.Controllers.FeedController..cctor()&lt;/code&gt;). We now have enough information to inspect the code but first let’s take a deeper look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;FeedController&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s use the &lt;code class=&quot;highlighter-rouge&quot;&gt;SOS&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Name2EE&lt;/code&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands&quot;&gt;command&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Displays the &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodTable&lt;/code&gt; structure and &lt;code class=&quot;highlighter-rouge&quot;&gt;EEClass&lt;/code&gt; structure for the specified type or method in the specified module. […] This command supports the Windows debugger syntax of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;module&amp;gt;!&amp;lt;type&amp;gt;&lt;/code&gt;. The type must be fully qualified.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !name2ee SampleApi!SampleApi.Controllers.FeedController
Module:      00007ffac5d04d38
Assembly:    SampleApi.dll
Token:       0000000002000004
MethodTable: 00007ffac63cd510
EEClass:     00007ffac63bf968
Name:        SampleApi.Controllers.FeedController&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll use the &lt;code class=&quot;highlighter-rouge&quot;&gt;SOS&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;DumpClass&lt;/code&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands&quot;&gt;command&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Displays information about the &lt;code class=&quot;highlighter-rouge&quot;&gt;EEClass&lt;/code&gt; structure associated with a type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !DumpClass /d 00007ffac63bf968
Class Name:      SampleApi.Controllers.FeedController
mdToken:         0000000002000004
File:            E:\code\me\blog-samples\windbg-static\src\SampleApi\bin\Release\netcoreapp2.0\SampleApi.dll
Parent Class:    00007ffac63bf868
Module:          00007ffac5d04d38
Method Table:    00007ffac63cd510
Vtable Slots:    90
Total Method Slots:  92
Class Attributes:    100001
Transparency:        Critical
NumInstanceFields:   8
NumStaticFields:     1
              MT    Field   Offset                 Type VT     Attr            Value Name
00007ffac62ec808  400004a        8 ...ControllerContext  0 instance           _controllerContext
00007ffac6061d88  400004b       10 ...lMetadataProvider  0 instance           _metadataProvider
00007ffac6062f20  400004c       18 ...odelBinderFactory  0 instance           _modelBinderFactory
00007ffac6063178  400004d       20 ...ectModelValidator  0 instance           _objectValidator
00007ffac6487758  400004e       28 ...re.Mvc.IUrlHelper  0 instance           _url
00007ffac6487630  4000018       30 ...empDataDictionary  0 instance           _tempData
0000000000000000  4000019       38 ...l.DynamicViewData  0 instance           _viewBag
00007ffac6487480  400001a       40 ...iewDataDictionary  0 instance           _viewData
00007ffb0f675d88  4000002        8 ...Private.CoreLib]]  0   static 0000019019412bf0 MemoryHog&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So, it turns out the &lt;code class=&quot;highlighter-rouge&quot;&gt;FeedController&lt;/code&gt; has a &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; field named &lt;code class=&quot;highlighter-rouge&quot;&gt;MemoryHog&lt;/code&gt;. Probably not my &lt;a href=&quot;https://github.com/gabrielweyer/blog-samples/blob/4d434b594d7cab48f50bc12140fd9b7fd5f89977/windbg-static/src/SampleApi/Controllers/FeedController.cs#L10&quot;&gt;finest&lt;/a&gt; piece of &lt;a href=&quot;https://github.com/gabrielweyer/blog-samples/blob/4d434b594d7cab48f50bc12140fd9b7fd5f89977/windbg-static/src/SampleApi/Controllers/FeedController.cs#L15&quot;&gt;coding&lt;/a&gt; to be honest.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I learned how to trace back a &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; field to a &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;. I’m sure this will come in handy later.&lt;/p&gt;

&lt;p&gt;I might have made some mistakes around &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/address-and-address-range-syntax#span-idaddressrangesspanspan-idaddressrangesspanaddress-ranges&quot;&gt;Ranges&lt;/a&gt; as this is an area I’m still unfamiliar with but it shouldn’t prevent you from achieving the same result.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

</description>
        <pubDate>Fri, 09 Mar 2018 15:51:53 -0600</pubDate>
        <link>https://gabrielweyer.github.io//2018/03/09/windbg-1-static-root/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2018/03/09/windbg-1-static-root/</guid>
      </item>
    
      <item>
        <title>Beanstalk Seeder</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Elastic Beanstalk&lt;/code&gt; is a great platform, it offers both a &lt;code class=&quot;highlighter-rouge&quot;&gt;Web&lt;/code&gt; tier and a &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt; tier. I recently wrote about &lt;a href=&quot;/2018/01/28/simple-routing-elastic-beanstalk-worker/&quot;&gt;Simple Routing&lt;/a&gt; one of my library that allows you to route a &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; message to a specific endpoint on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While &lt;code class=&quot;highlighter-rouge&quot;&gt;Beanstalk&lt;/code&gt; works great once it’s deployed to &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS&lt;/code&gt; there is no easy way to run it locally. As soon as you want to execute an end-to-end flow involving both the &lt;code class=&quot;highlighter-rouge&quot;&gt;Web&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt; you need to manually &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; requests to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt; using &lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt; which is cumbersome and error-prone.&lt;/p&gt;

&lt;p&gt;As it core all the &lt;a href=&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features-managing-env-tiers.html&quot;&gt;SQS daemon&lt;/a&gt; does is dequeue messages from a &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; queue and &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; it to a specified endpoint. With this goal in mind I wrote &lt;a href=&quot;https://github.com/gabrielweyer/beanstalk-seeder&quot;&gt;Beanstalk Seeder&lt;/a&gt;.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;I had the following objectives:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Users should be able to get up and running quickly&lt;/li&gt;
  &lt;li&gt;Meaningful logging&lt;/li&gt;
  &lt;li&gt;Transform the &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; &lt;a href=&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-attributes.html&quot;&gt;message attributes&lt;/a&gt; into HTTP headers (in order to support &lt;a href=&quot;https://github.com/gabrielweyer/simple-routing&quot;&gt;Simple Routing&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;get-up-and-running-quickly&quot;&gt;Get up and running quickly&lt;/h2&gt;

&lt;p&gt;You can get &lt;code class=&quot;highlighter-rouge&quot;&gt;Beanstalk Seeder&lt;/code&gt; from &lt;a href=&quot;https://github.com/gabrielweyer/beanstalk-seeder/releases&quot;&gt;GitHub releases&lt;/a&gt;. Download the archive and extract it somewhere.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Beanstalk Seeder&lt;/code&gt;’s &lt;a href=&quot;https://github.com/gabrielweyer/beanstalk-seeder#configuration&quot;&gt;configuration&lt;/a&gt; is detailed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;README&lt;/code&gt;. All you need is a &lt;code class=&quot;highlighter-rouge&quot;&gt;iAM&lt;/code&gt; user, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;URI&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; queue &lt;code class=&quot;highlighter-rouge&quot;&gt;URI.&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;meaningful-logging&quot;&gt;Meaningful logging&lt;/h2&gt;

&lt;p&gt;When running a third-party tool, it’s critical to get meaningful logging as the binary is a black-box for the end user. I use &lt;a href=&quot;https://nblumhardt.com/2016/06/structured-logging-concepts-in-net-series-1/#what-is-structured-logging&quot;&gt;structured logging&lt;/a&gt; in order to make querying the log events a breeze. My logging framework of choice is &lt;a href=&quot;https://blog.getseq.net/serilog-tutorial/&quot;&gt;Serilog&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loggerConfiguration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LoggerConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Destructure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ByTransforming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MessageAttributeValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Destructure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Destructure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ByTransforming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Destructure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MinimumLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serilogLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enrich&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WithDemystifiedStackTraces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enrich&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromLogContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serilogLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The previous snippet highlights only a few of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Serilog&lt;/code&gt; features.&lt;/p&gt;

&lt;h3 id=&quot;the-structure-capturing-operator&quot;&gt;The structure-capturing operator&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MessageAttributeValue&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Message&lt;/code&gt; are both defined in the &lt;code class=&quot;highlighter-rouge&quot;&gt;awssdk.sqs&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; package. I’m interested in logging only some of their properties, &lt;code class=&quot;highlighter-rouge&quot;&gt;Serilog&lt;/code&gt; has the ability to capture object via the &lt;a href=&quot;https://nblumhardt.com/2016/08/serialized-data-structured-logging-concepts-in-net-6/#capturing-objects&quot;&gt;structure-capturing operator&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;enrichment&quot;&gt;Enrichment&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Enrichment is the act of adding additional properties to events, other than the ones originating from the message template.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Serilog&lt;/code&gt; supports &lt;a href=&quot;https://blog.getseq.net/serilog-tutorial/#enrichingwithambientcontext&quot;&gt;ambient context&lt;/a&gt;. I’m also using the excellent &lt;a href=&quot;https://github.com/benaadams/Ben.Demystifier&quot;&gt;Ben.Demystifier&lt;/a&gt; for getting nicer stack traces.&lt;/p&gt;

&lt;h3 id=&quot;sinks&quot;&gt;Sinks&lt;/h3&gt;

&lt;p&gt;By default, &lt;code class=&quot;highlighter-rouge&quot;&gt;Serilog&lt;/code&gt; does not log anywhere. In order to record events you’ll need to configure one or more &lt;code class=&quot;highlighter-rouge&quot;&gt;Sink&lt;/code&gt;s. In this case I’m writing to the console but they are &lt;a href=&quot;https://github.com/serilog/serilog/wiki/Provided-Sinks&quot;&gt;many other&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Sink&lt;/code&gt;s available.&lt;/p&gt;

&lt;h3 id=&quot;result&quot;&gt;Result&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/beanstalk-seeder/events.png&quot; alt=&quot;HTTP Path&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I hope the recorded events are descriptive enough so that an end user know what’s happening:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First I display the settings used, this is important as they could come from the &lt;code class=&quot;highlighter-rouge&quot;&gt;appsettings.json&lt;/code&gt;, environment variables or even the &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets?tabs=visual-studio#secret-manager&quot;&gt;user secrets&lt;/a&gt; if the environment is &lt;code class=&quot;highlighter-rouge&quot;&gt;Development&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Then using the &lt;code class=&quot;highlighter-rouge&quot;&gt;structure-capturing operator&lt;/code&gt; I log the relevant &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; message properties.&lt;/li&gt;
  &lt;li&gt;Instead of logging the complete HTTP request I log the content of the body and the relevant headers.&lt;/li&gt;
  &lt;li&gt;When deleting the message, I log the &lt;code class=&quot;highlighter-rouge&quot;&gt;ReceiptHandle&lt;/code&gt;, this is the value used to delete a message and the user can correlate it to what was displayed above.&lt;/li&gt;
  &lt;li&gt;Finally, rather than not displaying anything when there are no messages in the queue I inform the user that’s the case and how long I’ll wait before retrying.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;interestings-bits&quot;&gt;Interestings bits&lt;/h2&gt;

&lt;p&gt;I’m using a &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource?view=netcore-2.0&quot;&gt;CancellationTokenSource&lt;/a&gt; so that the user can stop the message pump at any time (relying on &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.console.cancelkeypress?view=netcore-2.0&quot;&gt;Console.CancelKeyPress&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/gabrielweyer/beanstalk-seeder/blob/ca47d6f84fe748915a22de63b23a34ef735a88ae/src/BeanstalkSeeder/Services/MessagePump.cs&quot;&gt;MessagePump&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; is the only &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; with some logic. I wrote some &lt;a href=&quot;https://github.com/gabrielweyer/beanstalk-seeder/blob/ca47d6f84fe748915a22de63b23a34ef735a88ae/tests/BeanstalkSeederTests/MessagePumpTests.cs&quot;&gt;tests&lt;/a&gt; around the cancellation token, the transformation of &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; message attributes into HTTP headers and the back-off when no messages are available in the queue.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope you’ll find &lt;a href=&quot;https://github.com/gabrielweyer/beanstalk-seeder&quot;&gt;Beanstalk Seeder&lt;/a&gt; as useful as I did, combined with &lt;a href=&quot;https://github.com/gabrielweyer/simple-routing&quot;&gt;Simple Routing&lt;/a&gt; it simplified and streamlined my &lt;code class=&quot;highlighter-rouge&quot;&gt;Elastic Beanstalk&lt;/code&gt; development.&lt;/p&gt;

&lt;p&gt;I also wanted to point out that &lt;code class=&quot;highlighter-rouge&quot;&gt;Beanstalk Seeder&lt;/code&gt; is platform agnostic. It doesn’t matter if you’re developing using &lt;code class=&quot;highlighter-rouge&quot;&gt;Node.js&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Go&lt;/code&gt; or any other of the &lt;a href=&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html&quot;&gt;Elastic Beanstalk supported platforms&lt;/a&gt;, all you need to do is install the latest &lt;a href=&quot;https://www.microsoft.com/net/download/windows&quot;&gt;.NET Core runtime&lt;/a&gt; (available on &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;macOS&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Linux&lt;/code&gt;).&lt;/p&gt;

</description>
        <pubDate>Fri, 23 Feb 2018 17:40:46 -0600</pubDate>
        <link>https://gabrielweyer.github.io//2018/02/23/beanstalk-seeder/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2018/02/23/beanstalk-seeder/</guid>
      </item>
    
      <item>
        <title>Singleton HTTP Client</title>
        <description>&lt;p&gt;Even though the &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; implements &lt;code class=&quot;highlighter-rouge&quot;&gt;IDisposable&lt;/code&gt; it is supposed to be used as a singleton as stated in the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=netcore-2.0#Remarks&quot;&gt;API reference&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; is intended to be instantiated once and re-used throughout the life of an application. Instantiating an &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; class for every request will exhaust the number of sockets available under heavy loads. This will result in &lt;code class=&quot;highlighter-rouge&quot;&gt;SocketException&lt;/code&gt; errors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The accepted best practice is to have one &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; per HTTP endpoint you’re interacting with. This will not only yield better performance it also allows to encapsulate endpoint specific logic (such as setting headers).&lt;/p&gt;

&lt;p&gt;Now the question is: how do you configure your &lt;code class=&quot;highlighter-rouge&quot;&gt;IoC&lt;/code&gt; container to resolve the expected &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; instance? This used to require a cumbersome registration but &lt;code class=&quot;highlighter-rouge&quot;&gt;.NET Core 2.1&lt;/code&gt; will ship with the &lt;a href=&quot;https://github.com/aspnet/HttpClientFactory&quot;&gt;HttpClientFactory&lt;/a&gt; making our life much easier.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;httpclientfactory&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.stevejgordon.co.uk/&quot;&gt;Steve Gordon&lt;/a&gt; has an excellent &lt;a href=&quot;https://www.stevejgordon.co.uk/httpclientfactory-named-typed-clients-aspnetcore&quot;&gt;post&lt;/a&gt; explaining what is &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt; and how it works.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt; aims to provide the following improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alleviate sockets exhaustion by reusing connection when possible&lt;/li&gt;
  &lt;li&gt;Alleviate stale &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS&lt;/code&gt; records (by default &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; caches &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS&lt;/code&gt; records for its lifetime)&lt;/li&gt;
  &lt;li&gt;Easily resolve an &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; instance linked to a specific HTTP endpoint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What if you can’t use &lt;code class=&quot;highlighter-rouge&quot;&gt;.NET Core&lt;/code&gt; or can’t update? Fear not, we can achieve tomorrow’s dream with today’s tools (most of it anyway).&lt;/p&gt;

&lt;h2 id=&quot;associate-an-httpclient-instance-with-the-service-using-it&quot;&gt;Associate an &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; instance with the service using it&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; instances communicating with a specific HTTP endpoint tend to have dedicated settings such as an &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization&lt;/code&gt; header, default request headers (&lt;code class=&quot;highlighter-rouge&quot;&gt;Accept&lt;/code&gt; for example), maybe a &lt;code class=&quot;highlighter-rouge&quot;&gt;HMAC&lt;/code&gt;… I tend to encapsulate those settings in a &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; to decouple the settings’s source from the consummer.&lt;/p&gt;

&lt;p&gt;Let’s imagine that we’re integrating with a fictitious company called &lt;em&gt;Contoso&lt;/em&gt;. The integration takes place via an HTTP API and our contact at Contoso gave us a bearer token that needs to be set on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;The first step is to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;POCO&lt;/code&gt; modelizing the settings:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContosoSettings&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BearerToken&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; makes writing tests harder. Developers tend to derive from &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpMessageHandler&lt;/code&gt; and provide an implementation allowing them to assert the requests issued by the &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt;. I prefer to introduce an interface called &lt;code class=&quot;highlighter-rouge&quot;&gt;IHttpClient&lt;/code&gt; exposing a single method to handle &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; traffic:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IHttpClient&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpResponseMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SendAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpRequestMessage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We then implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;ContosoHttpClient&lt;/code&gt; that will be dedicated to communicating with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Contoso&lt;/code&gt; API:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContosoHttpClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IHttpClient&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ContosoHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContosoSettings&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DefaultRequestHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Authorization&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AuthenticationHeaderValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bearer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BearerToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And finally we registers the &lt;code class=&quot;highlighter-rouge&quot;&gt;Type&lt;/code&gt;s in the &lt;code class=&quot;highlighter-rouge&quot;&gt;IoC&lt;/code&gt; container:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contosoHttpClientAutofacKeyName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ContosoHttpClient&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContosoHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contosoHttpClientAutofacKeyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SingleInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContosoClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WithParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ResolvedParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParameterType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResolveNamed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContosoHttpClientAutofacKeyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AsImplementedInterfaces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;InstancePerRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Abbreviated: resolve and register ContosoSettings (from Web.config, appsettings.json, CSV, volumen...)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This snippet is using &lt;code class=&quot;highlighter-rouge&quot;&gt;Autofac&lt;/code&gt; &lt;a href=&quot;http://autofaccn.readthedocs.io/en/latest/advanced/keyed-services.html#named-services&quot;&gt;named service&lt;/a&gt;. Using a &lt;code class=&quot;highlighter-rouge&quot;&gt;named service&lt;/code&gt; this way has several benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If someone registered another &lt;code class=&quot;highlighter-rouge&quot;&gt;IHttpClient&lt;/code&gt; that is supposed to be used everywhere else we will not override the registration for all the other services while still retrieving an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;ContosoHttpClient&lt;/code&gt; when resolving &lt;code class=&quot;highlighter-rouge&quot;&gt;IContosoClient&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;named service&lt;/code&gt; is an implementation details that only the &lt;code class=&quot;highlighter-rouge&quot;&gt;IoC&lt;/code&gt; container knows about.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;solve-stale-dns-records&quot;&gt;Solve stale DNS records&lt;/h2&gt;

&lt;p&gt;Let’s say you’re interacting with an API hosted at &lt;code class=&quot;highlighter-rouge&quot;&gt;https://api.contoso.com&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; will first have to resolve the domain name to an &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt; thanks to a &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS&lt;/code&gt; server. But what happens if the &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS&lt;/code&gt; record is updated and the domain name now resolves to another &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt;? If you are using a transient &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; you’ll be fine but if you’re using a singleton instance (as you should) &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt;s will start to shoot up in your monitoring system. Should we stop calling APIs, or maybe rewrite everything in &lt;code class=&quot;highlighter-rouge&quot;&gt;Go&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.net.servicepoint.connectionleasetimeout?view=netframework-4.7.1#System_Net_ServicePoint_ConnectionLeaseTimeout&quot;&gt;ConnectionLeaseTimeout&lt;/a&gt; property can solve this situation nicely for us:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;Int32&lt;/code&gt; that specifies the number of &lt;strong&gt;milliseconds&lt;/strong&gt; that an active &lt;code class=&quot;highlighter-rouge&quot;&gt;ServicePoint&lt;/code&gt; connection remains open. &lt;strong&gt;The default is &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;, which allows an active &lt;code class=&quot;highlighter-rouge&quot;&gt;ServicePoint&lt;/code&gt; connection to stay connected indefinitely&lt;/strong&gt;. Set this property to &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to force &lt;code class=&quot;highlighter-rouge&quot;&gt;ServicePoint&lt;/code&gt; connections to close after servicing a request.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is how you set it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiUri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://api.contoso.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServicePointManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindServicePoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apiUri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConnectionLeaseTimeout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the previous snippet I’m keeping the connection opened for a minute which seems like a good trade-off.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I haven’t looked at the implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt; yet but I suspect the end result will be fairly similar to what I demonstrated above. If you still have doubts about using a singleton &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; I recommend you to perf test it. At a previous customer I developped an API that was calling other HTTP endpoints, I increased the throughput by a factor of &lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt; by changing a single thing: I made the &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; a singleton rather than a per-request scope.&lt;/p&gt;

</description>
        <pubDate>Thu, 08 Feb 2018 14:34:06 -0600</pubDate>
        <link>https://gabrielweyer.github.io//2018/02/08/singleton-http-client/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2018/02/08/singleton-http-client/</guid>
      </item>
    
      <item>
        <title>Simple Routing for Elastic Beanstalk Worker tier</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Elastic Beanstalk&lt;/code&gt; offers both a &lt;code class=&quot;highlighter-rouge&quot;&gt;Web&lt;/code&gt; tier and a &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt; tier. This allows developers to build reasonably complex applications without having to maintain moving pieces. Offloading heavy-duty workloads to the worker in order to keep the web tier responsive is as easy as putting a message on a queue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/http-path.png&quot; alt=&quot;HTTP Path&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One annoyance that I have with &lt;code class=&quot;highlighter-rouge&quot;&gt;Beanstalk&lt;/code&gt; is that there is no way to direct a message to a specific endpoint, hence leaving a single endpoint the responsibility of distributing the messages to all their handlers and potentially leading to brittle code. But it doesn’t have to be that way.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; messages have &lt;a href=&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-attributes.html&quot;&gt;attributes&lt;/a&gt;, attributes can be set by the sender and are read by the receiver. The idea is to use a known attribute to attach routing metadata to the message.&lt;/p&gt;

&lt;h3 id=&quot;constants&quot;&gt;Constants&lt;/h3&gt;

&lt;p&gt;Constants are the base of any decently built &lt;code class=&quot;highlighter-rouge&quot;&gt;C#&lt;/code&gt; application. I did not want to depart from to this rule and hence added some constants:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RoutingConstants&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HeaderName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HeaderType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;String&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These constansts will be used to add routing metadata to the &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; message.&lt;/p&gt;

&lt;p&gt;We can then define our routes via some more constants:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WorkerConstants&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoSomeWorkTaskName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;do-some-work&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoSomeOtherWorkTaskName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;do-some-other-work&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: those two &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; will have to be referenced by the sender and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;sending-the-message&quot;&gt;Sending the message&lt;/h3&gt;

&lt;p&gt;The sender will most likely be the &lt;code class=&quot;highlighter-rouge&quot;&gt;Web&lt;/code&gt; tier but it could be any system being able to send a message to a &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; queue.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sendMessageRequest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SendMessageRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Abbreviated: set properties on sendMessageRequest, such as the MessageBody and the QueueUrl&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// We're using RoutingConstants.HeaderName as the MessageAttribute key&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// and WorkerConstants.DoSomeWorkTaskName as the MessageAttribute value&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sendMessageRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MessageAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RoutingConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HeaderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageAttributeValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WorkerConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoSomeWorkTaskName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RoutingConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HeaderType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Abbreviated: send the message&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;middleware&quot;&gt;Middleware&lt;/h3&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;, the routing is implemented via a &lt;code class=&quot;highlighter-rouge&quot;&gt;Middleware&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HeaderRoutingMiddleware&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Elastic Beanstalk prefixes the SQS messages properties' name with &quot;X-Aws-Sqsd-Attr-&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskHeaderName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;X-Aws-Sqsd-Attr-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RoutingConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HeaderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// We get the value of the routing header&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;StringValues&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TaskHeaderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// And set it as the path&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Single&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: don’t forget to add &lt;code class=&quot;highlighter-rouge&quot;&gt;HeaderRoutingMiddleware&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;IApplicationBuilder&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;controller&quot;&gt;Controller&lt;/h3&gt;

&lt;p&gt;The last piece of the puzzle is defining the expected route on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// This is important, we do not want a prefix in front of the action's route&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[Route(&quot;&quot;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Controller&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// The route has to match the value given to the MessageAttribute&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HttpPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkerConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoSomeWorkTaskName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SomeMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Abbreviated for clarity&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;simple-routing&quot;&gt;Simple routing&lt;/h2&gt;

&lt;p&gt;I used &lt;code class=&quot;highlighter-rouge&quot;&gt;Simple Routing&lt;/code&gt; in production over the last few months and am now confident that it does what it’s supposed to do. This is why I decided to release it under a &lt;code class=&quot;highlighter-rouge&quot;&gt;MIT&lt;/code&gt; license to allow others to benefit from my work.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Simple Routing&lt;/code&gt; is available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;On &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; as the package &lt;a href=&quot;https://www.nuget.org/packages/BeanstalkWorker.SimpleRouting/&quot;&gt;BeanstalkWorker.SimpleRouting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;GitHub&lt;/code&gt; &lt;a href=&quot;https://github.com/gabrielweyer/simple-routing/releases&quot;&gt;release&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;As &lt;a href=&quot;https://github.com/gabrielweyer/simple-routing&quot;&gt;source&lt;/a&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;Github&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;The implementation is so simple that you can just copy the classes into your own solution if that works better for you&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Simple Routing&lt;/code&gt; solution contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;SampleWeb&lt;/code&gt; app, you can either:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Send “work” - &lt;code class=&quot;highlighter-rouge&quot;&gt;Send/Work&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Send “nothing” - &lt;code class=&quot;highlighter-rouge&quot;&gt;Send/Nothing&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;send-messages&quot;&gt;Send messages&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;GET http://localhost:5000/Send/Work HTTP/1.1
Host: localhost:5000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/web-send-work.png&quot; alt=&quot;Send Work&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;GET http://localhost:5000/Send/Nothing HTTP/1.1
Host: localhost:5000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/web-send-nothing.png&quot; alt=&quot;Send Nothing&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;peek-at-the-messages&quot;&gt;Peek at the messages&lt;/h4&gt;

&lt;p&gt;Now let’s look at the messages in the &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; queue:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Work&lt;/code&gt; message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/message-work-body.png&quot; alt=&quot;Work Message Body&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/message-work-attributes.png&quot; alt=&quot;Work Message Attributes&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Nothing&lt;/code&gt; message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/message-nothing-body.png&quot; alt=&quot;Nothing Message Body&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/message-nothing-attributes.png&quot; alt=&quot;Nothing Message Attributes&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;handle-the-messages&quot;&gt;Handle the messages&lt;/h4&gt;

&lt;p&gt;Launch the &lt;code class=&quot;highlighter-rouge&quot;&gt;SampleWorker&lt;/code&gt; app. When running in &lt;code class=&quot;highlighter-rouge&quot;&gt;ElasticBeanstalk&lt;/code&gt; the &lt;a href=&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features-managing-env-tiers.html&quot;&gt;Sqsd daemon&lt;/a&gt; reads &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; messages from the &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; queue and &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; the content to your &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;. But we’re running the &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt; on our machine and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Sqsd daemon&lt;/code&gt; is not available. This is why I wrote &lt;code class=&quot;highlighter-rouge&quot;&gt;Beanstalk Seeder&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/gabrielweyer/beanstalk-seeder&quot;&gt;Beanstalk Seeder&lt;/a&gt; emulates the &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS Daemon&lt;/code&gt; surrounding an &lt;code class=&quot;highlighter-rouge&quot;&gt;Elastic Beanstalk&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker Tier&lt;/code&gt; so that you can replicate the interaction between a &lt;code class=&quot;highlighter-rouge&quot;&gt;Web Tier&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker Tier&lt;/code&gt; on your machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;handling-the-work-message&quot;&gt;Handling the &lt;code class=&quot;highlighter-rouge&quot;&gt;Work&lt;/code&gt; message&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Beanstalk Seeder&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/beanstalk-seeder-work.png&quot; alt=&quot;Work Message Beanstalk Seeder&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/worker-work.png&quot; alt=&quot;Work Message Worker&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;handling-the-nothing-message&quot;&gt;Handling the &lt;code class=&quot;highlighter-rouge&quot;&gt;Nothing&lt;/code&gt; message&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Beanstalk Seeder&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/beanstalk-seeder-nothing.png&quot; alt=&quot;Nothing Message Beanstalk Seeder&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/worker-nothing.png&quot; alt=&quot;Nothing Message Worker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I wrote a detailed guide in the &lt;a href=&quot;https://github.com/gabrielweyer/simple-routing&quot;&gt;GitHub repository&lt;/a&gt;. Give it a try and let me know if it works for you.&lt;/p&gt;

</description>
        <pubDate>Sun, 28 Jan 2018 14:24:33 -0600</pubDate>
        <link>https://gabrielweyer.github.io//2018/01/28/simple-routing-elastic-beanstalk-worker/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2018/01/28/simple-routing-elastic-beanstalk-worker/</guid>
      </item>
    
  </channel>
</rss>

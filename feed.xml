<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A somewhat technical blog</title>
    <description>My name is Gabriel Weyer. I’m a software developer and currently based in Melbourne, Australia. I blog about technology.</description>
    <link>https://gabrielweyer.github.io//</link>
    <atom:link href="https://gabrielweyer.github.io//feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Testing anti-patterns #1</title>
        <description>&lt;p&gt;I often ask candidates to define a good unit test. This is the starting point of a conversation around testing strategies and delivering value. Over the years I’ve heard opinions ranging from &lt;code class=&quot;highlighter-rouge&quot;&gt;the 100% coverage&lt;/code&gt;, passing by &lt;code class=&quot;highlighter-rouge&quot;&gt;testing is for testers&lt;/code&gt;, all the way to &lt;code class=&quot;highlighter-rouge&quot;&gt;we don't do automated testing&lt;/code&gt;. If the notion of a &lt;em&gt;good test&lt;/em&gt; can be subjective, it is easier to identify a &lt;strong&gt;bad&lt;/strong&gt; test. Bloggers have written about this topic at length but I thought I would try paraphrasing the same content hoping nobody would notice.&lt;/p&gt;

&lt;p&gt;I must admit I have written - quite - a few bad tests myself and that’s fine. We all make mistakes, how we handle those mistakes is what help us grow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s important to understand why the mistake happened and put in place measures to prevent the same mistake from happening again&lt;/li&gt;
  &lt;li&gt;Equally we should challenge existing practices, they might be there for a good reason but they might instead be there for a &lt;strong&gt;bad&lt;/strong&gt; reason&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;Here are a few anti-patterns I’ve noticed over the years:&lt;/p&gt;

&lt;h2 id=&quot;ignored-or-commented-test&quot;&gt;Ignored or commented test&lt;/h2&gt;

&lt;p&gt;Have you ever seen this?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;na&quot;&gt;[Ignore]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[TestMethod]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Luckily only &lt;code class=&quot;highlighter-rouge&quot;&gt;MSTest&lt;/code&gt; allows to ignore a test without providing a message, both &lt;code class=&quot;highlighter-rouge&quot;&gt;xUnit&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;NUnit&lt;/code&gt; require the developer to provide a message. What’s worse is that the message of the commit ignoring the test often reads &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;fixed&quot; test YOLO LMAO&lt;/code&gt; and you’re left wondering what deep philosophical message lies hidden behind those mundane words.&lt;/p&gt;

&lt;p&gt;In the case of a &lt;em&gt;commented test&lt;/em&gt; the solution is simple: &lt;strong&gt;delete&lt;/strong&gt; it. Regarding &lt;em&gt;ignored tests&lt;/em&gt;, have a quick read through and run them. If you can’t get them to pass, &lt;strong&gt;delete&lt;/strong&gt; them too. Ignored / commented tests will only confuse future developers. You should treat your test code the same way you treat your production code: if a piece of code has no use anymore it should go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ask yourself&lt;/strong&gt;: why am I ignoring this test, what conditions should be met to enable it again? Then write a &lt;strong&gt;descriptive&lt;/strong&gt; ignore message.&lt;/p&gt;

&lt;h2 id=&quot;non-thread-safe&quot;&gt;Non-thread-safe&lt;/h2&gt;

&lt;p&gt;The first thing that is wrong with this test is that it’s recording log messages so that they can be asserted at a later stage (see &lt;a href=&quot;#asserting-log-messages&quot;&gt;below&lt;/a&gt; for the log anti-pattern):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;When&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But this was not the only issue with this statement. After making an unrelated change this test failed. I ran it again on its own and it passed, so this test was failing intermittently and I was also getting different &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Type&lt;/code&gt;s! The &lt;code class=&quot;highlighter-rouge&quot;&gt;NullReferenceException&lt;/code&gt; wasn’t meaningful but I also got an &lt;code class=&quot;highlighter-rouge&quot;&gt;IndexOutOfRangeException&lt;/code&gt; when adding an element to the &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It turned out the code under test was multi-threaded and multiple threads were trying to add to the &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; at the same time. The &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=netframework-4.7.1#Thread_Safety&quot;&gt;.NET API browser&lt;/a&gt; makes it clear than &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; is not thread-safe:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Any instance members are not guaranteed to be thread safe. […] &lt;strong&gt;To ensure thread safety, lock the collection during a read or write operation&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this instance the solution was to lock the &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; when adding to it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;When&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;());&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Ask yourself&lt;/strong&gt;: most of the code we write is not performance critical, do you need to create multiple threads?&lt;/p&gt;

&lt;h2 id=&quot;failure-without-enough-context&quot;&gt;Failure without enough context&lt;/h2&gt;

&lt;p&gt;There is nothing more frustrating than having a build failing on the build server and be faced by this kind of log:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Assert.True() Failure
Expected: True
Actual:   False&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From there things only get worse, when you look at the actual assert you discover it’s asserting multiple things at the same time and you’ve no idea which one went wrong:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you need to compare objects you can use an assertion library such as &lt;a href=&quot;http://fluentassertions.com/&quot;&gt;Fluent Assertions&lt;/a&gt; or &lt;a href=&quot;https://github.com/shouldly/shouldly&quot;&gt;Shouldly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ask yourself&lt;/strong&gt;: if I make this test break, would I have enough context based on &lt;strong&gt;only&lt;/strong&gt; the logs to understand what went wrong?&lt;/p&gt;

&lt;h2 id=&quot;asserting-log-messages&quot;&gt;Asserting log messages&lt;/h2&gt;

&lt;p&gt;Please don’t do this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Received&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Super important log&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Logging is an implementation detail, asserting log messages is over-specifying.&lt;/p&gt;

&lt;p&gt;On the other hand, if recording that something happened is critical from a business point of view you don’t want to use logging for this purpose as developers should be able to modify logging as they see fit.&lt;/p&gt;

&lt;p&gt;Tracking business events can be achieved in different ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Via your &lt;code class=&quot;highlighter-rouge&quot;&gt;APM&lt;/code&gt; service, both &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/application-insights/app-insights-api-custom-events-metrics#trackevent&quot;&gt;Application Insights&lt;/a&gt; and &lt;a href=&quot;https://docs.newrelic.com/docs/insights/insights-data-sources/custom-data/insert-custom-events-new-relic-apm-agents&quot;&gt;New Relic&lt;/a&gt; can track custom events&lt;/li&gt;
  &lt;li&gt;Via a service bus. Your code could be instrumented to emit messages and any interested service can subscribe to them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Ask yourself&lt;/strong&gt;: is this the best way of doing this? Read the documentation of the systems you’re currently using, you’ll quite often discover features you had no idea existed.&lt;/p&gt;

&lt;h2 id=&quot;nullreferenceexception-in-constructor&quot;&gt;NullReferenceException in constructor&lt;/h2&gt;

&lt;p&gt;Don’t assert than your constructors are throwing a &lt;code class=&quot;highlighter-rouge&quot;&gt;NullReferenceException&lt;/code&gt; when being passed a &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;. Your &lt;code class=&quot;highlighter-rouge&quot;&gt;IoC&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;container&lt;/code&gt; will throw an &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt; anyway when trying to resolve the dependencies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ask yourself&lt;/strong&gt;: do I need to test third-party libraries?&lt;/p&gt;

&lt;h2 id=&quot;sanity-check&quot;&gt;Sanity check&lt;/h2&gt;

&lt;p&gt;Quite often when starting a new project, developers will create a &lt;em&gt;sanity check&lt;/em&gt; test. This is a test that &lt;strong&gt;should&lt;/strong&gt; pass and if it were to fail it would mean that things are terribly wrong. An example of such a test is this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ve never seen this kind of test fail. Moreover, this test does not have any value as it doesn’t give me any confidence that the code is behaving the way it is supposed to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ask yourself&lt;/strong&gt;: Can I break this test by altering the correctness of the production code?&lt;/p&gt;

</description>
        <pubDate>Sat, 24 Mar 2018 06:36:53 +0000</pubDate>
        <link>https://gabrielweyer.github.io//2018/03/24/testing-anti-patterns-1/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2018/03/24/testing-anti-patterns-1/</guid>
      </item>
    
      <item>
        <title>WinDbg #1 - The static root</title>
        <description>&lt;p&gt;This new series is an attempt to improve my &lt;code class=&quot;highlighter-rouge&quot;&gt;WinDbg&lt;/code&gt; skills. The concept is to create faulty applications and troubleshoot the issue using &lt;code class=&quot;highlighter-rouge&quot;&gt;WinDbg&lt;/code&gt; pretending that I have no prior knowledge of the code.&lt;/p&gt;

&lt;p&gt;I’ll be using my &lt;a href=&quot;https://github.com/gabrielweyer/nuggets/blob/master/windbg/README.md&quot;&gt;WinDbg guide&lt;/a&gt; as I can never remember the commands! I’m hoping than through those challenges I’ll get to improve the guide. Today’s exercise is inspired by the excellent blog post &lt;a href=&quot;https://blogs.microsoft.co.il/sasha/2012/02/07/pinpointing-a-static-gc-root-with-sos/&quot;&gt;Pinpointing a Static GC Root with SOS&lt;/a&gt;. The post only contains a few commands but I must admit that it took me hours to achieve the same result.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The code&lt;/h2&gt;

&lt;p&gt;The application is available on &lt;a href=&quot;https://github.com/gabrielweyer/blog-samples/tree/master/windbg-static&quot;&gt;GitHub&lt;/a&gt;. Clone it, I’ll wait.&lt;/p&gt;

&lt;p&gt;It is an &lt;code class=&quot;highlighter-rouge&quot;&gt;ASP.NET Core 2.0&lt;/code&gt; project:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compile the solution with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Release&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Configuration&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Launch the &lt;code class=&quot;highlighter-rouge&quot;&gt;SampleApi&lt;/code&gt; project, it should start on port &lt;code class=&quot;highlighter-rouge&quot;&gt;5000&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;Kestrel&lt;/code&gt; will make the next part easier&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Launch &lt;code class=&quot;highlighter-rouge&quot;&gt;Process Explorer&lt;/code&gt;. If you don’t have this gem drop everything you’re doing and &lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer&quot;&gt;download&lt;/a&gt; it now! Click on the &lt;strong&gt;crosshair&lt;/strong&gt;, mouse hover the process you want to target and release the button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/windbg-1/find-process.gif&quot; alt=&quot;Find process&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Working Set&lt;/code&gt; is sitting just under &lt;code class=&quot;highlighter-rouge&quot;&gt;44 MB&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Issue &lt;code class=&quot;highlighter-rouge&quot;&gt;20&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; requests to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:5000/feed/me&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’re as lazy as me you can leverage &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install-win10&quot;&gt;Windows Subsystem for Linux&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;seq 1 20&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;curl &lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:5000/feed/me&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/windbg-1/hungry-process.png&quot; alt=&quot;Hungry process&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Working Set&lt;/code&gt; is now sitting just under &lt;code class=&quot;highlighter-rouge&quot;&gt;262 MB&lt;/code&gt;. That’s an increase of roughly &lt;code class=&quot;highlighter-rouge&quot;&gt;10 MB&lt;/code&gt; per request.&lt;/p&gt;

&lt;h2 id=&quot;capture-a-full-memory-dump&quot;&gt;Capture a full memory dump&lt;/h2&gt;

&lt;p&gt;The easiest option in this case is to leverage &lt;code class=&quot;highlighter-rouge&quot;&gt;Process Explorer&lt;/code&gt; as we already have it opened. Right-click on &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet.exe&lt;/code&gt; and select &lt;code class=&quot;highlighter-rouge&quot;&gt;Create Full Dump...&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/windbg-1/create-full-dump.png&quot; alt=&quot;Create Full Dump&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;install-and-configure-windbg&quot;&gt;Install and configure &lt;code class=&quot;highlighter-rouge&quot;&gt;WinDbg&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Follow these instructions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gabrielweyer/nuggets/blob/master/windbg/README.md#download-and-install-windbg&quot;&gt;Download and install WinDbg&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gabrielweyer/nuggets/blob/master/windbg/README.md#configure-the-symbols&quot;&gt;Configure the symbols&lt;/a&gt;:&lt;/li&gt;
  &lt;li&gt;Right-click on &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet.exe&lt;/code&gt; and select &lt;code class=&quot;highlighter-rouge&quot;&gt;Properties&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/windbg-1/properties.png&quot; alt=&quot;Properties&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Copy the path of the directory where &lt;code class=&quot;highlighter-rouge&quot;&gt;SampleApi.dll&lt;/code&gt; is located (in my case it is &lt;code class=&quot;highlighter-rouge&quot;&gt;E:/code/me/blog-samples/windbg-static/src/SampleApi/bin/Release/netcoreapp2.0/&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/windbg-1/command-line.png&quot; alt=&quot;Binaries path&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Copy the content of this directory into your symbols directory (in my case I configured &lt;code class=&quot;highlighter-rouge&quot;&gt;sympath&lt;/code&gt; to include &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\symbols\local\&lt;/code&gt;):&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/windbg-1/symbols-directory.png&quot; alt=&quot;Symbols directory&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gabrielweyer/nuggets/blob/master/windbg/README.md#open-a-memory-dump&quot;&gt;Open the memory dump&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gabrielweyer/nuggets/blob/master/windbg/README.md#net-core&quot;&gt;Load the SOS extension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we’re in business!&lt;/p&gt;

&lt;h2 id=&quot;identifying-the-most-problematic-type--instance&quot;&gt;Identifying the most problematic &lt;code class=&quot;highlighter-rouge&quot;&gt;Type&lt;/code&gt; / instance&lt;/h2&gt;

&lt;p&gt;We’ll start with the &lt;code class=&quot;highlighter-rouge&quot;&gt;DumpHeap&lt;/code&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands&quot;&gt;command&lt;/a&gt; from the &lt;code class=&quot;highlighter-rouge&quot;&gt;SOS&lt;/code&gt; extension.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Displays information about the garbage-collected heap […]. The &lt;code class=&quot;highlighter-rouge&quot;&gt;-stat&lt;/code&gt; option restricts the output to the statistical type summary.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead of listing every single object present in the heap(s), this will group them by &lt;code class=&quot;highlighter-rouge&quot;&gt;Class Name&lt;/code&gt; and provide us with an instance &lt;code class=&quot;highlighter-rouge&quot;&gt;Count&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TotalSize&lt;/code&gt; taken (in &lt;code class=&quot;highlighter-rouge&quot;&gt;bytes&lt;/code&gt;). Let’s run it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !dumpheap -stat
Statistics:
              MT    Count    TotalSize Class Name
00007ffb0f6cec68        1           24 System.Collections.Generic.GenericEqualityComparer`1[[System.Int32, System.Private.CoreLib]]
00007ffb0f6cb200        1           24 System.Collections.Generic.GenericEqualityComparer`1[[System.Int64, System.Private.CoreLib]]
00007ffb0f6be130        1           24 System.Collections.Generic.GenericComparer`1[[System.Int32, System.Private.CoreLib]]
// Abbreviated
00007ffb0f632ca8       97       151456 System.Object[]
00007ffac6364330        8       262336 Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.LibuvThread+Work[]
00007ffac6158558    30346       971072 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.DateHeaderValueManager+DateHeaderValues
00007ffac638df58    30345      1942080 System.Collections.Concurrent.ConcurrentDictionary`2+&amp;lt;GetEnumerator&amp;gt;d__38[[System.Int64, System.Private.CoreLib],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.FrameConnectionReference, Microsoft.AspNetCore.Server.Kestrel.Core]]
00007ffb0f633050    30475      2148742 System.Byte[]
00007ffb0f667be8    32554      2795084 System.String
00000190177eb6e0     2837     16874148      Free
00007ffb0f634158      158    251802384 System.Int32[]
Total 137415 objects&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It looks like we have a winner! There are &lt;code class=&quot;highlighter-rouge&quot;&gt;158&lt;/code&gt; instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Int32[]&lt;/code&gt; for a &lt;code class=&quot;highlighter-rouge&quot;&gt;TotalSize&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;251802384 bytes&lt;/code&gt;. As we have only &lt;code class=&quot;highlighter-rouge&quot;&gt;158&lt;/code&gt; instances it’s likely we have a few big instances, let’s list the ones that are bigger than &lt;code class=&quot;highlighter-rouge&quot;&gt;1000 bytes&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !dumpheap -type System.Int32[] -min 1000
         Address               MT     Size
0000019019413cf0 00007ffb0f634158     4120
0000019019414d08 00007ffb0f634158     8216
0000019019416d20 00007ffb0f634158    16408
000001901941ad38 00007ffb0f634158    32792
0000019019422d50 00007ffb0f634158    65560
000001941a364df0 00007ffb0f634158 33554456
000001941c364e28 00007ffb0f634158 134217752
0000019439341038 00007ffb0f634158 16777240
0000019449341038 00007ffb0f634158 67108888

Statistics:
              MT    Count    TotalSize Class Name
00007ffb0f634158        9    251785432 System.Int32[]
Total 9 objects&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As it turns out one instance is &lt;code class=&quot;highlighter-rouge&quot;&gt;134217752 bytes&lt;/code&gt; which is roughly &lt;code class=&quot;highlighter-rouge&quot;&gt;134 MB&lt;/code&gt;. I suggest we start investigating this one.&lt;/p&gt;

&lt;h2 id=&quot;determine-what-is-keeping-our-instance-alive&quot;&gt;Determine what is keeping our instance alive&lt;/h2&gt;

&lt;p&gt;We’ll use another &lt;code class=&quot;highlighter-rouge&quot;&gt;SOS&lt;/code&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands&quot;&gt;command&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;GCRoot&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Displays information about references (or roots) to an object at the specified address.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !gcroot 000001941c364e28
HandleTable:
    00000190176115f8 (pinned handle)
    -&amp;gt; 0000019419341038 System.Object[]
    -&amp;gt; 0000019019412bf0 System.Collections.Generic.List`1[[System.Int32, System.Private.CoreLib]]
    -&amp;gt; 000001941c364e28 System.Int32[]

Found 1 unique roots (run '!GCRoot -all' to see all roots).&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This reads bottom to top, our &lt;code class=&quot;highlighter-rouge&quot;&gt;Int32[]&lt;/code&gt; is referenced by a &lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;Int32&amp;gt;&lt;/code&gt;. This makes sense as &lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; is &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=netframework-4.7.1#Remarks&quot;&gt;using an array&lt;/a&gt; internally:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; is the generic equivalent of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;. It implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;IList&amp;lt;T&amp;gt;&lt;/code&gt; generic &lt;code class=&quot;highlighter-rouge&quot;&gt;interface&lt;/code&gt; by &lt;strong&gt;using an array&lt;/strong&gt; whose size is dynamically increased as required.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In turn this &lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;Int32&amp;gt;&lt;/code&gt; is referenced by a &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Object[]&lt;/code&gt;. I was hoping to get the name of one of my &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; but I’ll have to dig deeper, let’s take a closer look at this array of object.&lt;/p&gt;

&lt;p&gt;For this we’ll rely on the &lt;code class=&quot;highlighter-rouge&quot;&gt;DumpObj&lt;/code&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands&quot;&gt;command&lt;/a&gt; from the &lt;code class=&quot;highlighter-rouge&quot;&gt;SOS&lt;/code&gt; extension.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !do 0000019419341038
Name:        System.Object[]
MethodTable: 00007ffb0f632ca8
EEClass:     00007ffb0edf2a00
Size:        8184(0x1ff8) bytes
Array:       Rank 1, Number of elements 1020, Type CLASS (Print Array)
Fields:
None&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;According to Sasha Goldshtein &lt;a href=&quot;https://blogs.microsoft.co.il/sasha/2012/02/07/pinpointing-a-static-gc-root-with-sos/&quot;&gt;post&lt;/a&gt; this is how the &lt;code class=&quot;highlighter-rouge&quot;&gt;CLR&lt;/code&gt; stores &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; fields:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;array&lt;/code&gt; is ubiquitous, it would seem that all &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; root references stem from it. Indeed (and this is a &lt;code class=&quot;highlighter-rouge&quot;&gt;CLR&lt;/code&gt; implementation detail), &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; fields are stored in this array and their retention as far as the &lt;code class=&quot;highlighter-rouge&quot;&gt;GC&lt;/code&gt; is concerned is through it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s now determine where in the array is our &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; referenced. We’ll use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Search Memory&lt;/code&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/s--search-memory-&quot;&gt;command&lt;/a&gt; which is the first &lt;code class=&quot;highlighter-rouge&quot;&gt;WinDbg&lt;/code&gt; command we used today!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-q&lt;/code&gt;: we’re looking for a &lt;code class=&quot;highlighter-rouge&quot;&gt;QWORD&lt;/code&gt; (the address is &lt;code class=&quot;highlighter-rouge&quot;&gt;64 bit&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt;: this is a &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/address-and-address-range-syntax#span-idaddressrangesspanspan-idaddressrangesspanaddress-ranges&quot;&gt;Range&lt;/a&gt;, we’re starting to search at the address &lt;code class=&quot;highlighter-rouge&quot;&gt;0000019419341038&lt;/code&gt; (the beginning of the array) and we search the whole array (&lt;code class=&quot;highlighter-rouge&quot;&gt;1ff8&lt;/code&gt; is the size of the array as indicated in the previous command output)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0000019019412bf0&lt;/code&gt; is the address of the &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; s -q 0000019419341038 L1ff8 0000019019412bf0
00000194`19342830  00000190`19412bf0 00000191`19397798&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sadly the lead stops there. We know this is a &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; field but we don’t know which &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; it belongs to.&lt;/p&gt;

&lt;h2 id=&quot;fishing-with-dynamite&quot;&gt;Fishing with dynamite&lt;/h2&gt;

&lt;p&gt;There is one last thing we can try, we could look for references to &lt;code class=&quot;highlighter-rouge&quot;&gt;0000019419342830&lt;/code&gt; in memory. This section is completely stolen from Sasha’s excellent &lt;a href=&quot;https://blogs.microsoft.co.il/sasha/2012/02/07/pinpointing-a-static-gc-root-with-sos/&quot;&gt;post&lt;/a&gt; as I never did something like this before.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;SOS&lt;/code&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands&quot;&gt;command&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;DumpDomain&lt;/code&gt; comes in handy:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Enumerates each &lt;code class=&quot;highlighter-rouge&quot;&gt;Assembly&lt;/code&gt; object that is loaded within the specified &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDomain&lt;/code&gt; object address.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !dumpdomain
--------------------------------------
System Domain:      00007ffb25d15800
LowFrequencyHeap:   00007ffb25d15d80
HighFrequencyHeap:  00007ffb25d15e10
StubHeap:           00007ffb25d15ea0
Stage:              OPEN
Name:               None
--------------------------------------
Shared Domain:      00007ffb25d15220
LowFrequencyHeap:   00007ffb25d15d80
HighFrequencyHeap:  00007ffb25d15e10
StubHeap:           00007ffb25d15ea0
Stage:              OPEN
Name:               None
Assembly:           0000019017796330 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.5\System.Private.CoreLib.dll]
ClassLoader:        00000190176b33f0
  Module Name
00007ffb0ed11000            C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.5\System.Private.CoreLib.dll

--------------------------------------
Domain 1:           00000190178511a0
LowFrequencyHeap:   00000190178519a0
HighFrequencyHeap:  0000019017851a30
StubHeap:           0000019017851ac0
Stage:              OPEN
SecurityDescriptor: 0000019017859320
Name:               clrhost
Assembly:           0000019017796330 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.5\System.Private.CoreLib.dll]
ClassLoader:        00000190176b33f0
SecurityDescriptor: 000001901774c9a0
  Module Name
00007ffb0ed11000            C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.5\System.Private.CoreLib.dll

Assembly:           0000019017796410 [E:\code\me\blog-samples\windbg-static\src\SampleApi\bin\Release\netcoreapp2.0\SampleApi.dll]
ClassLoader:        0000019017834490
SecurityDescriptor: 00000190177851c0
  Module Name
00007ffac5d04d38            E:\code\me\blog-samples\windbg-static\src\SampleApi\bin\Release\netcoreapp2.0\SampleApi.dll

Assembly:           0000019017786bb0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.5\System.Runtime.dll]
ClassLoader:        0000019017834ee0
SecurityDescriptor: 0000019017784680
  Module Name
00007ffac5d05588            C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.5\System.Runtime.dll

// Abbreviated

Assembly:           0000019019319d90 [C:\Program Files\dotnet\store\x64\netcoreapp2.0\microsoft.aspnetcore.webutilities\2.0.1\lib\netstandard2.0\Microsoft.AspNetCore.WebUtilities.dll]
ClassLoader:        0000019463d80530
SecurityDescriptor: 0000019463dae9c0
  Module Name
00007ffac6549270            C:\Program Files\dotnet\store\x64\netcoreapp2.0\microsoft.aspnetcore.webutilities\2.0.1\lib\netstandard2.0\Microsoft.AspNetCore.WebUtilities.dll&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SampleApi.dll&lt;/code&gt; is located at &lt;code class=&quot;highlighter-rouge&quot;&gt;00007ffac5d04d38&lt;/code&gt; so it does make sense to start searching at &lt;code class=&quot;highlighter-rouge&quot;&gt;00007ffa00000000&lt;/code&gt;. Remember the &lt;code class=&quot;highlighter-rouge&quot;&gt;Search Memory&lt;/code&gt; command we used above? We’ll put it to good use again:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt;: this is a &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/address-and-address-range-syntax#span-idaddressrangesspanspan-idaddressrangesspanaddress-ranges&quot;&gt;Range&lt;/a&gt;, we’re starting to search at the address &lt;code class=&quot;highlighter-rouge&quot;&gt;00007ffa00000000&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;As we’re searching for a &lt;code class=&quot;highlighter-rouge&quot;&gt;QWORD&lt;/code&gt; the unit is &lt;code class=&quot;highlighter-rouge&quot;&gt;8 bytes&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;64 bit&lt;/code&gt;), so we’re looking ahead for &lt;code class=&quot;highlighter-rouge&quot;&gt;40000000 * 8 = 320 MB&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; s -q 00007ffa00000000 L?00000000`40000000 0000019419342830
00007ffa`c5d05370  00000194`19342830 00000000`00000001&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Bingo! Wow I didn’t think it would be that easy. We have a reference! Let’s use the &lt;code class=&quot;highlighter-rouge&quot;&gt;WinDbg&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Unassemble&lt;/code&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/u--unassemble-&quot;&gt;command&lt;/a&gt; to look at the instructions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !u 00007ffa`c5d05370
Unmanaged code
00007ffa`c5d05370 3028            xor     byte ptr [rax],ch
00007ffa`c5d05372 3419            xor     al,19h
00007ffa`c5d05374 94              xchg    eax,esp
00007ffa`c5d05375 0100            add     dword ptr [rax],eax
00007ffa`c5d05377 0001            add     byte ptr [rcx],al
00007ffa`c5d05379 0000            add     byte ptr [rax],al
00007ffa`c5d0537b 0000            add     byte ptr [rax],al
00007ffa`c5d0537d 0000            add     byte ptr [rax],al
00007ffa`c5d0537f 0000            add     byte ptr [rax],al
00007ffa`c5d05381 0000            add     byte ptr [rax],al&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Looks like I might have celebrated prematurely. Let’s extend the range:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; s -q 00007ffa00000000 L?00000000`80000000 0000019419342830
00007ffa`c5d05370  00000194`19342830 00000000`00000001&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Same result!&lt;/p&gt;

&lt;p&gt;Again, this is where Sasha comes to the rescue:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The problem is that we might miss unaligned references to that address, which may occur if it is hardcoded into some instruction (e.g. a &lt;code class=&quot;highlighter-rouge&quot;&gt;MOV&lt;/code&gt;). So instead we should be looking for the individual byte sequence, and remember that we are on a little-endian architecture&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The command is the same than the previous one except for two differences:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This time we’re searching for bytes &lt;code class=&quot;highlighter-rouge&quot;&gt;-b&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;As we’re on a little-endian architecture, &lt;code class=&quot;highlighter-rouge&quot;&gt;0000019419342830&lt;/code&gt; turn into &lt;code class=&quot;highlighter-rouge&quot;&gt;30 28 34 19 94 01 00 00&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; s -b 00007ffa00000000 L?00000000`320000000 30 28 34 19 94 01 00 00
00007ffa`c5d05370  30 28 34 19 94 01 00 00-01 00 00 00 00 00 00 00  0(4.............
00007ffa`c63902ac  30 28 34 19 94 01 00 00-48 8b 31 b9 01 00 00 00  0(4.....H.1.....
00007ffa`c6501b6e  30 28 34 19 94 01 00 00-48 8b 55 f8 e8 81 0b 44  0(4.....H.U....D&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ve already unassembled the first address, let’s look at the two other ones:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !u 00007ffa`c63902ac
Normal JIT generated code
DynamicClass.lambda_method(System.Runtime.CompilerServices.Closure, System.Object, System.Object[])
Begin 00007ffac6390270, size 71
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390270 56              push    rsi
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390271 4883ec20        sub     rsp,20h
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390275 488bf2          mov     rsi,rdx
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390278 4885f6          test    rsi,rsi
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c639027b 7417            je      00007ffa`c6390294
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c639027d 48b910d53cc6fa7f0000 mov rcx,7FFAC63CD510h (MT: SampleApi.Controllers.FeedController)
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390287 48390e          cmp     qword ptr [rsi],rcx
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c639028a 7408            je      00007ffa`c6390294
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c639028c e88f225b5f      call    coreclr!JIT_ChkCastClassSpecial (00007ffb`25942520)
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390291 488bf0          mov     rsi,rax
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390294 8b0e            mov     ecx,dword ptr [rsi]
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c6390296 48b95053d0c5fa7f0000 mov rcx,7FFAC5D05350h
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902a0 ba03000000      mov     edx,3
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902a5 e8a6515b5f      call    coreclr!JIT_GetSharedNonGCStaticBase_SingleAppDomain (00007ffb`25945450)
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902aa 48b93028341994010000 mov rcx,19419342830h
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902b4 488b31          mov     rsi,qword ptr [rcx]
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902b7 b901000000      mov     ecx,1
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902bc ba40420f00      mov     edx,0F4240h
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902c1 e8a213adff      call    00007ffa`c5e61668 (System.Linq.Enumerable.Range(Int32, Int32), mdToken: 0000000006000090)
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902c6 4c8bc0          mov     r8,rax
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902c9 8b5618          mov     edx,dword ptr [rsi+18h]
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902cc 488bce          mov     rcx,rsi
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902cf 48b8c0d6330ffb7f0000 mov rax,offset System_Private_CoreLib+0x62d6c0 (00007ffb`0f33d6c0)
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902d9 4883c420        add     rsp,20h
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902dd 5e              pop     rsi
LoadSymbols moduleData.Request FAILED 0x80004005
00007ffa`c63902de 48ffe0          jmp     rax&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s much nicer, there is a reference to one of my class: &lt;code class=&quot;highlighter-rouge&quot;&gt;SampleApi.Controllers.FeedController&lt;/code&gt;. What about the other address:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !u 00007ffa`c6501b6e
Normal JIT generated code
SampleApi.Controllers.FeedController..cctor()
Begin 00007ffac6501b40, size 46

E:\code\me\blog-samples\windbg-static\src\SampleApi\Controllers\FeedController.cs @ 10:
00007ffa`c6501b40 55              push    rbp
00007ffa`c6501b41 4883ec30        sub     rsp,30h
00007ffa`c6501b45 488d6c2430      lea     rbp,[rsp+30h]
00007ffa`c6501b4a 33c0            xor     eax,eax
00007ffa`c6501b4c 488945f8        mov     qword ptr [rbp-8],rax
00007ffa`c6501b50 48b9885d670ffb7f0000 mov rcx,offset System_Private_CoreLib+0x965d88 (00007ffb`0f675d88) (MT: System.Collections.Generic.List`1[[System.Int32, System.Private.CoreLib]])
00007ffa`c6501b5a e89127445f      call    coreclr!JIT_TrialAllocSFastMP_InlineGetThread (00007ffb`259442f0)
00007ffa`c6501b5f 488945f8        mov     qword ptr [rbp-8],rax
00007ffa`c6501b63 488b4df8        mov     rcx,qword ptr [rbp-8]
00007ffa`c6501b67 e874cde348      call    System_Private_CoreLib+0x62e8e0 (00007ffb`0f33e8e0) (System.Collections.Generic.List`1[[System.Int32, System.Private.CoreLib]]..ctor(), mdToken: 00000000060038ae)
00007ffa`c6501b6c 48b93028341994010000 mov rcx,19419342830h
00007ffa`c6501b76 488b55f8        mov     rdx,qword ptr [rbp-8]
00007ffa`c6501b7a e8810b445f      call    coreclr!JIT_CheckedWriteBarrier (00007ffb`25942700)
00007ffa`c6501b7f 90              nop
00007ffa`c6501b80 488d6500        lea     rsp,[rbp]
00007ffa`c6501b84 5d              pop     rbp
00007ffa`c6501b85 c3              ret&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This goes a step farther as it references the static constructor of &lt;code class=&quot;highlighter-rouge&quot;&gt;FeedController&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;SampleApi.Controllers.FeedController..cctor()&lt;/code&gt;). We now have enough information to inspect the code but first let’s take a deeper look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;FeedController&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s use the &lt;code class=&quot;highlighter-rouge&quot;&gt;SOS&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Name2EE&lt;/code&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands&quot;&gt;command&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Displays the &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodTable&lt;/code&gt; structure and &lt;code class=&quot;highlighter-rouge&quot;&gt;EEClass&lt;/code&gt; structure for the specified type or method in the specified module. […] This command supports the Windows debugger syntax of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;module&amp;gt;!&amp;lt;type&amp;gt;&lt;/code&gt;. The type must be fully qualified.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !name2ee SampleApi!SampleApi.Controllers.FeedController
Module:      00007ffac5d04d38
Assembly:    SampleApi.dll
Token:       0000000002000004
MethodTable: 00007ffac63cd510
EEClass:     00007ffac63bf968
Name:        SampleApi.Controllers.FeedController&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll use the &lt;code class=&quot;highlighter-rouge&quot;&gt;SOS&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;DumpClass&lt;/code&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension#commands&quot;&gt;command&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Displays information about the &lt;code class=&quot;highlighter-rouge&quot;&gt;EEClass&lt;/code&gt; structure associated with a type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !DumpClass /d 00007ffac63bf968
Class Name:      SampleApi.Controllers.FeedController
mdToken:         0000000002000004
File:            E:\code\me\blog-samples\windbg-static\src\SampleApi\bin\Release\netcoreapp2.0\SampleApi.dll
Parent Class:    00007ffac63bf868
Module:          00007ffac5d04d38
Method Table:    00007ffac63cd510
Vtable Slots:    90
Total Method Slots:  92
Class Attributes:    100001
Transparency:        Critical
NumInstanceFields:   8
NumStaticFields:     1
              MT    Field   Offset                 Type VT     Attr            Value Name
00007ffac62ec808  400004a        8 ...ControllerContext  0 instance           _controllerContext
00007ffac6061d88  400004b       10 ...lMetadataProvider  0 instance           _metadataProvider
00007ffac6062f20  400004c       18 ...odelBinderFactory  0 instance           _modelBinderFactory
00007ffac6063178  400004d       20 ...ectModelValidator  0 instance           _objectValidator
00007ffac6487758  400004e       28 ...re.Mvc.IUrlHelper  0 instance           _url
00007ffac6487630  4000018       30 ...empDataDictionary  0 instance           _tempData
0000000000000000  4000019       38 ...l.DynamicViewData  0 instance           _viewBag
00007ffac6487480  400001a       40 ...iewDataDictionary  0 instance           _viewData
00007ffb0f675d88  4000002        8 ...Private.CoreLib]]  0   static 0000019019412bf0 MemoryHog&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So, it turns out the &lt;code class=&quot;highlighter-rouge&quot;&gt;FeedController&lt;/code&gt; has a &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; field named &lt;code class=&quot;highlighter-rouge&quot;&gt;MemoryHog&lt;/code&gt;. Probably not my &lt;a href=&quot;https://github.com/gabrielweyer/blog-samples/blob/4d434b594d7cab48f50bc12140fd9b7fd5f89977/windbg-static/src/SampleApi/Controllers/FeedController.cs#L10&quot;&gt;finest&lt;/a&gt; piece of &lt;a href=&quot;https://github.com/gabrielweyer/blog-samples/blob/4d434b594d7cab48f50bc12140fd9b7fd5f89977/windbg-static/src/SampleApi/Controllers/FeedController.cs#L15&quot;&gt;coding&lt;/a&gt; to be honest.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I learned how to trace back a &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; field to a &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;. I’m sure this will come in handy later.&lt;/p&gt;

&lt;p&gt;I might have made some mistakes around &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/address-and-address-range-syntax#span-idaddressrangesspanspan-idaddressrangesspanaddress-ranges&quot;&gt;Ranges&lt;/a&gt; as this is an area I’m still unfamiliar with but it shouldn’t prevent you from achieving the same result.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

</description>
        <pubDate>Fri, 09 Mar 2018 21:51:53 +0000</pubDate>
        <link>https://gabrielweyer.github.io//2018/03/09/windbg-1-static-root/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2018/03/09/windbg-1-static-root/</guid>
      </item>
    
      <item>
        <title>Beanstalk Seeder</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Elastic Beanstalk&lt;/code&gt; is a great platform, it offers both a &lt;code class=&quot;highlighter-rouge&quot;&gt;Web&lt;/code&gt; tier and a &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt; tier. I recently wrote about &lt;a href=&quot;/2018/01/28/simple-routing-elastic-beanstalk-worker/&quot;&gt;Simple Routing&lt;/a&gt; one of my library that allows you to route a &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; message to a specific endpoint on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While &lt;code class=&quot;highlighter-rouge&quot;&gt;Beanstalk&lt;/code&gt; works great once it’s deployed to &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS&lt;/code&gt; there is no easy way to run it locally. As soon as you want to execute an end-to-end flow involving both the &lt;code class=&quot;highlighter-rouge&quot;&gt;Web&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt; you need to manually &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; requests to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt; using &lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt; which is cumbersome and error-prone.&lt;/p&gt;

&lt;p&gt;As it core all the &lt;a href=&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features-managing-env-tiers.html&quot;&gt;SQS daemon&lt;/a&gt; does is dequeue messages from a &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; queue and &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; it to a specified endpoint. With this goal in mind I wrote &lt;a href=&quot;https://github.com/gabrielweyer/beanstalk-seeder&quot;&gt;Beanstalk Seeder&lt;/a&gt;.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;I had the following objectives:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Users should be able to get up and running quickly&lt;/li&gt;
  &lt;li&gt;Meaningful logging&lt;/li&gt;
  &lt;li&gt;Transform the &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; &lt;a href=&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-attributes.html&quot;&gt;message attributes&lt;/a&gt; into HTTP headers (in order to support &lt;a href=&quot;https://github.com/gabrielweyer/simple-routing&quot;&gt;Simple Routing&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;get-up-and-running-quickly&quot;&gt;Get up and running quickly&lt;/h2&gt;

&lt;p&gt;You can get &lt;code class=&quot;highlighter-rouge&quot;&gt;Beanstalk Seeder&lt;/code&gt; from &lt;a href=&quot;https://github.com/gabrielweyer/beanstalk-seeder/releases&quot;&gt;GitHub releases&lt;/a&gt;. Download the archive and extract it somewhere.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Beanstalk Seeder&lt;/code&gt;’s &lt;a href=&quot;https://github.com/gabrielweyer/beanstalk-seeder#configuration&quot;&gt;configuration&lt;/a&gt; is detailed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;README&lt;/code&gt;. All you need is a &lt;code class=&quot;highlighter-rouge&quot;&gt;iAM&lt;/code&gt; user, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;URI&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; queue &lt;code class=&quot;highlighter-rouge&quot;&gt;URI.&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;meaningful-logging&quot;&gt;Meaningful logging&lt;/h2&gt;

&lt;p&gt;When running a third-party tool, it’s critical to get meaningful logging as the binary is a black-box for the end user. I use &lt;a href=&quot;https://nblumhardt.com/2016/06/structured-logging-concepts-in-net-series-1/#what-is-structured-logging&quot;&gt;structured logging&lt;/a&gt; in order to make querying the log events a breeze. My logging framework of choice is &lt;a href=&quot;https://blog.getseq.net/serilog-tutorial/&quot;&gt;Serilog&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loggerConfiguration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LoggerConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Destructure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ByTransforming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MessageAttributeValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Destructure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Destructure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ByTransforming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Destructure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MinimumLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serilogLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enrich&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WithDemystifiedStackTraces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enrich&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromLogContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serilogLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The previous snippet highlights only a few of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Serilog&lt;/code&gt; features.&lt;/p&gt;

&lt;h3 id=&quot;the-structure-capturing-operator&quot;&gt;The structure-capturing operator&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MessageAttributeValue&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Message&lt;/code&gt; are both defined in the &lt;code class=&quot;highlighter-rouge&quot;&gt;awssdk.sqs&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; package. I’m interested in logging only some of their properties, &lt;code class=&quot;highlighter-rouge&quot;&gt;Serilog&lt;/code&gt; has the ability to capture object via the &lt;a href=&quot;https://nblumhardt.com/2016/08/serialized-data-structured-logging-concepts-in-net-6/#capturing-objects&quot;&gt;structure-capturing operator&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;enrichment&quot;&gt;Enrichment&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Enrichment is the act of adding additional properties to events, other than the ones originating from the message template.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Serilog&lt;/code&gt; supports &lt;a href=&quot;https://blog.getseq.net/serilog-tutorial/#enrichingwithambientcontext&quot;&gt;ambient context&lt;/a&gt;. I’m also using the excellent &lt;a href=&quot;https://github.com/benaadams/Ben.Demystifier&quot;&gt;Ben.Demystifier&lt;/a&gt; for getting nicer stack traces.&lt;/p&gt;

&lt;h3 id=&quot;sinks&quot;&gt;Sinks&lt;/h3&gt;

&lt;p&gt;By default, &lt;code class=&quot;highlighter-rouge&quot;&gt;Serilog&lt;/code&gt; does not log anywhere. In order to record events you’ll need to configure one or more &lt;code class=&quot;highlighter-rouge&quot;&gt;Sink&lt;/code&gt;s. In this case I’m writing to the console but they are &lt;a href=&quot;https://github.com/serilog/serilog/wiki/Provided-Sinks&quot;&gt;many other&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Sink&lt;/code&gt;s available.&lt;/p&gt;

&lt;h3 id=&quot;result&quot;&gt;Result&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/beanstalk-seeder/events.png&quot; alt=&quot;HTTP Path&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I hope the recorded events are descriptive enough so that an end user know what’s happening:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First I display the settings used, this is important as they could come from the &lt;code class=&quot;highlighter-rouge&quot;&gt;appsettings.json&lt;/code&gt;, environment variables or even the &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets?tabs=visual-studio#secret-manager&quot;&gt;user secrets&lt;/a&gt; if the environment is &lt;code class=&quot;highlighter-rouge&quot;&gt;Development&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Then using the &lt;code class=&quot;highlighter-rouge&quot;&gt;structure-capturing operator&lt;/code&gt; I log the relevant &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; message properties.&lt;/li&gt;
  &lt;li&gt;Instead of logging the complete HTTP request I log the content of the body and the relevant headers.&lt;/li&gt;
  &lt;li&gt;When deleting the message, I log the &lt;code class=&quot;highlighter-rouge&quot;&gt;ReceiptHandle&lt;/code&gt;, this is the value used to delete a message and the user can correlate it to what was displayed above.&lt;/li&gt;
  &lt;li&gt;Finally, rather than not displaying anything when there are no messages in the queue I inform the user that’s the case and how long I’ll wait before retrying.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;interestings-bits&quot;&gt;Interestings bits&lt;/h2&gt;

&lt;p&gt;I’m using a &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource?view=netcore-2.0&quot;&gt;CancellationTokenSource&lt;/a&gt; so that the user can stop the message pump at any time (relying on &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.console.cancelkeypress?view=netcore-2.0&quot;&gt;Console.CancelKeyPress&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/gabrielweyer/beanstalk-seeder/blob/ca47d6f84fe748915a22de63b23a34ef735a88ae/src/BeanstalkSeeder/Services/MessagePump.cs&quot;&gt;MessagePump&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; is the only &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; with some logic. I wrote some &lt;a href=&quot;https://github.com/gabrielweyer/beanstalk-seeder/blob/ca47d6f84fe748915a22de63b23a34ef735a88ae/tests/BeanstalkSeederTests/MessagePumpTests.cs&quot;&gt;tests&lt;/a&gt; around the cancellation token, the transformation of &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; message attributes into HTTP headers and the back-off when no messages are available in the queue.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope you’ll find &lt;a href=&quot;https://github.com/gabrielweyer/beanstalk-seeder&quot;&gt;Beanstalk Seeder&lt;/a&gt; as useful as I did, combined with &lt;a href=&quot;https://github.com/gabrielweyer/simple-routing&quot;&gt;Simple Routing&lt;/a&gt; it simplified and streamlined my &lt;code class=&quot;highlighter-rouge&quot;&gt;Elastic Beanstalk&lt;/code&gt; development.&lt;/p&gt;

&lt;p&gt;I also wanted to point out that &lt;code class=&quot;highlighter-rouge&quot;&gt;Beanstalk Seeder&lt;/code&gt; is platform agnostic. It doesn’t matter if you’re developing using &lt;code class=&quot;highlighter-rouge&quot;&gt;Node.js&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Go&lt;/code&gt; or any other of the &lt;a href=&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html&quot;&gt;Elastic Beanstalk supported platforms&lt;/a&gt;, all you need to do is install the latest &lt;a href=&quot;https://www.microsoft.com/net/download/windows&quot;&gt;.NET Core runtime&lt;/a&gt; (available on &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;macOS&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Linux&lt;/code&gt;).&lt;/p&gt;

</description>
        <pubDate>Fri, 23 Feb 2018 23:40:46 +0000</pubDate>
        <link>https://gabrielweyer.github.io//2018/02/23/beanstalk-seeder/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2018/02/23/beanstalk-seeder/</guid>
      </item>
    
      <item>
        <title>Singleton HTTP Client</title>
        <description>&lt;p&gt;Even though the &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; implements &lt;code class=&quot;highlighter-rouge&quot;&gt;IDisposable&lt;/code&gt; it is supposed to be used as a singleton as stated in the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=netcore-2.0#Remarks&quot;&gt;API reference&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; is intended to be instantiated once and re-used throughout the life of an application. Instantiating an &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; class for every request will exhaust the number of sockets available under heavy loads. This will result in &lt;code class=&quot;highlighter-rouge&quot;&gt;SocketException&lt;/code&gt; errors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The accepted best practice is to have one &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; per HTTP endpoint you’re interacting with. This will not only yield better performance it also allows to encapsulate endpoint specific logic (such as setting headers).&lt;/p&gt;

&lt;p&gt;Now the question is: how do you configure your &lt;code class=&quot;highlighter-rouge&quot;&gt;IoC&lt;/code&gt; container to resolve the expected &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; instance? This used to require a cumbersome registration but &lt;code class=&quot;highlighter-rouge&quot;&gt;.NET Core 2.1&lt;/code&gt; will ship with the &lt;a href=&quot;https://github.com/aspnet/HttpClientFactory&quot;&gt;HttpClientFactory&lt;/a&gt; making our life much easier.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;httpclientfactory&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.stevejgordon.co.uk/&quot;&gt;Steve Gordon&lt;/a&gt; has an excellent &lt;a href=&quot;https://www.stevejgordon.co.uk/httpclientfactory-named-typed-clients-aspnetcore&quot;&gt;post&lt;/a&gt; explaining what is &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt; and how it works.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt; aims to provide the following improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alleviate sockets exhaustion by reusing connection when possible&lt;/li&gt;
  &lt;li&gt;Alleviate stale &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS&lt;/code&gt; records (by default &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; caches &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS&lt;/code&gt; records for its lifetime)&lt;/li&gt;
  &lt;li&gt;Easily resolve an &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; instance linked to a specific HTTP endpoint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What if you can’t use &lt;code class=&quot;highlighter-rouge&quot;&gt;.NET Core&lt;/code&gt; or can’t update? Fear not, we can achieve tomorrow’s dream with today’s tools (most of it anyway).&lt;/p&gt;

&lt;h2 id=&quot;associate-an-httpclient-instance-with-the-service-using-it&quot;&gt;Associate an &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; instance with the service using it&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; instances communicating with a specific HTTP endpoint tend to have dedicated settings such as an &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization&lt;/code&gt; header, default request headers (&lt;code class=&quot;highlighter-rouge&quot;&gt;Accept&lt;/code&gt; for example), maybe a &lt;code class=&quot;highlighter-rouge&quot;&gt;HMAC&lt;/code&gt;… I tend to encapsulate those settings in a &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; to decouple the settings’s source from the consummer.&lt;/p&gt;

&lt;p&gt;Let’s imagine that we’re integrating with a fictitious company called &lt;em&gt;Contoso&lt;/em&gt;. The integration takes place via an HTTP API and our contact at Contoso gave us a bearer token that needs to be set on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;The first step is to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;POCO&lt;/code&gt; modelizing the settings:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContosoSettings&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BearerToken&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; makes writing tests harder. Developers tend to derive from &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpMessageHandler&lt;/code&gt; and provide an implementation allowing them to assert the requests issued by the &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt;. I prefer to introduce an interface called &lt;code class=&quot;highlighter-rouge&quot;&gt;IHttpClient&lt;/code&gt; exposing a single method to handle &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; traffic:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IHttpClient&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpResponseMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SendAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpRequestMessage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We then implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;ContosoHttpClient&lt;/code&gt; that will be dedicated to communicating with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Contoso&lt;/code&gt; API:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContosoHttpClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IHttpClient&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ContosoHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContosoSettings&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DefaultRequestHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Authorization&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AuthenticationHeaderValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bearer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BearerToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And finally we registers the &lt;code class=&quot;highlighter-rouge&quot;&gt;Type&lt;/code&gt;s in the &lt;code class=&quot;highlighter-rouge&quot;&gt;IoC&lt;/code&gt; container:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contosoHttpClientAutofacKeyName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ContosoHttpClient&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContosoHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contosoHttpClientAutofacKeyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SingleInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContosoClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WithParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ResolvedParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParameterType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResolveNamed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContosoHttpClientAutofacKeyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AsImplementedInterfaces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;InstancePerRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Abbreviated: resolve and register ContosoSettings (from Web.config, appsettings.json, CSV, volumen...)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This snippet is using &lt;code class=&quot;highlighter-rouge&quot;&gt;Autofac&lt;/code&gt; &lt;a href=&quot;http://autofaccn.readthedocs.io/en/latest/advanced/keyed-services.html#named-services&quot;&gt;named service&lt;/a&gt;. Using a &lt;code class=&quot;highlighter-rouge&quot;&gt;named service&lt;/code&gt; this way has several benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If someone registered another &lt;code class=&quot;highlighter-rouge&quot;&gt;IHttpClient&lt;/code&gt; that is supposed to be used everywhere else we will not override the registration for all the other services while still retrieving an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;ContosoHttpClient&lt;/code&gt; when resolving &lt;code class=&quot;highlighter-rouge&quot;&gt;IContosoClient&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;named service&lt;/code&gt; is an implementation details that only the &lt;code class=&quot;highlighter-rouge&quot;&gt;IoC&lt;/code&gt; container knows about.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;solve-stale-dns-records&quot;&gt;Solve stale DNS records&lt;/h2&gt;

&lt;p&gt;Let’s say you’re interacting with an API hosted at &lt;code class=&quot;highlighter-rouge&quot;&gt;https://api.contoso.com&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; will first have to resolve the domain name to an &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt; thanks to a &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS&lt;/code&gt; server. But what happens if the &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS&lt;/code&gt; record is updated and the domain name now resolves to another &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt;? If you are using a transient &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; you’ll be fine but if you’re using a singleton instance (as you should) &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt;s will start to shoot up in your monitoring system. Should we stop calling APIs, or maybe rewrite everything in &lt;code class=&quot;highlighter-rouge&quot;&gt;Go&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.net.servicepoint.connectionleasetimeout?view=netframework-4.7.1#System_Net_ServicePoint_ConnectionLeaseTimeout&quot;&gt;ConnectionLeaseTimeout&lt;/a&gt; property can solve this situation nicely for us:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;Int32&lt;/code&gt; that specifies the number of &lt;strong&gt;milliseconds&lt;/strong&gt; that an active &lt;code class=&quot;highlighter-rouge&quot;&gt;ServicePoint&lt;/code&gt; connection remains open. &lt;strong&gt;The default is &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;, which allows an active &lt;code class=&quot;highlighter-rouge&quot;&gt;ServicePoint&lt;/code&gt; connection to stay connected indefinitely&lt;/strong&gt;. Set this property to &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to force &lt;code class=&quot;highlighter-rouge&quot;&gt;ServicePoint&lt;/code&gt; connections to close after servicing a request.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is how you set it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiUri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://api.contoso.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServicePointManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindServicePoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apiUri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConnectionLeaseTimeout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the previous snippet I’m keeping the connection opened for a minute which seems like a good trade-off.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I haven’t looked at the implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt; yet but I suspect the end result will be fairly similar to what I demonstrated above. If you still have doubts about using a singleton &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; I recommend you to perf test it. At a previous customer I developped an API that was calling other HTTP endpoints, I increased the throughput by a factor of &lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt; by changing a single thing: I made the &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; a singleton rather than a per-request scope.&lt;/p&gt;

</description>
        <pubDate>Thu, 08 Feb 2018 20:34:06 +0000</pubDate>
        <link>https://gabrielweyer.github.io//2018/02/08/singleton-http-client/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2018/02/08/singleton-http-client/</guid>
      </item>
    
      <item>
        <title>Simple Routing for Elastic Beanstalk Worker tier</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Elastic Beanstalk&lt;/code&gt; offers both a &lt;code class=&quot;highlighter-rouge&quot;&gt;Web&lt;/code&gt; tier and a &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt; tier. This allows developers to build reasonably complex applications without having to maintain moving pieces. Offloading heavy-duty workloads to the worker in order to keep the web tier responsive is as easy as putting a message on a queue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/http-path.png&quot; alt=&quot;HTTP Path&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One annoyance that I have with &lt;code class=&quot;highlighter-rouge&quot;&gt;Beanstalk&lt;/code&gt; is that there is no way to direct a message to a specific endpoint, hence leaving a single endpoint the responsibility of distributing the messages to all their handlers and potentially leading to brittle code. But it doesn’t have to be that way.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; messages have &lt;a href=&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-attributes.html&quot;&gt;attributes&lt;/a&gt;, attributes can be set by the sender and are read by the receiver. The idea is to use a known attribute to attach routing metadata to the message.&lt;/p&gt;

&lt;h3 id=&quot;constants&quot;&gt;Constants&lt;/h3&gt;

&lt;p&gt;Constants are the base of any decently built &lt;code class=&quot;highlighter-rouge&quot;&gt;C#&lt;/code&gt; application. I did not want to depart from to this rule and hence added some constants:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RoutingConstants&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HeaderName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HeaderType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;String&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These constansts will be used to add routing metadata to the &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; message.&lt;/p&gt;

&lt;p&gt;We can then define our routes via some more constants:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WorkerConstants&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoSomeWorkTaskName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;do-some-work&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoSomeOtherWorkTaskName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;do-some-other-work&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: those two &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; will have to be referenced by the sender and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;sending-the-message&quot;&gt;Sending the message&lt;/h3&gt;

&lt;p&gt;The sender will most likely be the &lt;code class=&quot;highlighter-rouge&quot;&gt;Web&lt;/code&gt; tier but it could be any system being able to send a message to a &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; queue.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sendMessageRequest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SendMessageRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Abbreviated: set properties on sendMessageRequest, such as the MessageBody and the QueueUrl&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// We're using RoutingConstants.HeaderName as the MessageAttribute key&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// and WorkerConstants.DoSomeWorkTaskName as the MessageAttribute value&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sendMessageRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MessageAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RoutingConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HeaderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageAttributeValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WorkerConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoSomeWorkTaskName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RoutingConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HeaderType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Abbreviated: send the message&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;middleware&quot;&gt;Middleware&lt;/h3&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;, the routing is implemented via a &lt;code class=&quot;highlighter-rouge&quot;&gt;Middleware&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HeaderRoutingMiddleware&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Elastic Beanstalk prefixes the SQS messages properties' name with &quot;X-Aws-Sqsd-Attr-&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskHeaderName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;X-Aws-Sqsd-Attr-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RoutingConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HeaderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// We get the value of the routing header&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;StringValues&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TaskHeaderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// And set it as the path&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Single&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: don’t forget to add &lt;code class=&quot;highlighter-rouge&quot;&gt;HeaderRoutingMiddleware&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;IApplicationBuilder&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;controller&quot;&gt;Controller&lt;/h3&gt;

&lt;p&gt;The last piece of the puzzle is defining the expected route on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// This is important, we do not want a prefix in front of the action's route&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[Route(&quot;&quot;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Controller&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// The route has to match the value given to the MessageAttribute&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HttpPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkerConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoSomeWorkTaskName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SomeMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Abbreviated for clarity&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;simple-routing&quot;&gt;Simple routing&lt;/h2&gt;

&lt;p&gt;I used &lt;code class=&quot;highlighter-rouge&quot;&gt;Simple Routing&lt;/code&gt; in production over the last few months and am now confident that it does what it’s supposed to do. This is why I decided to release it under a &lt;code class=&quot;highlighter-rouge&quot;&gt;MIT&lt;/code&gt; license to allow others to benefit from my work.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Simple Routing&lt;/code&gt; is available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;On &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt; as the package &lt;a href=&quot;https://www.nuget.org/packages/BeanstalkWorker.SimpleRouting/&quot;&gt;BeanstalkWorker.SimpleRouting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;GitHub&lt;/code&gt; &lt;a href=&quot;https://github.com/gabrielweyer/simple-routing/releases&quot;&gt;release&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;As &lt;a href=&quot;https://github.com/gabrielweyer/simple-routing&quot;&gt;source&lt;/a&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;Github&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;The implementation is so simple that you can just copy the classes into your own solution if that works better for you&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Simple Routing&lt;/code&gt; solution contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;SampleWeb&lt;/code&gt; app, you can either:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Send “work” - &lt;code class=&quot;highlighter-rouge&quot;&gt;Send/Work&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Send “nothing” - &lt;code class=&quot;highlighter-rouge&quot;&gt;Send/Nothing&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;send-messages&quot;&gt;Send messages&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;GET http://localhost:5000/Send/Work HTTP/1.1
Host: localhost:5000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/web-send-work.png&quot; alt=&quot;Send Work&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;GET http://localhost:5000/Send/Nothing HTTP/1.1
Host: localhost:5000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/web-send-nothing.png&quot; alt=&quot;Send Nothing&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;peek-at-the-messages&quot;&gt;Peek at the messages&lt;/h4&gt;

&lt;p&gt;Now let’s look at the messages in the &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; queue:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Work&lt;/code&gt; message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/message-work-body.png&quot; alt=&quot;Work Message Body&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/message-work-attributes.png&quot; alt=&quot;Work Message Attributes&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Nothing&lt;/code&gt; message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/message-nothing-body.png&quot; alt=&quot;Nothing Message Body&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/message-nothing-attributes.png&quot; alt=&quot;Nothing Message Attributes&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;handle-the-messages&quot;&gt;Handle the messages&lt;/h4&gt;

&lt;p&gt;Launch the &lt;code class=&quot;highlighter-rouge&quot;&gt;SampleWorker&lt;/code&gt; app. When running in &lt;code class=&quot;highlighter-rouge&quot;&gt;ElasticBeanstalk&lt;/code&gt; the &lt;a href=&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features-managing-env-tiers.html&quot;&gt;Sqsd daemon&lt;/a&gt; reads &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; messages from the &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; queue and &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; the content to your &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;. But we’re running the &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt; on our machine and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Sqsd daemon&lt;/code&gt; is not available. This is why I wrote &lt;code class=&quot;highlighter-rouge&quot;&gt;Beanstalk Seeder&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/gabrielweyer/beanstalk-seeder&quot;&gt;Beanstalk Seeder&lt;/a&gt; emulates the &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS Daemon&lt;/code&gt; surrounding an &lt;code class=&quot;highlighter-rouge&quot;&gt;Elastic Beanstalk&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker Tier&lt;/code&gt; so that you can replicate the interaction between a &lt;code class=&quot;highlighter-rouge&quot;&gt;Web Tier&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;Worker Tier&lt;/code&gt; on your machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;handling-the-work-message&quot;&gt;Handling the &lt;code class=&quot;highlighter-rouge&quot;&gt;Work&lt;/code&gt; message&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Beanstalk Seeder&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/beanstalk-seeder-work.png&quot; alt=&quot;Work Message Beanstalk Seeder&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/worker-work.png&quot; alt=&quot;Work Message Worker&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;handling-the-nothing-message&quot;&gt;Handling the &lt;code class=&quot;highlighter-rouge&quot;&gt;Nothing&lt;/code&gt; message&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Beanstalk Seeder&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/beanstalk-seeder-nothing.png&quot; alt=&quot;Nothing Message Beanstalk Seeder&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple-routing-elastic-beanstalk-worker/worker-nothing.png&quot; alt=&quot;Nothing Message Worker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I wrote a detailed guide in the &lt;a href=&quot;https://github.com/gabrielweyer/simple-routing&quot;&gt;GitHub repository&lt;/a&gt;. Give it a try and let me know if it works for you.&lt;/p&gt;

</description>
        <pubDate>Sun, 28 Jan 2018 20:24:33 +0000</pubDate>
        <link>https://gabrielweyer.github.io//2018/01/28/simple-routing-elastic-beanstalk-worker/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2018/01/28/simple-routing-elastic-beanstalk-worker/</guid>
      </item>
    
      <item>
        <title>Links Insights #1</title>
        <description>&lt;p&gt;Every now and then I stumble upon a brilliant post on Internet, I share some of those links on my &lt;a href=&quot;https://www.diigo.com/user/gabrielweyer&quot;&gt;Diigo profile&lt;/a&gt; but the format is very succinct. I decided to start a new experiment and instead write full blog posts about those links. The first reason is quite selfish as I would like to keep a record of what I thought was interesting and why, I also hope to empower the reader so that she can decide if she wants to read the full post as some of them are lengthy.&lt;/p&gt;

&lt;p&gt;I’m considering limiting each of those post to up to three links as to not require too much time from the reader.&lt;/p&gt;

&lt;p&gt;This is inspired by the excellent work that Chris Alcock and Michael Wolfenden are doing with respectively &lt;a href=&quot;http://blog.cwa.me.uk/&quot;&gt;The Morning Brew&lt;/a&gt; and &lt;a href=&quot;https://michael-wolfenden.github.io/&quot;&gt;The Wolf Report&lt;/a&gt;. Don’t be surprised if I end up &lt;del&gt;stealing&lt;/del&gt; borrowing some links from them.&lt;/p&gt;

&lt;p&gt;Without further ado let me get started with the first links.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-be-a-programmer-a-short-comprehensive-and-personal-summary&quot;&gt;How To Be a Programmer: A Short, Comprehensive, and Personal Summary&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Link&lt;/strong&gt;: &lt;a href=&quot;https://www.doc.ic.ac.uk/~susan/475/HowToBeAProgrammer.pdf&quot;&gt;https://www.doc.ic.ac.uk/~susan/475/HowToBeAProgrammer.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a 40 pages long PDF but contains some invaluable lessons especially if you’ve been in the field for only a few years.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A classic mistake is to use a hash table as a cache and forget to remove the references in the hash table. Since the reference remains, the referent is uncollectable but useless. This is called a memory leak.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a mistake I’ve seen across almost all companies I’ve consulted for. I never managed to understand why dev teams adopted this anti-pattern as it has only drawbacks and is not simpler to write than a barebone caching system.&lt;/p&gt;

&lt;p&gt;In the .NET word it’s often implemented via a &lt;code class=&quot;highlighter-rouge&quot;&gt;static private Dictionary&lt;/code&gt;. Developers tend to use objects as key without understanding the requirements around equality but the main issue is that there is rarely code to remove keys which then requires an app pool restart (in a web app) in order to get rid of the stale key! This is compounded by the fact that sessions are often stored in process too and will be wiped out by an app pool restart.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Caching is hard, only introduce caching if you need to (based on performance measurements and performance targets)&lt;/li&gt;
  &lt;li&gt;Use the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/performance/caching-in-net-framework-applications&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;System.Runtime.Caching&lt;/code&gt;&lt;/a&gt; namespace for in process caching&lt;/li&gt;
  &lt;li&gt;Cache data for the smallest amount of time you can get away with&lt;/li&gt;
  &lt;li&gt;Have an API allowing you to interact with your caching system&lt;/li&gt;
  &lt;li&gt;Consider using a distributed caching system (&lt;a href=&quot;https://redis.io/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Redis&lt;/code&gt;&lt;/a&gt; is great for this workload)&lt;/li&gt;
  &lt;li&gt;When using a distributed caching system, consider using a short lived in process cache&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Never, ever, rest any hopes on vapor. Vapor is any alleged software that has been promised but is not yet available.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This situation happened in one of my previous engagement. The feature we were developing was tightly integrated with a product being built by a startup. Their CEO flew down to our office, we listed the API endpoints we required and development started straight away. We even had a support engineer assigned to us!&lt;/p&gt;

&lt;p&gt;Two things started to happen:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Already working features would break suddenly. After getting some support it would turn out that they pushed a new release that broke the feature. They would then deploy a patch which would break another feature!&lt;/li&gt;
  &lt;li&gt;The core feature of this system was to poll third party services for created or modified entities. During our testing we noticed that entities were being missed frequently and we had to trigger the system manually for anything to happen. We raised those concerns and the startup promised to improve the reliability.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We were developing at a faster pace and started to mock more and more dependencies. The release date was approaching and we had no confidence the integration would work. The product we were working on had long release cycles and was deployed by our customers on their own infrastructure, a failure would have been catastrophic. It was finally decided to test the reliability of our provider, we also included one of their competitor. After a few days of collecting data the verdict came in and things weren’t looking good, even though the competitor captured 100% of the entities we created our provider missed almost 30% of them!&lt;/p&gt;

&lt;p&gt;The CTO decided to scrap the integration on the spot and we ended up throwing away half of the code base.&lt;/p&gt;

&lt;p&gt;What we did right was to investigate the unknowns early on in the project. Instead of building our infrastructure we developed a small proof of concept and were able to get a contrived end-to-end execution. The lesson that I learned is that you should define a SLA for your provider from day one and measure it.&lt;/p&gt;

&lt;h2 id=&quot;how-to-write-a-git-commit-message&quot;&gt;How to Write a Git Commit Message&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Link&lt;/strong&gt;: &lt;a href=&quot;https://chris.beams.io/posts/git-commit/&quot;&gt;https://chris.beams.io/posts/git-commit/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an amazing post, I’ve started to apply those rules a few months ago and my commit messages are so much better now.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Use the body to explain what and why vs. how&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://chris.beams.io/posts/git-commit/#why-not-how&quot;&gt;Giving context in the body&lt;/a&gt; is critical as often when fixing a bug I can see how it has been introduced but I have no idea why the change was made - even after reading the story associated with it! Please spend a few minutes explaining why and how a change was made, in 6 months or one year someone will be grateful. This someone might even be you!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Wrap the body at 72 characters&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I used to write my commit messages inline with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-m&lt;/code&gt; argument. After reading this &lt;a href=&quot;https://chris.beams.io/posts/git-commit/#wrap-72&quot;&gt;rule&lt;/a&gt; I realized I needed an editor. I started to use &lt;a href=&quot;https://notepad-plus-plus.org/&quot;&gt;Notepad++&lt;/a&gt; by configuring Git this way:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.editor &lt;span class=&quot;s2&quot;&gt;&quot;'C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;rogram Files (x86)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\N&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;otepad++&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;otepad++.exe' -multiInst -notabbar -nosession -noPlugin&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notepad++ accepts &lt;a href=&quot;https://docs.notepad-plus-plus.org/index.php/Command_Line_Switches&quot;&gt;command line switches&lt;/a&gt; but there is no switch to set the text width. Git has a setting enforcing the text width but it does not work with Notepad++. The good news is that Git can also use notepad and the text width will be enforced:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.editor notepad
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; format.commitMessageColumns 72&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But the text will be wrapped &lt;strong&gt;after&lt;/strong&gt; you save your commit message leading to a less than desirable result:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/links-insights-1/wrap-notepad.gif&quot;&gt;&lt;img src=&quot;/assets/links-insights-1/wrap-notepad.gif&quot; alt=&quot;wrap-notepad&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A better solution is to use vim instead:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.editor vim
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--unset&lt;/span&gt; format.commitMessageColumns&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/assets/links-insights-1/wrap-vim.gif&quot;&gt;&lt;img src=&quot;/assets/links-insights-1/wrap-vim.gif&quot; alt=&quot;wrap-vim&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I did not hit Enter while typing the body of this commit message, instead vim wrapped it for me automatically. If you want to learn more about configuring Git on Windows I wrote a &lt;a href=&quot;https://github.com/gabrielweyer/nuggets/blob/master/git/git.md&quot;&gt;tutorial&lt;/a&gt; to get you started.&lt;/p&gt;

</description>
        <pubDate>Sat, 27 Jan 2018 02:10:07 +0000</pubDate>
        <link>https://gabrielweyer.github.io//2018/01/27/links-insights-1/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2018/01/27/links-insights-1/</guid>
      </item>
    
      <item>
        <title>Capture network packets with netsh</title>
        <description>&lt;p&gt;Another day, another “interesting” issue at a customer. After deploying our product we were left with a partially working web application. The product has been developed over many years and is a mix of ASP Classic, Web Forms, MVC and Web API. In this case ASP Classic pages were broken and would throw an error.&lt;/p&gt;

&lt;h2 id=&quot;ensuring-asp-classic-is-configured-properly&quot;&gt;Ensuring ASP Classic is configured properly&lt;/h2&gt;

&lt;p&gt;The first step is to ensure that IIS has been configured to execute ASP Classic and this is done easily by adding a dummy ASP page to the web application. After deploying this page I was able to confirm that it was working as expected.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/5eb3198119bead02649c0fe11d733055.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/dummy-asp.png&quot; alt=&quot;dummy-asp&quot; /&gt;&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;enabling-failed-request-tracing&quot;&gt;Enabling failed request tracing&lt;/h2&gt;

&lt;p&gt;The features written in ASP Classic have been written many years ago and the developers didn’t consider logging as a key part of the development process. The end result being that when something goes wrong no logs get written by the application or to the event viewer.&lt;/p&gt;

&lt;p&gt;The second step is to turn on the “&lt;strong&gt;Failed Request Tracing Rules&lt;/strong&gt;“ and reload the failing page. Internet has a lot of tutorials around this but they’re all missing key steps, I’ll focus on those as you can find everything else easily.&lt;/p&gt;

&lt;p&gt;“Failed Request Tracing Rules” will not be available in the IIS Manager if you didn’t turn on the &lt;strong&gt;Tracing&lt;/strong&gt; feature in Windows Features:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/tracing.png&quot; alt=&quot;tracing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another thing is that multiple sites could be writing traces at the same time. Each site will be writing to a different sub folder suffixed with the site ID:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/site-id.gif&quot; alt=&quot;site-id&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally you can copy the log files back to your machine, don’t forget to copy the freb.xsl file too, you’ll then be able to open the XML files in Internet Explorer and look at a human readable representation of the log.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/invalid-authority.png&quot; alt=&quot;invalid-authority&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All ASP Classic pages are calling an API endpoint in order to get a token (long story short: don’t ask - the user is signing-in in an AngularJS app backed by Web API and is then able to use seamlessly the pages hosted on MVC, Web Forms and Classic ASP). What is strange in this situation is that Internet Explorer is marking the TLS certificate as valid, so does Chrome. Even worse: the same ASP Classic page hosted on my machine calling the token endpoint on the remote server is successful! The Windows Certificate Manager is displaying the same message for the root CA, intermediate CA and certificate: ”This certificate is OK.”.&lt;/p&gt;

&lt;p&gt;I then suspected the certificate might be using unsupported ciphers but it turned out that it wasn’t the case. I quickly wrote a C# Console application calling the same token endpoint - the HttpClient class is throwing meaningful errors - but to my dismay the C# code was able to call the endpoint successfully!&lt;/p&gt;

&lt;p&gt;Armed with the ErrorCode “80072f0d” and the Description “The certificate authority is invalid or incorrect” I scoured Internet for some potential solutions. Everything I could find was related to invalid and self-signed certificates.&lt;/p&gt;

&lt;h2 id=&quot;capturing-packets-on-a-windows-server&quot;&gt;Capturing packets on a Windows Server&lt;/h2&gt;

&lt;p&gt;When people think “packet capture” they always assume they need to install &lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt; (or another similar tool) whereas Windows Server is shipping with the ability to capture network packets with &lt;a href=&quot;https://technet.microsoft.com/en-us/library/dd878517(v=ws.10).aspx&quot;&gt;netsh&lt;/a&gt; since Windows Server 2008 R2. The advantage of this solution is that you don’t need to install anything on the machine. To see if it’s available, all you need to do is open a command prompt and type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-posh&quot; data-lang=&quot;posh&quot;&gt;netsh trace&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/netsh-trace.gif&quot; alt=&quot;netsh-trace&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we know that &lt;strong&gt;trace&lt;/strong&gt; is available we need to start capturing the packets and reproduce the problem. Launch an &lt;strong&gt;elevated&lt;/strong&gt; command prompt and type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-posh&quot; data-lang=&quot;posh&quot;&gt;netsh trace &lt;span class=&quot;nb&quot;&gt;start &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tracefile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\tmp\traces\classic.etl&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;internetclient &lt;span class=&quot;nv&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yes &lt;span class=&quot;nv&quot;&gt;maxsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;200 &lt;span class=&quot;nv&quot;&gt;filemode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;circular &lt;span class=&quot;nv&quot;&gt;overwrite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yes&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the path needs to exist beforehand.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/start-stop.gif&quot; alt=&quot;start-stop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Starting and stopping the trace is actually slower that what is demonstrated above but I didn’t want lo lose your attention! And of course you would need to reproduce the issue before issuing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-posh&quot; data-lang=&quot;posh&quot;&gt;netsh stop&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;microsoft-message-analyzer&quot;&gt;Microsoft Message Analyzer&lt;/h2&gt;

&lt;p&gt;We now need to analyze this trace and this is done with the &lt;a href=&quot;https://technet.microsoft.com/en-us/library/jj649776.aspx&quot;&gt;Microsoft Message&lt;/a&gt; &lt;a href=&quot;https://blogs.technet.microsoft.com/messageanalyzer/&quot;&gt;Analyzer&lt;/a&gt; (can be downloaded &lt;a href=&quot;https://www.microsoft.com/en-au/download/details.aspx?id=44226&quot;&gt;here&lt;/a&gt;). The Analyzer takes a long time to open the smallest trace but once the trace is loaded you can search quickly.&lt;/p&gt;

&lt;p&gt;We’ll first look for an HTTP CONNECT, use this filter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(HTTP.Method == &quot;CONNECT&quot;) And
(HTTP.Uri.Host == &quot;domain.name&quot;) And
(HTTP.Uri.Port == &quot;port&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/connect.png&quot; alt=&quot;connect.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see the CONNECT was successful. Let’s investigate the TLS handshake now, this is handled by the TLS module so all we need to do is filter on this module only:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;TLS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is what was captured when the C# application connected to the token endpoint:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/c-sharp-tls.png&quot; alt=&quot;c-sharp-tls&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is matching closely what is described in the &lt;a href=&quot;https://tools.ietf.org/html/rfc5246#page-36&quot;&gt;RFC 5246&lt;/a&gt; (TLS 1.2).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/full-handshake.png&quot; alt=&quot;full-handshake&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s now capture the traffic when the VB code is trying to call the token endpoint.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/vb-tls.png&quot; alt=&quot;vb-tls.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Great Scott! The server is sending &lt;code class=&quot;highlighter-rouge&quot;&gt;ServerHello&lt;/code&gt; as expected but the client doesn’t reply with &lt;code class=&quot;highlighter-rouge&quot;&gt;ClientKeyExchange&lt;/code&gt;. I then removed the filter and started to look at the messages below. My reasoning was that I should be finding some kind of error message soon after and here it was:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-07-16-capture-network-packets-with-netsh/browsing-messages.png&quot; alt=&quot;browsing-messages&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The error message was:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A certificate chain processed, but terminated in a root certificate which is not trusted by the trust provider. (0x800B0109)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As it turned out someone had messed up with the certificate store and removed the intermediate CA from the “Intermediate Certification Authorities”. As the root CA was still present in the “Trusted Root Certification Authorities” it was good enough for Internet Explorer and C# but it wasn’t for VB! I added the intermediate CA to the store and things started to work again.&lt;/p&gt;

</description>
        <pubDate>Sat, 16 Jul 2016 09:20:07 +0000</pubDate>
        <link>https://gabrielweyer.github.io//2016/07/16/capture-network-packets-with-netsh/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2016/07/16/capture-network-packets-with-netsh/</guid>
      </item>
    
      <item>
        <title>beIN SPORTS CONNECT</title>
        <description>&lt;p&gt;I like football, even with the time difference I try to watch at least the World Cup and the European Championship. I watched the last World Cup on &lt;a href=&quot;http://www.sbs.com.au/&quot;&gt;SBS&lt;/a&gt; but this time around they only managed to secure a handful of games. As they’re a public service it makes sense after all that they wouldn’t buy the rights for all the games. A quick search on Google indicated that &lt;a href=&quot;http://www.beinsportsconnect.com.au/home&quot;&gt;beIN SPORTS CONNECT&lt;/a&gt; is the way to go in Australia - I will refer to this service as beIN for the rest of this post.&lt;/p&gt;

&lt;h1 id=&quot;subscribing&quot;&gt;Subscribing&lt;/h1&gt;

&lt;p&gt;As the pricing seems reasonable I decided to go ahead. The page is loaded over HTTPS so we start well but to my surprise the form contains a &lt;strong&gt;password remainder&lt;/strong&gt; field. Password remainders are a bad practice as users tend to fill them with their password (when allowed) or with a hint that is an obvious give away.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;As I don’t know any of my password, a password reminder is useless to me so I always generate a strong unique random password for this field. After trying to submit the form I got the following error:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-06-13-bein-sports-connect/password-remainder.png&quot; alt=&quot;password-remainder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I don’t understand the benefits of restricting the characters I can use. On the contrary it seems to indicate this site is potentially vulnerable to &lt;a href=&quot;https://www.troyhunt.com/understanding-xss-input-sanitisation/&quot;&gt;XSS&lt;/a&gt;. I generate another reminder without “special” characters and get presented with another error:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-06-13-bein-sports-connect/invalid-format.png&quot; alt=&quot;invalid-format&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So my valid email address is in an “Incorrect format”. How convenient should they ever decide to sell my data to a third party without me being able to track it back to them.&lt;/p&gt;

&lt;p&gt;I start to have a bad feeling about the password requirements. After all the only one that is stated is that my password should be at least 6 characters. I decide to use “123456” and also use it as the password reminder. &lt;strong&gt;&amp;lt;clickbait&amp;gt;&lt;/strong&gt;You won’t believe what happens next!&lt;strong&gt;&amp;lt;/clickbait&amp;gt;&lt;/strong&gt;. Actually I’m sure you knew what would happen: the form happily accepted my password and let me reuse it in the reminder field. Well at least I “&lt;em&gt;can access the site&lt;/em&gt; &lt;strong&gt;securely&lt;/strong&gt;” (emphasis is mine).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-06-13-bein-sports-connect/123456.png&quot; alt=&quot;123456&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One last thing before we move on to the dessert. Does it seem normal to be loading so many third party JavaScript files on a registration page? They’re even loading ads and we know what malicious ads do to your browser and it’s not kind (malware installation, credentials theft…).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-06-13-bein-sports-connect/do-you-need-ads-on-signup.png&quot; alt=&quot;do-you-need-ads-on-signup.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;sign-inform-loaded-over-http&quot;&gt;Sign-in form loaded over HTTP&lt;/h1&gt;

&lt;p&gt;Yes you read that right. Even though the form is POSTing to HTTPS by then it is &lt;a href=&quot;https://www.troyhunt.com/your-login-form-posts-to-https-but-you/&quot;&gt;too late&lt;/a&gt;. An attacker could have already intercepted the initial HTTP response and pointed the form to the URL of his choosing.&lt;/p&gt;

&lt;p&gt;Sometimes websites still offer sign-in over HTTPS when you look for it but it doesn’t seem to be the case here.  &lt;a href=&quot;https://secure.beinsportsconnect.com.au/&quot;&gt;https://secure.beinsportsconnect.com.au/&lt;/a&gt; redirects to &lt;a href=&quot;http://www.beinsportsconnect.com.au/&quot;&gt;http://www.beinsportsconnect.com.au/&lt;/a&gt; and trying to access &lt;a href=&quot;https://www.beinsportsconnect.com.au/&quot;&gt;https://www.beinsportsconnect.com.au/&lt;/a&gt; results in something you should never see:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-06-13-bein-sports-connect/bein-loaded-over-https.png&quot; alt=&quot;bein-loaded-over-https.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;If you’re already using beIN or are planning on starting to use it at least generate a unique password so that when they get compromised attackers will not gain access to your account on other services.&lt;/p&gt;

&lt;p&gt;I understand going all HTTPS would require a tremendous amount of work but beIN could first take some other steps that would make a big difference:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Remove the password reminder altogether&lt;/li&gt;
  &lt;li&gt;Provide a dedicated HTTPS only sign-in page&lt;/li&gt;
  &lt;li&gt;Stop loading third-party ads on the sign-in page&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 13 Jun 2016 10:46:32 +0000</pubDate>
        <link>https://gabrielweyer.github.io//2016/06/13/bein-sports-connect/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2016/06/13/bein-sports-connect/</guid>
      </item>
    
      <item>
        <title>CodeCleanser</title>
        <description>&lt;p&gt;Recently I came up with an interesting issue at a customer. A governmental agency contacted us and informed us that due to a Windows update we could experience intermittent issue when trying to communicate with them. All I knew at this stage was that the issue would manifest itself when trying to upload a document and that the integration is done via DLLs that are wrapping a few web services.&lt;/p&gt;

&lt;p&gt;After &lt;a href=&quot;https://www.jetbrains.com/help/decompiler/2016.1/Generating_PDB_Files.html&quot;&gt;generating PDBs&lt;/a&gt; via &lt;a href=&quot;https://www.jetbrains.com/decompiler/&quot;&gt;dotPeek&lt;/a&gt; and adding them to the Visual Studio symbol cache directory I was able to debug through those third party DLLs and confirm that the issue was indeed located in one of them.&lt;/p&gt;

&lt;p&gt;Knowing the DLL is redistributed with the product, is in multiple production versions and that the source control’s history is pretty patchy, the question then become: &lt;strong&gt;if we were to get a new DLL could we use it for all the versions?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To answer this question we will have to assess the differences between the DLL in each version.&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;first-naive-attempt-checksum&quot;&gt;First naive attempt: checksum&lt;/h1&gt;

&lt;p&gt;Windows ships with a few ways to compute a checksum, &lt;a href=&quot;http://superuser.com/a/898377/128002&quot;&gt;CertUtil&lt;/a&gt; is one of them, PowerShell has a &lt;a href=&quot;https://technet.microsoft.com/en-us/library/dn520872.aspx&quot;&gt;Get-FileHash&lt;/a&gt; cmdlet and this is what I’ll use:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-posh&quot; data-lang=&quot;posh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;Get-FileHash&lt;/span&gt; &amp;lt;filepath&amp;gt; -Algorithm MD5&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For our purpose MD5 is good enough, if you want to ensure that a file hasn’t been tampered with you should be using SHA256 at least.&lt;/p&gt;

&lt;p&gt;Sadly the three checksums for the three versions were different. But it doesn’t mean the DLLs are semantically different. It could have been metadata, different .NET Framework versions…&lt;/p&gt;

&lt;p&gt;At this stage I could have used &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/f7dy01k1(v=vs.110).aspx&quot;&gt;Ildasm&lt;/a&gt; to try to diff the full source code in one file but according to my previous tries the output end up being different. For sake of completeness I tried again before writing this blog post.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-posh&quot; data-lang=&quot;posh&quot;&gt;ildasm &amp;lt;dll-filepath&amp;gt; /text /out&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;output-filepath&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This time is no exception, WinMerge indicates 348 differences! Some of them can be explained away:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2016-06-04-codecleanser/different-dot-net-version.png&quot;&gt;&lt;img src=&quot;/assets/2016-06-04-codecleanser/different-dot-net-version.png&quot; alt=&quot;different-dot-net-version&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The assemblies have been compiled using different version of the .NET Framework, which makes sense as many years separate those two versions.&lt;/p&gt;

&lt;p&gt;Next comes an interesting piece of information that explains why two builds of the same source code always result in two different DLLs:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2016-06-04-codecleanser/mvid-image-base.png&quot;&gt;&lt;img src=&quot;/assets/2016-06-04-codecleanser/mvid-image-base.png&quot; alt=&quot;mvid-image-base.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.module.moduleversionid(v=vs.110).aspx&quot;&gt;MVID&lt;/a&gt; changes at every single build, for our purpose we can safely ignore this difference, same goes for the Image base. The other differences are more worrying:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2016-06-04-codecleanser/different-attributes.png&quot;&gt;&lt;img src=&quot;/assets/2016-06-04-codecleanser/different-attributes.png&quot; alt=&quot;different-attributes.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looks like the Attributes are the same but in a different order. There are hundreds of such instances and as IL is harder to read than C# it’s time to move on to another strategy.&lt;/p&gt;

&lt;h1 id=&quot;plan-b-generate-a-project-via-dotpeek&quot;&gt;Plan B: generate a project via dotPeek&lt;/h1&gt;

&lt;p&gt;dotPeek can not only decompile IL to C#, it also can &lt;a href=&quot;https://www.jetbrains.com/help/decompiler/2016.1/Exporting_Assembly_to_Project.html&quot;&gt;generate a project from a DLL&lt;/a&gt;. Let’s give it a spin and close this case!&lt;/p&gt;

&lt;p&gt;According to WinMerge, every single file is different! Now I’m a sad panda :(, how could the C# differ even more than the IL? This is due to the fact that as a &lt;em&gt;convenience&lt;/em&gt;, dotPeek kindly outputs the MVID and the assembly location at the top of each file:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2016-06-04-codecleanser/dotpeek-mvid-assembly-location.png&quot;&gt;&lt;img src=&quot;/assets/2016-06-04-codecleanser/dotpeek-mvid-assembly-location.png&quot; alt=&quot;dotpeek-mvid-assembly-location&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our use case, this is rather inconvenient. Luckily WinMerge has a feature called &lt;a href=&quot;http://stackoverflow.com/a/22178182/57369&quot;&gt;LineFilters&lt;/a&gt; which allows to ignore lines based on Regular Expressions. Two filters later a lot of files are still different:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2016-06-04-codecleanser/win-merge.png&quot;&gt;&lt;img src=&quot;/assets/2016-06-04-codecleanser/win-merge.png&quot; alt=&quot;win-merge.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s now confirmed, some attributes are in a different order! dotPeek has an &lt;a href=&quot;https://youtrack.jetbrains.com/issue/DOTP-7063&quot;&gt;opened bug&lt;/a&gt; regarding this but it hasn’t been updated since October 2015 so we can assume it won’t be fixed anytime soon. By then I already spent 30 minutes on this task and being a consultant I can’t justify spending more time trying to find a (mostly) automated solution. I might be able to pull it off with a Regex but it might also turn to be a rabbit hole. According to the number of different files and hoping it would only be about attributes ordering it should take me less than an hour to go through the difference. It actually only took me 30 minutes and confirmed the assumption that only the order of the attributes was differing.&lt;/p&gt;

&lt;h1 id=&quot;enter-codecleanser&quot;&gt;Enter CodeCleanser&lt;/h1&gt;

&lt;p&gt;Fast forward two days, it’s Saturday morning and I’m wondering if I can use &lt;a href=&quot;https://github.com/dotnet/roslyn&quot;&gt;Roslyn&lt;/a&gt; to solve this problem.&lt;/p&gt;

&lt;p&gt;I had 3 objectives:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Get rid of the comments at the top of the file&lt;/li&gt;
  &lt;li&gt;Sort Attributes by alphabetical order&lt;/li&gt;
  &lt;li&gt;Wrap up before training&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The source code is available &lt;a href=&quot;https://github.com/gabrielweyer/CodeCleanser&quot;&gt;here&lt;/a&gt;, feel free to use it and adapt it to your own needs.&lt;/p&gt;

&lt;h2 id=&quot;get-rid-of-the-comments-at-the-top-of-the-file&quot;&gt;Get rid of the comments at the top of the file&lt;/h2&gt;

&lt;p&gt;Let’s start by what seems the easiest: removing the comments at the top of the files. What’s very nice with Roslyn is that you don’t need an actual file, you can pass a string as an argument which makes unit testing very easy. As I’m only planning on doing cosmetic changes and I only care about comparing the two DLLs I don’t need to operate at a project or solution level.&lt;/p&gt;

&lt;p&gt;Following the TDD principles I’ll first write a &lt;a href=&quot;https://github.com/gabrielweyer/CodeCleanser/blob/4b7b769bdf104461decc7db0f6ce46a890de4351/Tests/RemoveLeadingTriviaTests.cs#L8-L55&quot;&gt;test&lt;/a&gt;:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/b6aaa2c60ba20f8340d32edd4ff87265.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This test ensures that everything before the first using statement is removed. Let’s now look at the &lt;a href=&quot;https://github.com/gabrielweyer/CodeCleanser/blob/4b7b769bdf104461decc7db0f6ce46a890de4351/Logic/CodeCleaner.cs#L39-L47&quot;&gt;implementation&lt;/a&gt;:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/ac0976203a5315f16e1bac81963a6a8b.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The Roslyn documentation defines a &lt;a href=&quot;https://github.com/dotnet/roslyn/wiki/Roslyn%20Overview#syntax-trivia&quot;&gt;trivia&lt;/a&gt; as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Syntax trivia represent the parts of the source text that are largely insignificant for normal understanding of the code, such as whitespace, comments, and preprocessor directives.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All the code is doing is replace each leading trivia with an empty trivia. I’m sure there is a better way of doing this but this works well enough for my purpose.&lt;/p&gt;

&lt;h2 id=&quot;sort-attributes-by-alphabetical-order&quot;&gt;Sort Attributes by alphabetical order&lt;/h2&gt;

&lt;p&gt;Again we’ll start with a &lt;a href=&quot;https://github.com/gabrielweyer/CodeCleanser/blob/4b7b769bdf104461decc7db0f6ce46a890de4351/Tests/SortAttributesAlphabeticallyTests.cs#L8-L51&quot;&gt;test&lt;/a&gt;:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/786db1ecb44c689ce18532cda794f0f7.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;We’ll need to pack a bit more power this time. In my case the issue only happened on class, enum and property declarations, CSharpSyntaxRewriter seems to be a good candidate for what I want to achieve. The implementation can be found &lt;a href=&quot;https://github.com/gabrielweyer/CodeCleanser/blob/4b7b769bdf104461decc7db0f6ce46a890de4351/Logic/AttributesSorter.cs#L46-L66&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/2daec819f25eca2679174c08985b599e.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;I had to make sure the blank line preceding the first attribute didn’t get moved down and that’s why there is some logic around leading trivia (prompted by this &lt;a href=&quot;https://github.com/gabrielweyer/CodeCleanser/blob/4b7b769bdf104461decc7db0f6ce46a890de4351/Tests/SortAttributesAlphabeticallyTests.cs#L180-L219&quot;&gt;test&lt;/a&gt;). Initially I was storing the AttributeListSyntax in a dictionary using the first attribute name as a key, of course I forgot that you could have the same attribute multiple time on a single declaration. It prompted me to write this &lt;a href=&quot;https://github.com/gabrielweyer/CodeCleanser/blob/4b7b769bdf104461decc7db0f6ce46a890de4351/Tests/SortAttributesAlphabeticallyTests.cs#L53-L9&quot;&gt;test&lt;/a&gt;) and adapt my implementation. It took me a few tries to get it right and rather than having to replace the files after each attempt I created a local Git repository, committed the unmodified files and issued a git reset after each attempt.&lt;/p&gt;

&lt;p&gt;After running CodeCleanser on the three DLLs I was able to confirm they were identical.&lt;/p&gt;

&lt;h1 id=&quot;plot-twist&quot;&gt;Plot twist&lt;/h1&gt;

&lt;p&gt;I contacted the governmental agency and asked them if they could provide us with the new version of their DLL. To my surprise they told me that they’re distributing source code only. Sure enough after a few Git commands I discovered we had the code under source control all along! Funnily enough nobody knew about it and it wouldn’t have helped anyway as history only go two years back.&lt;/p&gt;

&lt;h1 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h1&gt;

&lt;p&gt;The main takeaway is that everything is immutable in Roslyn. I kept forgetting that Add and AddRange would return a new AttributeListSyntax instead of performing an in place Add. As those methods have not been marked as Pure, ReSharper would not warm me that I didn’t use the return type and I would end up with an empty AttributeListSyntax. After 10 seconds of debugging I would exclaim “I’m an idiot” every single time, never gets old! Roslyn has changed a lot between the different Release Candidates and many code sample from Internet won’t compile.&lt;/p&gt;

&lt;p&gt;During my research I found &lt;a href=&quot;https://roslynquoter.azurewebsites.net/&quot;&gt;https://roslynquoter.azurewebsites.net/&lt;/a&gt;, it takes C# as an input and writes out the Roslyn code that will generate it.&lt;/p&gt;

&lt;p&gt;I realize CodeCleanser doesn’t do much and the whole comparing process still requires some manual steps but I hope it can help someone else.&lt;/p&gt;

</description>
        <pubDate>Sat, 04 Jun 2016 00:41:48 +0000</pubDate>
        <link>https://gabrielweyer.github.io//2016/06/04/codecleanser/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2016/06/04/codecleanser/</guid>
      </item>
    
      <item>
        <title>Barnes and Noble: a tale of poor security practices</title>
        <description>&lt;p&gt;Being the happy owner of a Kindle I usually buy my ebooks on Amazon. They have a very large selection to choose from and normally sell all the latest releases. To my surprise they only had “&lt;a href=&quot;(http://us.macmillan.com/enigmaofchina/qiuxiaolong)&quot;&gt;Enigma of China&lt;/a&gt;” from Qiu Xialong in paperback and hardcover formats. &lt;a href=&quot;http://store.kobobooks.com/en-US/Search/Query?query=Enigma%20of%20China&amp;amp;dontModifyQuery=True&quot;&gt;Kobo&lt;/a&gt; didn’t have it at all but after searching for a while I found out that Barnes &amp;amp; Noble sold it as a &lt;a href=&quot;http://www.barnesandnoble.com/w/enigma-of-china-qiu-xiaolong/1114701902?ean=9781250025814&quot;&gt;NOOK Book&lt;/a&gt; for $10.&lt;/p&gt;

&lt;p&gt;So far, so good or so it seemed. It turned out that Barnes &amp;amp; Noble has such a lax approach of security that at the end I decided not to purchase from them. You’ll find below the reasons that motivated my decision.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;i-sign-in-and-registration-in-a-new-window&quot;&gt;I Sign in and registration in a new window&lt;/h2&gt;

&lt;p&gt;The first issue made itself apparent very quickly: when clicking on the “Sign in” link the browser will open a new window. This new window does not contain a toolbar, which means that users won’t be able to use some password managers (such as 1Password, the Chrome extension being accessible through a button in the toolbar).&lt;/p&gt;

&lt;p&gt;I know that you can work around it as the &lt;a href=&quot;https://www.barnesandnoble.com/signin&quot;&gt;Sign in&lt;/a&gt; page is also available directly on the website. You can also use the shortcut “Ctrl + &quot; within the new window in order to enter your credentials via 1Password but I don’t think that everybody is a power user. Basically opening a new window instead of loading a page creates extra-friction when using a password manager.&lt;/p&gt;

&lt;p&gt;Of course the registration page is also located in a new window and within this page things got even more interesting!&lt;/p&gt;

&lt;h2 id=&quot;ii-mixed-content-warning&quot;&gt;II Mixed content warning&lt;/h2&gt;

&lt;p&gt;As they’re loading a dedicated sign in page, you would expect Barnes &amp;amp; Noble to use SSL properly. As it turned out the source code contains a link to an HTTP iframe. Chrome (rightly so) blocks the content and displays a warning:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-12-07-barnes-and-noble-a-tale-of-poor-security-practices/barnes-and-noble-sign-in-mixed-content-warning.png&quot;&gt;&lt;img src=&quot;/assets/2014-12-07-barnes-and-noble-a-tale-of-poor-security-practices/barnes-and-noble-sign-in-mixed-content-warning.png&quot; alt=&quot;Sign in: mixed content warning&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most interesting part is that the tracking page is also available via &lt;a href=&quot;https://4476037.fls.doubleclick.net/activityi;cat=signi0;ord=1641192771;src=4476037;type=signi0?&quot;&gt;SSL&lt;/a&gt;. The sign in page being loaded only over SSL, the link could have been hardcoded as SSL too.&lt;/p&gt;

&lt;h2 id=&quot;iii-weak-password-policy&quot;&gt;III Weak password policy&lt;/h2&gt;

&lt;p&gt;So Barnes and Noble decided to limit the number of characters I can use in my password to 15. Not only this but they’re also preventing me from using any special characters. I’m not sure what “&lt;em&gt;numeric symbol&lt;/em&gt;” means, some special characters might be allowed but as a user I’ve no idea which one I can use.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-12-07-barnes-and-noble-a-tale-of-poor-security-practices/barnes-and-noble-password-policy.png&quot;&gt;&lt;img src=&quot;/assets/2014-12-07-barnes-and-noble-a-tale-of-poor-security-practices/barnes-and-noble-password-policy.png&quot; alt=&quot;Barnes &amp;amp; noble: password policy&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s quite strange that the security answer is limited to 15 characters, what if my favorite movie is “&lt;a href=&quot;http://www.imdb.com/title/tt0111161/&quot;&gt;The Shawshank Redemption&lt;/a&gt;)”? Security questions are a terrible practice anyway as people tend to use easily guessable answers (as you can see in the screenshot I get my password manager to generate one for me).&lt;/p&gt;

&lt;h2 id=&quot;iv-mixed-content-warning-on-payment-page&quot;&gt;IV Mixed content warning on payment page&lt;/h2&gt;

&lt;p&gt;Even the payment page comes with a shiny warning:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-12-07-barnes-and-noble-a-tale-of-poor-security-practices/barnes-and-noble-payment-mixed-content-warning.png&quot;&gt;&lt;img src=&quot;/assets/2014-12-07-barnes-and-noble-a-tale-of-poor-security-practices/barnes-and-noble-payment-mixed-content-warning.png&quot; alt=&quot;Barnes &amp;amp; Noble: payment mixed content warning&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is due to the fact that the search form is posting to an &lt;a href=&quot;http://www.barnesandnoble.com/s/Enigma-of-China?store=allproducts&amp;amp;keyword=Enigma+of+China&quot;&gt;HTTP endpoint&lt;/a&gt; even when the page is loaded over SSL.&lt;/p&gt;

&lt;p&gt;At this stage I decided to give up, buying this book is not worth taking the risk of exposing my credit card data.&lt;/p&gt;

&lt;h2 id=&quot;special-bonus-credit-card-number-used-in-the-drm&quot;&gt;Special bonus: credit card number used in the DRM&lt;/h2&gt;

&lt;p&gt;Barnes and Noble decided to protect its content via the highly controversial use of a &lt;a href=&quot;http://en.wikipedia.org/wiki/Digital_rights_management&quot;&gt;DRM&lt;/a&gt; system (Amazon has made the same choice). The goal is to prevent the consumer from sharing it’s purchase with any other user. Of course DRM don’t work and they’re only being a major annoyance to the people actually paying for content.&lt;/p&gt;

&lt;p&gt;What is unusual is that Barnes and Noble decided that it would use your &lt;strong&gt;credit card number&lt;/strong&gt; in order to sign the DRM. This means that this data is included with your ebooks and could potentially be extracted.&lt;/p&gt;

&lt;h2 id=&quot;how-could-barnes--noble-address-those-issues&quot;&gt;How could Barnes &amp;amp; Noble address those issues?&lt;/h2&gt;

&lt;p&gt;Instead of opening a new window for sign in and registration the site should merely link to a new page. As a matter of fact they already have them in place: &lt;a href=&quot;https://www.barnesandnoble.com/signin&quot;&gt;sign in&lt;/a&gt; and &lt;a href=&quot;https://www.barnesandnoble.com/register&quot;&gt;registration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;They should also link to the SSL URL of the DoubleClick script on their sign in and registration page.&lt;/p&gt;

&lt;p&gt;Passwords should not be restricted in terms of character set or length. If you really want to have an upper limit it should be set to something ridiculously high (such as 100 characters). In fact they should instead enforce stronger passwords (combination of letters, numbers and symbols).&lt;/p&gt;

&lt;p&gt;The payment should be on a page of its own and not use the same layout (I don’t think that users need to be able to look for a book while entering their credit card details).&lt;/p&gt;

&lt;p&gt;And please stop encoding my credit card number into the books I’m buying from you. If you’re afraid I’ll remove your precious DRM and share the book on Internet there is nothing preventing you to use a unique string linked to my account.&lt;/p&gt;

&lt;p&gt;Some of those points are extremely easy to address (new page for sign in and registration, SSL URL for the tracking script), others will certainly be more challenging but are nevertheless necessary.&lt;/p&gt;

</description>
        <pubDate>Sun, 07 Dec 2014 06:16:14 +0000</pubDate>
        <link>https://gabrielweyer.github.io//2014/12/07/barnes-and-noble-a-tale-of-poor-security-practices/</link>
        <guid isPermaLink="true">https://gabrielweyer.github.io//2014/12/07/barnes-and-noble-a-tale-of-poor-security-practices/</guid>
      </item>
    
  </channel>
</rss>
